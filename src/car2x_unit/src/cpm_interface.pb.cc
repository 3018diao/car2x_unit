// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cpm_interface.proto

#include "cpm_interface.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_etsi_5fits_5fcdd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CartesianAngle_etsi_5fits_5fcdd_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_etsi_5fits_5fcdd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CircularShape_etsi_5fits_5fcdd_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cpm_5finterface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CpmPayload_cpm_5finterface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_etsi_5fits_5fcdd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EllipticalShape_etsi_5fits_5fcdd_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_etsi_5fits_5fcdd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IntersectionReferenceID_etsi_5fits_5fcdd_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cpm_5finterface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ManagmentContainer_cpm_5finterface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cpm_5finterface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OriginatingRSUContainer_cpm_5finterface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cpm_5finterface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OriginatingStationsContainer_cpm_5finterface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cpm_5finterface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OriginatingVehicleContainer_cpm_5finterface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_etsi_5fits_5fcdd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PolygonalShape_etsi_5fits_5fcdd_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_etsi_5fits_5fcdd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RadialShape_etsi_5fits_5fcdd_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_etsi_5fits_5fcdd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RadialShapes_etsi_5fits_5fcdd_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_etsi_5fits_5fcdd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RectangularShape_etsi_5fits_5fcdd_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_etsi_5fits_5fcdd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReferencePosition_etsi_5fits_5fcdd_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_etsi_5fits_5fcdd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoadSegmentReferenceID_etsi_5fits_5fcdd_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cpm_5finterface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_SensorInformationContainer_cpm_5finterface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_etsi_5fits_5fcdd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Wgs84Angle_etsi_5fits_5fcdd_2eproto;
class CPMMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CPMMessage> _instance;
} _CPMMessage_default_instance_;
class ManagmentContainerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ManagmentContainer> _instance;
} _ManagmentContainer_default_instance_;
class CpmPayloadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CpmPayload> _instance;
} _CpmPayload_default_instance_;
class OriginatingStationsContainerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OriginatingStationsContainer> _instance;
} _OriginatingStationsContainer_default_instance_;
class OriginatingVehicleContainerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OriginatingVehicleContainer> _instance;
} _OriginatingVehicleContainer_default_instance_;
class OriginatingRSUContainerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OriginatingRSUContainer> _instance;
} _OriginatingRSUContainer_default_instance_;
class SensorInformationContainerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorInformationContainer> _instance;
  const ::RectangularShape* rectangular_;
  const ::CircularShape* circular_;
  const ::PolygonalShape* polygonal_;
  const ::EllipticalShape* elliptical_;
  const ::RadialShape* radial_;
  const ::RadialShapes* radialshapes_;
} _SensorInformationContainer_default_instance_;
static void InitDefaultsscc_info_CPMMessage_cpm_5finterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CPMMessage_default_instance_;
    new (ptr) ::CPMMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CPMMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CPMMessage_cpm_5finterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CPMMessage_cpm_5finterface_2eproto}, {
      &scc_info_ManagmentContainer_cpm_5finterface_2eproto.base,
      &scc_info_CpmPayload_cpm_5finterface_2eproto.base,}};

static void InitDefaultsscc_info_CpmPayload_cpm_5finterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CpmPayload_default_instance_;
    new (ptr) ::CpmPayload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CpmPayload::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CpmPayload_cpm_5finterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CpmPayload_cpm_5finterface_2eproto}, {
      &scc_info_OriginatingStationsContainer_cpm_5finterface_2eproto.base,
      &scc_info_SensorInformationContainer_cpm_5finterface_2eproto.base,}};

static void InitDefaultsscc_info_ManagmentContainer_cpm_5finterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ManagmentContainer_default_instance_;
    new (ptr) ::ManagmentContainer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ManagmentContainer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ManagmentContainer_cpm_5finterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ManagmentContainer_cpm_5finterface_2eproto}, {
      &scc_info_ReferencePosition_etsi_5fits_5fcdd_2eproto.base,}};

static void InitDefaultsscc_info_OriginatingRSUContainer_cpm_5finterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OriginatingRSUContainer_default_instance_;
    new (ptr) ::OriginatingRSUContainer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OriginatingRSUContainer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OriginatingRSUContainer_cpm_5finterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_OriginatingRSUContainer_cpm_5finterface_2eproto}, {
      &scc_info_RoadSegmentReferenceID_etsi_5fits_5fcdd_2eproto.base,
      &scc_info_IntersectionReferenceID_etsi_5fits_5fcdd_2eproto.base,}};

static void InitDefaultsscc_info_OriginatingStationsContainer_cpm_5finterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OriginatingStationsContainer_default_instance_;
    new (ptr) ::OriginatingStationsContainer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OriginatingStationsContainer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OriginatingStationsContainer_cpm_5finterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_OriginatingStationsContainer_cpm_5finterface_2eproto}, {
      &scc_info_OriginatingVehicleContainer_cpm_5finterface_2eproto.base,
      &scc_info_OriginatingRSUContainer_cpm_5finterface_2eproto.base,}};

static void InitDefaultsscc_info_OriginatingVehicleContainer_cpm_5finterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OriginatingVehicleContainer_default_instance_;
    new (ptr) ::OriginatingVehicleContainer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OriginatingVehicleContainer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OriginatingVehicleContainer_cpm_5finterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_OriginatingVehicleContainer_cpm_5finterface_2eproto}, {
      &scc_info_Wgs84Angle_etsi_5fits_5fcdd_2eproto.base,
      &scc_info_CartesianAngle_etsi_5fits_5fcdd_2eproto.base,}};

static void InitDefaultsscc_info_SensorInformationContainer_cpm_5finterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SensorInformationContainer_default_instance_;
    new (ptr) ::SensorInformationContainer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SensorInformationContainer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_SensorInformationContainer_cpm_5finterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_SensorInformationContainer_cpm_5finterface_2eproto}, {
      &scc_info_RectangularShape_etsi_5fits_5fcdd_2eproto.base,
      &scc_info_CircularShape_etsi_5fits_5fcdd_2eproto.base,
      &scc_info_PolygonalShape_etsi_5fits_5fcdd_2eproto.base,
      &scc_info_EllipticalShape_etsi_5fits_5fcdd_2eproto.base,
      &scc_info_RadialShape_etsi_5fits_5fcdd_2eproto.base,
      &scc_info_RadialShapes_etsi_5fits_5fcdd_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cpm_5finterface_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cpm_5finterface_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cpm_5finterface_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cpm_5finterface_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CPMMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPMMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPMMessage, mgmt_cntnr_),
  PROTOBUF_FIELD_OFFSET(::CPMMessage, cpm_payload_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ManagmentContainer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ManagmentContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ManagmentContainer, ref_pos_),
  0,
  PROTOBUF_FIELD_OFFSET(::CpmPayload, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CpmPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CpmPayload, org_stn_cntr_),
  PROTOBUF_FIELD_OFFSET(::CpmPayload, snsr_info_cntr_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::OriginatingStationsContainer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::OriginatingStationsContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OriginatingStationsContainer, org_veh_cntr_),
  PROTOBUF_FIELD_OFFSET(::OriginatingStationsContainer, org_rsu_cntr_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::OriginatingVehicleContainer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::OriginatingVehicleContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OriginatingVehicleContainer, orientationangle_),
  PROTOBUF_FIELD_OFFSET(::OriginatingVehicleContainer, pitchangle_),
  PROTOBUF_FIELD_OFFSET(::OriginatingVehicleContainer, rollangle_),
  PROTOBUF_FIELD_OFFSET(::OriginatingVehicleContainer, trailerdataset_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::OriginatingRSUContainer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::OriginatingRSUContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OriginatingRSUContainer, roadsegment_),
  PROTOBUF_FIELD_OFFSET(::OriginatingRSUContainer, intersection_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SensorInformationContainer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SensorInformationContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::SensorInformationContainer, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SensorInformationContainer, sensorid_),
  PROTOBUF_FIELD_OFFSET(::SensorInformationContainer, sensor_type_),
  offsetof(::SensorInformationContainerDefaultTypeInternal, rectangular_),
  offsetof(::SensorInformationContainerDefaultTypeInternal, circular_),
  offsetof(::SensorInformationContainerDefaultTypeInternal, polygonal_),
  offsetof(::SensorInformationContainerDefaultTypeInternal, elliptical_),
  offsetof(::SensorInformationContainerDefaultTypeInternal, radial_),
  offsetof(::SensorInformationContainerDefaultTypeInternal, radialshapes_),
  PROTOBUF_FIELD_OFFSET(::SensorInformationContainer, perception_region_conf_),
  PROTOBUF_FIELD_OFFSET(::SensorInformationContainer, shadowingapplies_),
  PROTOBUF_FIELD_OFFSET(::SensorInformationContainer, shape_),
  0,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  3,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::CPMMessage)},
  { 9, 15, sizeof(::ManagmentContainer)},
  { 16, 23, sizeof(::CpmPayload)},
  { 25, 32, sizeof(::OriginatingStationsContainer)},
  { 34, 43, sizeof(::OriginatingVehicleContainer)},
  { 47, 54, sizeof(::OriginatingRSUContainer)},
  { 56, 72, sizeof(::SensorInformationContainer)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPMMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ManagmentContainer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CpmPayload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_OriginatingStationsContainer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_OriginatingVehicleContainer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_OriginatingRSUContainer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SensorInformationContainer_default_instance_),
};

const char descriptor_table_protodef_cpm_5finterface_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023cpm_interface.proto\032\034itspduheader_inte"
  "rface.proto\032\022etsi_its_cdd.proto\"W\n\nCPMMe"
  "ssage\022\'\n\nmgmt_cntnr\030\001 \002(\0132\023.ManagmentCon"
  "tainer\022 \n\013cpm_payload\030\002 \002(\0132\013.CpmPayload"
  "\"9\n\022ManagmentContainer\022#\n\007ref_pos\030\001 \002(\0132"
  "\022.ReferencePosition\"v\n\nCpmPayload\0223\n\014org"
  "_stn_cntr\030\001 \002(\0132\035.OriginatingStationsCon"
  "tainer\0223\n\016snsr_info_cntr\030\002 \002(\0132\033.SensorI"
  "nformationContainer\"\202\001\n\034OriginatingStati"
  "onsContainer\0222\n\014org_veh_cntr\030\001 \001(\0132\034.Ori"
  "ginatingVehicleContainer\022.\n\014org_rsu_cntr"
  "\030\002 \001(\0132\030.OriginatingRSUContainer\"\245\001\n\033Ori"
  "ginatingVehicleContainer\022%\n\020orientationA"
  "ngle\030\001 \002(\0132\013.Wgs84Angle\022#\n\npitchAngle\030\002 "
  "\001(\0132\017.CartesianAngle\022\"\n\trollAngle\030\003 \001(\0132"
  "\017.CartesianAngle\022\026\n\016trailerDataset\030\004 \001(\003"
  "\"w\n\027OriginatingRSUContainer\022,\n\013roadsegme"
  "nt\030\001 \002(\0132\027.RoadSegmentReferenceID\022.\n\014int"
  "ersection\030\002 \002(\0132\030.IntersectionReferenceI"
  "D\"\366\002\n\032SensorInformationContainer\022\020\n\010sens"
  "orID\030\001 \002(\003\022 \n\013sensor_type\030\002 \002(\0162\013.Sensor"
  "Type\022(\n\013rectangular\030\003 \001(\0132\021.RectangularS"
  "hapeH\000\022\"\n\010circular\030\004 \001(\0132\016.CircularShape"
  "H\000\022$\n\tpolygonal\030\005 \001(\0132\017.PolygonalShapeH\000"
  "\022&\n\nelliptical\030\006 \001(\0132\020.EllipticalShapeH\000"
  "\022\036\n\006radial\030\007 \001(\0132\014.RadialShapeH\000\022%\n\014radi"
  "alShapes\030\010 \001(\0132\r.RadialShapesH\000\022\036\n\026perce"
  "ption_region_conf\030\t \001(\r\022\030\n\020shadowingappl"
  "ies\030\n \002(\010B\007\n\005shapeP\000P\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cpm_5finterface_2eproto_deps[2] = {
  &::descriptor_table_etsi_5fits_5fcdd_2eproto,
  &::descriptor_table_itspduheader_5finterface_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cpm_5finterface_2eproto_sccs[7] = {
  &scc_info_CPMMessage_cpm_5finterface_2eproto.base,
  &scc_info_CpmPayload_cpm_5finterface_2eproto.base,
  &scc_info_ManagmentContainer_cpm_5finterface_2eproto.base,
  &scc_info_OriginatingRSUContainer_cpm_5finterface_2eproto.base,
  &scc_info_OriginatingStationsContainer_cpm_5finterface_2eproto.base,
  &scc_info_OriginatingVehicleContainer_cpm_5finterface_2eproto.base,
  &scc_info_SensorInformationContainer_cpm_5finterface_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cpm_5finterface_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cpm_5finterface_2eproto = {
  false, false, descriptor_table_protodef_cpm_5finterface_2eproto, "cpm_interface.proto", 1142,
  &descriptor_table_cpm_5finterface_2eproto_once, descriptor_table_cpm_5finterface_2eproto_sccs, descriptor_table_cpm_5finterface_2eproto_deps, 7, 2,
  schemas, file_default_instances, TableStruct_cpm_5finterface_2eproto::offsets,
  file_level_metadata_cpm_5finterface_2eproto, 7, file_level_enum_descriptors_cpm_5finterface_2eproto, file_level_service_descriptors_cpm_5finterface_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cpm_5finterface_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cpm_5finterface_2eproto)), true);

// ===================================================================

void CPMMessage::InitAsDefaultInstance() {
  ::_CPMMessage_default_instance_._instance.get_mutable()->mgmt_cntnr_ = const_cast< ::ManagmentContainer*>(
      ::ManagmentContainer::internal_default_instance());
  ::_CPMMessage_default_instance_._instance.get_mutable()->cpm_payload_ = const_cast< ::CpmPayload*>(
      ::CpmPayload::internal_default_instance());
}
class CPMMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CPMMessage>()._has_bits_);
  static const ::ManagmentContainer& mgmt_cntnr(const CPMMessage* msg);
  static void set_has_mgmt_cntnr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CpmPayload& cpm_payload(const CPMMessage* msg);
  static void set_has_cpm_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::ManagmentContainer&
CPMMessage::_Internal::mgmt_cntnr(const CPMMessage* msg) {
  return *msg->mgmt_cntnr_;
}
const ::CpmPayload&
CPMMessage::_Internal::cpm_payload(const CPMMessage* msg) {
  return *msg->cpm_payload_;
}
CPMMessage::CPMMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPMMessage)
}
CPMMessage::CPMMessage(const CPMMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mgmt_cntnr()) {
    mgmt_cntnr_ = new ::ManagmentContainer(*from.mgmt_cntnr_);
  } else {
    mgmt_cntnr_ = nullptr;
  }
  if (from._internal_has_cpm_payload()) {
    cpm_payload_ = new ::CpmPayload(*from.cpm_payload_);
  } else {
    cpm_payload_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CPMMessage)
}

void CPMMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CPMMessage_cpm_5finterface_2eproto.base);
  ::memset(&mgmt_cntnr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cpm_payload_) -
      reinterpret_cast<char*>(&mgmt_cntnr_)) + sizeof(cpm_payload_));
}

CPMMessage::~CPMMessage() {
  // @@protoc_insertion_point(destructor:CPMMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPMMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete mgmt_cntnr_;
  if (this != internal_default_instance()) delete cpm_payload_;
}

void CPMMessage::ArenaDtor(void* object) {
  CPMMessage* _this = reinterpret_cast< CPMMessage* >(object);
  (void)_this;
}
void CPMMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPMMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPMMessage& CPMMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CPMMessage_cpm_5finterface_2eproto.base);
  return *internal_default_instance();
}


void CPMMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CPMMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(mgmt_cntnr_ != nullptr);
      mgmt_cntnr_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cpm_payload_ != nullptr);
      cpm_payload_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPMMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .ManagmentContainer mgmt_cntnr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mgmt_cntnr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .CpmPayload cpm_payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpm_payload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPMMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPMMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ManagmentContainer mgmt_cntnr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mgmt_cntnr(this), target, stream);
  }

  // required .CpmPayload cpm_payload = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cpm_payload(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPMMessage)
  return target;
}

size_t CPMMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CPMMessage)
  size_t total_size = 0;

  if (_internal_has_mgmt_cntnr()) {
    // required .ManagmentContainer mgmt_cntnr = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mgmt_cntnr_);
  }

  if (_internal_has_cpm_payload()) {
    // required .CpmPayload cpm_payload = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cpm_payload_);
  }

  return total_size;
}
size_t CPMMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPMMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .ManagmentContainer mgmt_cntnr = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mgmt_cntnr_);

    // required .CpmPayload cpm_payload = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cpm_payload_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPMMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPMMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CPMMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPMMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPMMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPMMessage)
    MergeFrom(*source);
  }
}

void CPMMessage::MergeFrom(const CPMMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPMMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_mgmt_cntnr()->::ManagmentContainer::MergeFrom(from._internal_mgmt_cntnr());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cpm_payload()->::CpmPayload::MergeFrom(from._internal_cpm_payload());
    }
  }
}

void CPMMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPMMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPMMessage::CopyFrom(const CPMMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPMMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPMMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_mgmt_cntnr()) {
    if (!mgmt_cntnr_->IsInitialized()) return false;
  }
  if (_internal_has_cpm_payload()) {
    if (!cpm_payload_->IsInitialized()) return false;
  }
  return true;
}

void CPMMessage::InternalSwap(CPMMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPMMessage, cpm_payload_)
      + sizeof(CPMMessage::cpm_payload_)
      - PROTOBUF_FIELD_OFFSET(CPMMessage, mgmt_cntnr_)>(
          reinterpret_cast<char*>(&mgmt_cntnr_),
          reinterpret_cast<char*>(&other->mgmt_cntnr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPMMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ManagmentContainer::InitAsDefaultInstance() {
  ::_ManagmentContainer_default_instance_._instance.get_mutable()->ref_pos_ = const_cast< ::ReferencePosition*>(
      ::ReferencePosition::internal_default_instance());
}
class ManagmentContainer::_Internal {
 public:
  using HasBits = decltype(std::declval<ManagmentContainer>()._has_bits_);
  static const ::ReferencePosition& ref_pos(const ManagmentContainer* msg);
  static void set_has_ref_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::ReferencePosition&
ManagmentContainer::_Internal::ref_pos(const ManagmentContainer* msg) {
  return *msg->ref_pos_;
}
void ManagmentContainer::clear_ref_pos() {
  if (ref_pos_ != nullptr) ref_pos_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ManagmentContainer::ManagmentContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ManagmentContainer)
}
ManagmentContainer::ManagmentContainer(const ManagmentContainer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ref_pos()) {
    ref_pos_ = new ::ReferencePosition(*from.ref_pos_);
  } else {
    ref_pos_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ManagmentContainer)
}

void ManagmentContainer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ManagmentContainer_cpm_5finterface_2eproto.base);
  ref_pos_ = nullptr;
}

ManagmentContainer::~ManagmentContainer() {
  // @@protoc_insertion_point(destructor:ManagmentContainer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ManagmentContainer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ref_pos_;
}

void ManagmentContainer::ArenaDtor(void* object) {
  ManagmentContainer* _this = reinterpret_cast< ManagmentContainer* >(object);
  (void)_this;
}
void ManagmentContainer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ManagmentContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ManagmentContainer& ManagmentContainer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ManagmentContainer_cpm_5finterface_2eproto.base);
  return *internal_default_instance();
}


void ManagmentContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:ManagmentContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ref_pos_ != nullptr);
    ref_pos_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ManagmentContainer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .ReferencePosition ref_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ref_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ManagmentContainer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ManagmentContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ReferencePosition ref_pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ref_pos(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ManagmentContainer)
  return target;
}

size_t ManagmentContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ManagmentContainer)
  size_t total_size = 0;

  // required .ReferencePosition ref_pos = 1;
  if (_internal_has_ref_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ref_pos_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ManagmentContainer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ManagmentContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const ManagmentContainer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ManagmentContainer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ManagmentContainer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ManagmentContainer)
    MergeFrom(*source);
  }
}

void ManagmentContainer::MergeFrom(const ManagmentContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ManagmentContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ref_pos()) {
    _internal_mutable_ref_pos()->::ReferencePosition::MergeFrom(from._internal_ref_pos());
  }
}

void ManagmentContainer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ManagmentContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManagmentContainer::CopyFrom(const ManagmentContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ManagmentContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManagmentContainer::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_ref_pos()) {
    if (!ref_pos_->IsInitialized()) return false;
  }
  return true;
}

void ManagmentContainer::InternalSwap(ManagmentContainer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ref_pos_, other->ref_pos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ManagmentContainer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CpmPayload::InitAsDefaultInstance() {
  ::_CpmPayload_default_instance_._instance.get_mutable()->org_stn_cntr_ = const_cast< ::OriginatingStationsContainer*>(
      ::OriginatingStationsContainer::internal_default_instance());
  ::_CpmPayload_default_instance_._instance.get_mutable()->snsr_info_cntr_ = const_cast< ::SensorInformationContainer*>(
      ::SensorInformationContainer::internal_default_instance());
}
class CpmPayload::_Internal {
 public:
  using HasBits = decltype(std::declval<CpmPayload>()._has_bits_);
  static const ::OriginatingStationsContainer& org_stn_cntr(const CpmPayload* msg);
  static void set_has_org_stn_cntr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::SensorInformationContainer& snsr_info_cntr(const CpmPayload* msg);
  static void set_has_snsr_info_cntr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::OriginatingStationsContainer&
CpmPayload::_Internal::org_stn_cntr(const CpmPayload* msg) {
  return *msg->org_stn_cntr_;
}
const ::SensorInformationContainer&
CpmPayload::_Internal::snsr_info_cntr(const CpmPayload* msg) {
  return *msg->snsr_info_cntr_;
}
CpmPayload::CpmPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CpmPayload)
}
CpmPayload::CpmPayload(const CpmPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_org_stn_cntr()) {
    org_stn_cntr_ = new ::OriginatingStationsContainer(*from.org_stn_cntr_);
  } else {
    org_stn_cntr_ = nullptr;
  }
  if (from._internal_has_snsr_info_cntr()) {
    snsr_info_cntr_ = new ::SensorInformationContainer(*from.snsr_info_cntr_);
  } else {
    snsr_info_cntr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CpmPayload)
}

void CpmPayload::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CpmPayload_cpm_5finterface_2eproto.base);
  ::memset(&org_stn_cntr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&snsr_info_cntr_) -
      reinterpret_cast<char*>(&org_stn_cntr_)) + sizeof(snsr_info_cntr_));
}

CpmPayload::~CpmPayload() {
  // @@protoc_insertion_point(destructor:CpmPayload)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CpmPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete org_stn_cntr_;
  if (this != internal_default_instance()) delete snsr_info_cntr_;
}

void CpmPayload::ArenaDtor(void* object) {
  CpmPayload* _this = reinterpret_cast< CpmPayload* >(object);
  (void)_this;
}
void CpmPayload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CpmPayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CpmPayload& CpmPayload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CpmPayload_cpm_5finterface_2eproto.base);
  return *internal_default_instance();
}


void CpmPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:CpmPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(org_stn_cntr_ != nullptr);
      org_stn_cntr_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(snsr_info_cntr_ != nullptr);
      snsr_info_cntr_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CpmPayload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .OriginatingStationsContainer org_stn_cntr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_org_stn_cntr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .SensorInformationContainer snsr_info_cntr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_snsr_info_cntr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CpmPayload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CpmPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .OriginatingStationsContainer org_stn_cntr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::org_stn_cntr(this), target, stream);
  }

  // required .SensorInformationContainer snsr_info_cntr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::snsr_info_cntr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CpmPayload)
  return target;
}

size_t CpmPayload::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CpmPayload)
  size_t total_size = 0;

  if (_internal_has_org_stn_cntr()) {
    // required .OriginatingStationsContainer org_stn_cntr = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *org_stn_cntr_);
  }

  if (_internal_has_snsr_info_cntr()) {
    // required .SensorInformationContainer snsr_info_cntr = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *snsr_info_cntr_);
  }

  return total_size;
}
size_t CpmPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CpmPayload)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .OriginatingStationsContainer org_stn_cntr = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *org_stn_cntr_);

    // required .SensorInformationContainer snsr_info_cntr = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *snsr_info_cntr_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CpmPayload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CpmPayload)
  GOOGLE_DCHECK_NE(&from, this);
  const CpmPayload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CpmPayload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CpmPayload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CpmPayload)
    MergeFrom(*source);
  }
}

void CpmPayload::MergeFrom(const CpmPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CpmPayload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_org_stn_cntr()->::OriginatingStationsContainer::MergeFrom(from._internal_org_stn_cntr());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_snsr_info_cntr()->::SensorInformationContainer::MergeFrom(from._internal_snsr_info_cntr());
    }
  }
}

void CpmPayload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CpmPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CpmPayload::CopyFrom(const CpmPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CpmPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpmPayload::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_org_stn_cntr()) {
    if (!org_stn_cntr_->IsInitialized()) return false;
  }
  if (_internal_has_snsr_info_cntr()) {
    if (!snsr_info_cntr_->IsInitialized()) return false;
  }
  return true;
}

void CpmPayload::InternalSwap(CpmPayload* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CpmPayload, snsr_info_cntr_)
      + sizeof(CpmPayload::snsr_info_cntr_)
      - PROTOBUF_FIELD_OFFSET(CpmPayload, org_stn_cntr_)>(
          reinterpret_cast<char*>(&org_stn_cntr_),
          reinterpret_cast<char*>(&other->org_stn_cntr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CpmPayload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OriginatingStationsContainer::InitAsDefaultInstance() {
  ::_OriginatingStationsContainer_default_instance_._instance.get_mutable()->org_veh_cntr_ = const_cast< ::OriginatingVehicleContainer*>(
      ::OriginatingVehicleContainer::internal_default_instance());
  ::_OriginatingStationsContainer_default_instance_._instance.get_mutable()->org_rsu_cntr_ = const_cast< ::OriginatingRSUContainer*>(
      ::OriginatingRSUContainer::internal_default_instance());
}
class OriginatingStationsContainer::_Internal {
 public:
  using HasBits = decltype(std::declval<OriginatingStationsContainer>()._has_bits_);
  static const ::OriginatingVehicleContainer& org_veh_cntr(const OriginatingStationsContainer* msg);
  static void set_has_org_veh_cntr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::OriginatingRSUContainer& org_rsu_cntr(const OriginatingStationsContainer* msg);
  static void set_has_org_rsu_cntr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::OriginatingVehicleContainer&
OriginatingStationsContainer::_Internal::org_veh_cntr(const OriginatingStationsContainer* msg) {
  return *msg->org_veh_cntr_;
}
const ::OriginatingRSUContainer&
OriginatingStationsContainer::_Internal::org_rsu_cntr(const OriginatingStationsContainer* msg) {
  return *msg->org_rsu_cntr_;
}
OriginatingStationsContainer::OriginatingStationsContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OriginatingStationsContainer)
}
OriginatingStationsContainer::OriginatingStationsContainer(const OriginatingStationsContainer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_org_veh_cntr()) {
    org_veh_cntr_ = new ::OriginatingVehicleContainer(*from.org_veh_cntr_);
  } else {
    org_veh_cntr_ = nullptr;
  }
  if (from._internal_has_org_rsu_cntr()) {
    org_rsu_cntr_ = new ::OriginatingRSUContainer(*from.org_rsu_cntr_);
  } else {
    org_rsu_cntr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:OriginatingStationsContainer)
}

void OriginatingStationsContainer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OriginatingStationsContainer_cpm_5finterface_2eproto.base);
  ::memset(&org_veh_cntr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&org_rsu_cntr_) -
      reinterpret_cast<char*>(&org_veh_cntr_)) + sizeof(org_rsu_cntr_));
}

OriginatingStationsContainer::~OriginatingStationsContainer() {
  // @@protoc_insertion_point(destructor:OriginatingStationsContainer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OriginatingStationsContainer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete org_veh_cntr_;
  if (this != internal_default_instance()) delete org_rsu_cntr_;
}

void OriginatingStationsContainer::ArenaDtor(void* object) {
  OriginatingStationsContainer* _this = reinterpret_cast< OriginatingStationsContainer* >(object);
  (void)_this;
}
void OriginatingStationsContainer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OriginatingStationsContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OriginatingStationsContainer& OriginatingStationsContainer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OriginatingStationsContainer_cpm_5finterface_2eproto.base);
  return *internal_default_instance();
}


void OriginatingStationsContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:OriginatingStationsContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(org_veh_cntr_ != nullptr);
      org_veh_cntr_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(org_rsu_cntr_ != nullptr);
      org_rsu_cntr_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OriginatingStationsContainer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .OriginatingVehicleContainer org_veh_cntr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_org_veh_cntr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .OriginatingRSUContainer org_rsu_cntr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_org_rsu_cntr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OriginatingStationsContainer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OriginatingStationsContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .OriginatingVehicleContainer org_veh_cntr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::org_veh_cntr(this), target, stream);
  }

  // optional .OriginatingRSUContainer org_rsu_cntr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::org_rsu_cntr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OriginatingStationsContainer)
  return target;
}

size_t OriginatingStationsContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OriginatingStationsContainer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .OriginatingVehicleContainer org_veh_cntr = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *org_veh_cntr_);
    }

    // optional .OriginatingRSUContainer org_rsu_cntr = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *org_rsu_cntr_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OriginatingStationsContainer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OriginatingStationsContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const OriginatingStationsContainer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OriginatingStationsContainer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OriginatingStationsContainer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OriginatingStationsContainer)
    MergeFrom(*source);
  }
}

void OriginatingStationsContainer::MergeFrom(const OriginatingStationsContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OriginatingStationsContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_org_veh_cntr()->::OriginatingVehicleContainer::MergeFrom(from._internal_org_veh_cntr());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_org_rsu_cntr()->::OriginatingRSUContainer::MergeFrom(from._internal_org_rsu_cntr());
    }
  }
}

void OriginatingStationsContainer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OriginatingStationsContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OriginatingStationsContainer::CopyFrom(const OriginatingStationsContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OriginatingStationsContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OriginatingStationsContainer::IsInitialized() const {
  if (_internal_has_org_veh_cntr()) {
    if (!org_veh_cntr_->IsInitialized()) return false;
  }
  if (_internal_has_org_rsu_cntr()) {
    if (!org_rsu_cntr_->IsInitialized()) return false;
  }
  return true;
}

void OriginatingStationsContainer::InternalSwap(OriginatingStationsContainer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OriginatingStationsContainer, org_rsu_cntr_)
      + sizeof(OriginatingStationsContainer::org_rsu_cntr_)
      - PROTOBUF_FIELD_OFFSET(OriginatingStationsContainer, org_veh_cntr_)>(
          reinterpret_cast<char*>(&org_veh_cntr_),
          reinterpret_cast<char*>(&other->org_veh_cntr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OriginatingStationsContainer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OriginatingVehicleContainer::InitAsDefaultInstance() {
  ::_OriginatingVehicleContainer_default_instance_._instance.get_mutable()->orientationangle_ = const_cast< ::Wgs84Angle*>(
      ::Wgs84Angle::internal_default_instance());
  ::_OriginatingVehicleContainer_default_instance_._instance.get_mutable()->pitchangle_ = const_cast< ::CartesianAngle*>(
      ::CartesianAngle::internal_default_instance());
  ::_OriginatingVehicleContainer_default_instance_._instance.get_mutable()->rollangle_ = const_cast< ::CartesianAngle*>(
      ::CartesianAngle::internal_default_instance());
}
class OriginatingVehicleContainer::_Internal {
 public:
  using HasBits = decltype(std::declval<OriginatingVehicleContainer>()._has_bits_);
  static const ::Wgs84Angle& orientationangle(const OriginatingVehicleContainer* msg);
  static void set_has_orientationangle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CartesianAngle& pitchangle(const OriginatingVehicleContainer* msg);
  static void set_has_pitchangle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CartesianAngle& rollangle(const OriginatingVehicleContainer* msg);
  static void set_has_rollangle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_trailerdataset(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::Wgs84Angle&
OriginatingVehicleContainer::_Internal::orientationangle(const OriginatingVehicleContainer* msg) {
  return *msg->orientationangle_;
}
const ::CartesianAngle&
OriginatingVehicleContainer::_Internal::pitchangle(const OriginatingVehicleContainer* msg) {
  return *msg->pitchangle_;
}
const ::CartesianAngle&
OriginatingVehicleContainer::_Internal::rollangle(const OriginatingVehicleContainer* msg) {
  return *msg->rollangle_;
}
void OriginatingVehicleContainer::clear_orientationangle() {
  if (orientationangle_ != nullptr) orientationangle_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void OriginatingVehicleContainer::clear_pitchangle() {
  if (pitchangle_ != nullptr) pitchangle_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void OriginatingVehicleContainer::clear_rollangle() {
  if (rollangle_ != nullptr) rollangle_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
OriginatingVehicleContainer::OriginatingVehicleContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OriginatingVehicleContainer)
}
OriginatingVehicleContainer::OriginatingVehicleContainer(const OriginatingVehicleContainer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_orientationangle()) {
    orientationangle_ = new ::Wgs84Angle(*from.orientationangle_);
  } else {
    orientationangle_ = nullptr;
  }
  if (from._internal_has_pitchangle()) {
    pitchangle_ = new ::CartesianAngle(*from.pitchangle_);
  } else {
    pitchangle_ = nullptr;
  }
  if (from._internal_has_rollangle()) {
    rollangle_ = new ::CartesianAngle(*from.rollangle_);
  } else {
    rollangle_ = nullptr;
  }
  trailerdataset_ = from.trailerdataset_;
  // @@protoc_insertion_point(copy_constructor:OriginatingVehicleContainer)
}

void OriginatingVehicleContainer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OriginatingVehicleContainer_cpm_5finterface_2eproto.base);
  ::memset(&orientationangle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trailerdataset_) -
      reinterpret_cast<char*>(&orientationangle_)) + sizeof(trailerdataset_));
}

OriginatingVehicleContainer::~OriginatingVehicleContainer() {
  // @@protoc_insertion_point(destructor:OriginatingVehicleContainer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OriginatingVehicleContainer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete orientationangle_;
  if (this != internal_default_instance()) delete pitchangle_;
  if (this != internal_default_instance()) delete rollangle_;
}

void OriginatingVehicleContainer::ArenaDtor(void* object) {
  OriginatingVehicleContainer* _this = reinterpret_cast< OriginatingVehicleContainer* >(object);
  (void)_this;
}
void OriginatingVehicleContainer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OriginatingVehicleContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OriginatingVehicleContainer& OriginatingVehicleContainer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OriginatingVehicleContainer_cpm_5finterface_2eproto.base);
  return *internal_default_instance();
}


void OriginatingVehicleContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:OriginatingVehicleContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(orientationangle_ != nullptr);
      orientationangle_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pitchangle_ != nullptr);
      pitchangle_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(rollangle_ != nullptr);
      rollangle_->Clear();
    }
  }
  trailerdataset_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OriginatingVehicleContainer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Wgs84Angle orientationAngle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientationangle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CartesianAngle pitchAngle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pitchangle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CartesianAngle rollAngle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rollangle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 trailerDataset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_trailerdataset(&has_bits);
          trailerdataset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OriginatingVehicleContainer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OriginatingVehicleContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Wgs84Angle orientationAngle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::orientationangle(this), target, stream);
  }

  // optional .CartesianAngle pitchAngle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pitchangle(this), target, stream);
  }

  // optional .CartesianAngle rollAngle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rollangle(this), target, stream);
  }

  // optional int64 trailerDataset = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_trailerdataset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OriginatingVehicleContainer)
  return target;
}

size_t OriginatingVehicleContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OriginatingVehicleContainer)
  size_t total_size = 0;

  // required .Wgs84Angle orientationAngle = 1;
  if (_internal_has_orientationangle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientationangle_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .CartesianAngle pitchAngle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pitchangle_);
    }

    // optional .CartesianAngle rollAngle = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rollangle_);
    }

    // optional int64 trailerDataset = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_trailerdataset());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OriginatingVehicleContainer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OriginatingVehicleContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const OriginatingVehicleContainer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OriginatingVehicleContainer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OriginatingVehicleContainer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OriginatingVehicleContainer)
    MergeFrom(*source);
  }
}

void OriginatingVehicleContainer::MergeFrom(const OriginatingVehicleContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OriginatingVehicleContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_orientationangle()->::Wgs84Angle::MergeFrom(from._internal_orientationangle());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_pitchangle()->::CartesianAngle::MergeFrom(from._internal_pitchangle());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_rollangle()->::CartesianAngle::MergeFrom(from._internal_rollangle());
    }
    if (cached_has_bits & 0x00000008u) {
      trailerdataset_ = from.trailerdataset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OriginatingVehicleContainer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OriginatingVehicleContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OriginatingVehicleContainer::CopyFrom(const OriginatingVehicleContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OriginatingVehicleContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OriginatingVehicleContainer::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_orientationangle()) {
    if (!orientationangle_->IsInitialized()) return false;
  }
  if (_internal_has_pitchangle()) {
    if (!pitchangle_->IsInitialized()) return false;
  }
  if (_internal_has_rollangle()) {
    if (!rollangle_->IsInitialized()) return false;
  }
  return true;
}

void OriginatingVehicleContainer::InternalSwap(OriginatingVehicleContainer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OriginatingVehicleContainer, trailerdataset_)
      + sizeof(OriginatingVehicleContainer::trailerdataset_)
      - PROTOBUF_FIELD_OFFSET(OriginatingVehicleContainer, orientationangle_)>(
          reinterpret_cast<char*>(&orientationangle_),
          reinterpret_cast<char*>(&other->orientationangle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OriginatingVehicleContainer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OriginatingRSUContainer::InitAsDefaultInstance() {
  ::_OriginatingRSUContainer_default_instance_._instance.get_mutable()->roadsegment_ = const_cast< ::RoadSegmentReferenceID*>(
      ::RoadSegmentReferenceID::internal_default_instance());
  ::_OriginatingRSUContainer_default_instance_._instance.get_mutable()->intersection_ = const_cast< ::IntersectionReferenceID*>(
      ::IntersectionReferenceID::internal_default_instance());
}
class OriginatingRSUContainer::_Internal {
 public:
  using HasBits = decltype(std::declval<OriginatingRSUContainer>()._has_bits_);
  static const ::RoadSegmentReferenceID& roadsegment(const OriginatingRSUContainer* msg);
  static void set_has_roadsegment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::IntersectionReferenceID& intersection(const OriginatingRSUContainer* msg);
  static void set_has_intersection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::RoadSegmentReferenceID&
OriginatingRSUContainer::_Internal::roadsegment(const OriginatingRSUContainer* msg) {
  return *msg->roadsegment_;
}
const ::IntersectionReferenceID&
OriginatingRSUContainer::_Internal::intersection(const OriginatingRSUContainer* msg) {
  return *msg->intersection_;
}
void OriginatingRSUContainer::clear_roadsegment() {
  if (roadsegment_ != nullptr) roadsegment_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void OriginatingRSUContainer::clear_intersection() {
  if (intersection_ != nullptr) intersection_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
OriginatingRSUContainer::OriginatingRSUContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OriginatingRSUContainer)
}
OriginatingRSUContainer::OriginatingRSUContainer(const OriginatingRSUContainer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_roadsegment()) {
    roadsegment_ = new ::RoadSegmentReferenceID(*from.roadsegment_);
  } else {
    roadsegment_ = nullptr;
  }
  if (from._internal_has_intersection()) {
    intersection_ = new ::IntersectionReferenceID(*from.intersection_);
  } else {
    intersection_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:OriginatingRSUContainer)
}

void OriginatingRSUContainer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OriginatingRSUContainer_cpm_5finterface_2eproto.base);
  ::memset(&roadsegment_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&intersection_) -
      reinterpret_cast<char*>(&roadsegment_)) + sizeof(intersection_));
}

OriginatingRSUContainer::~OriginatingRSUContainer() {
  // @@protoc_insertion_point(destructor:OriginatingRSUContainer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OriginatingRSUContainer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete roadsegment_;
  if (this != internal_default_instance()) delete intersection_;
}

void OriginatingRSUContainer::ArenaDtor(void* object) {
  OriginatingRSUContainer* _this = reinterpret_cast< OriginatingRSUContainer* >(object);
  (void)_this;
}
void OriginatingRSUContainer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OriginatingRSUContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OriginatingRSUContainer& OriginatingRSUContainer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OriginatingRSUContainer_cpm_5finterface_2eproto.base);
  return *internal_default_instance();
}


void OriginatingRSUContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:OriginatingRSUContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(roadsegment_ != nullptr);
      roadsegment_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(intersection_ != nullptr);
      intersection_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OriginatingRSUContainer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .RoadSegmentReferenceID roadsegment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_roadsegment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .IntersectionReferenceID intersection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_intersection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OriginatingRSUContainer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OriginatingRSUContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .RoadSegmentReferenceID roadsegment = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::roadsegment(this), target, stream);
  }

  // required .IntersectionReferenceID intersection = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::intersection(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OriginatingRSUContainer)
  return target;
}

size_t OriginatingRSUContainer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:OriginatingRSUContainer)
  size_t total_size = 0;

  if (_internal_has_roadsegment()) {
    // required .RoadSegmentReferenceID roadsegment = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roadsegment_);
  }

  if (_internal_has_intersection()) {
    // required .IntersectionReferenceID intersection = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *intersection_);
  }

  return total_size;
}
size_t OriginatingRSUContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OriginatingRSUContainer)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .RoadSegmentReferenceID roadsegment = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roadsegment_);

    // required .IntersectionReferenceID intersection = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *intersection_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OriginatingRSUContainer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OriginatingRSUContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const OriginatingRSUContainer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OriginatingRSUContainer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OriginatingRSUContainer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OriginatingRSUContainer)
    MergeFrom(*source);
  }
}

void OriginatingRSUContainer::MergeFrom(const OriginatingRSUContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OriginatingRSUContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_roadsegment()->::RoadSegmentReferenceID::MergeFrom(from._internal_roadsegment());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_intersection()->::IntersectionReferenceID::MergeFrom(from._internal_intersection());
    }
  }
}

void OriginatingRSUContainer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OriginatingRSUContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OriginatingRSUContainer::CopyFrom(const OriginatingRSUContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OriginatingRSUContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OriginatingRSUContainer::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_roadsegment()) {
    if (!roadsegment_->IsInitialized()) return false;
  }
  return true;
}

void OriginatingRSUContainer::InternalSwap(OriginatingRSUContainer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OriginatingRSUContainer, intersection_)
      + sizeof(OriginatingRSUContainer::intersection_)
      - PROTOBUF_FIELD_OFFSET(OriginatingRSUContainer, roadsegment_)>(
          reinterpret_cast<char*>(&roadsegment_),
          reinterpret_cast<char*>(&other->roadsegment_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OriginatingRSUContainer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorInformationContainer::InitAsDefaultInstance() {
  ::_SensorInformationContainer_default_instance_.rectangular_ = const_cast< ::RectangularShape*>(
      ::RectangularShape::internal_default_instance());
  ::_SensorInformationContainer_default_instance_.circular_ = const_cast< ::CircularShape*>(
      ::CircularShape::internal_default_instance());
  ::_SensorInformationContainer_default_instance_.polygonal_ = const_cast< ::PolygonalShape*>(
      ::PolygonalShape::internal_default_instance());
  ::_SensorInformationContainer_default_instance_.elliptical_ = const_cast< ::EllipticalShape*>(
      ::EllipticalShape::internal_default_instance());
  ::_SensorInformationContainer_default_instance_.radial_ = const_cast< ::RadialShape*>(
      ::RadialShape::internal_default_instance());
  ::_SensorInformationContainer_default_instance_.radialshapes_ = const_cast< ::RadialShapes*>(
      ::RadialShapes::internal_default_instance());
}
class SensorInformationContainer::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorInformationContainer>()._has_bits_);
  static void set_has_sensorid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sensor_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::RectangularShape& rectangular(const SensorInformationContainer* msg);
  static const ::CircularShape& circular(const SensorInformationContainer* msg);
  static const ::PolygonalShape& polygonal(const SensorInformationContainer* msg);
  static const ::EllipticalShape& elliptical(const SensorInformationContainer* msg);
  static const ::RadialShape& radial(const SensorInformationContainer* msg);
  static const ::RadialShapes& radialshapes(const SensorInformationContainer* msg);
  static void set_has_perception_region_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_shadowingapplies(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::RectangularShape&
SensorInformationContainer::_Internal::rectangular(const SensorInformationContainer* msg) {
  return *msg->shape_.rectangular_;
}
const ::CircularShape&
SensorInformationContainer::_Internal::circular(const SensorInformationContainer* msg) {
  return *msg->shape_.circular_;
}
const ::PolygonalShape&
SensorInformationContainer::_Internal::polygonal(const SensorInformationContainer* msg) {
  return *msg->shape_.polygonal_;
}
const ::EllipticalShape&
SensorInformationContainer::_Internal::elliptical(const SensorInformationContainer* msg) {
  return *msg->shape_.elliptical_;
}
const ::RadialShape&
SensorInformationContainer::_Internal::radial(const SensorInformationContainer* msg) {
  return *msg->shape_.radial_;
}
const ::RadialShapes&
SensorInformationContainer::_Internal::radialshapes(const SensorInformationContainer* msg) {
  return *msg->shape_.radialshapes_;
}
void SensorInformationContainer::set_allocated_rectangular(::RectangularShape* rectangular) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_shape();
  if (rectangular) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rectangular)->GetArena();
    if (message_arena != submessage_arena) {
      rectangular = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rectangular, submessage_arena);
    }
    set_has_rectangular();
    shape_.rectangular_ = rectangular;
  }
  // @@protoc_insertion_point(field_set_allocated:SensorInformationContainer.rectangular)
}
void SensorInformationContainer::clear_rectangular() {
  if (_internal_has_rectangular()) {
    if (GetArena() == nullptr) {
      delete shape_.rectangular_;
    }
    clear_has_shape();
  }
}
void SensorInformationContainer::set_allocated_circular(::CircularShape* circular) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_shape();
  if (circular) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(circular)->GetArena();
    if (message_arena != submessage_arena) {
      circular = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, circular, submessage_arena);
    }
    set_has_circular();
    shape_.circular_ = circular;
  }
  // @@protoc_insertion_point(field_set_allocated:SensorInformationContainer.circular)
}
void SensorInformationContainer::clear_circular() {
  if (_internal_has_circular()) {
    if (GetArena() == nullptr) {
      delete shape_.circular_;
    }
    clear_has_shape();
  }
}
void SensorInformationContainer::set_allocated_polygonal(::PolygonalShape* polygonal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_shape();
  if (polygonal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(polygonal)->GetArena();
    if (message_arena != submessage_arena) {
      polygonal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, polygonal, submessage_arena);
    }
    set_has_polygonal();
    shape_.polygonal_ = polygonal;
  }
  // @@protoc_insertion_point(field_set_allocated:SensorInformationContainer.polygonal)
}
void SensorInformationContainer::clear_polygonal() {
  if (_internal_has_polygonal()) {
    if (GetArena() == nullptr) {
      delete shape_.polygonal_;
    }
    clear_has_shape();
  }
}
void SensorInformationContainer::set_allocated_elliptical(::EllipticalShape* elliptical) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_shape();
  if (elliptical) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(elliptical)->GetArena();
    if (message_arena != submessage_arena) {
      elliptical = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, elliptical, submessage_arena);
    }
    set_has_elliptical();
    shape_.elliptical_ = elliptical;
  }
  // @@protoc_insertion_point(field_set_allocated:SensorInformationContainer.elliptical)
}
void SensorInformationContainer::clear_elliptical() {
  if (_internal_has_elliptical()) {
    if (GetArena() == nullptr) {
      delete shape_.elliptical_;
    }
    clear_has_shape();
  }
}
void SensorInformationContainer::set_allocated_radial(::RadialShape* radial) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_shape();
  if (radial) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(radial)->GetArena();
    if (message_arena != submessage_arena) {
      radial = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, radial, submessage_arena);
    }
    set_has_radial();
    shape_.radial_ = radial;
  }
  // @@protoc_insertion_point(field_set_allocated:SensorInformationContainer.radial)
}
void SensorInformationContainer::clear_radial() {
  if (_internal_has_radial()) {
    if (GetArena() == nullptr) {
      delete shape_.radial_;
    }
    clear_has_shape();
  }
}
void SensorInformationContainer::set_allocated_radialshapes(::RadialShapes* radialshapes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_shape();
  if (radialshapes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(radialshapes)->GetArena();
    if (message_arena != submessage_arena) {
      radialshapes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, radialshapes, submessage_arena);
    }
    set_has_radialshapes();
    shape_.radialshapes_ = radialshapes;
  }
  // @@protoc_insertion_point(field_set_allocated:SensorInformationContainer.radialShapes)
}
void SensorInformationContainer::clear_radialshapes() {
  if (_internal_has_radialshapes()) {
    if (GetArena() == nullptr) {
      delete shape_.radialshapes_;
    }
    clear_has_shape();
  }
}
SensorInformationContainer::SensorInformationContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SensorInformationContainer)
}
SensorInformationContainer::SensorInformationContainer(const SensorInformationContainer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sensorid_, &from.sensorid_,
    static_cast<size_t>(reinterpret_cast<char*>(&perception_region_conf_) -
    reinterpret_cast<char*>(&sensorid_)) + sizeof(perception_region_conf_));
  clear_has_shape();
  switch (from.shape_case()) {
    case kRectangular: {
      _internal_mutable_rectangular()->::RectangularShape::MergeFrom(from._internal_rectangular());
      break;
    }
    case kCircular: {
      _internal_mutable_circular()->::CircularShape::MergeFrom(from._internal_circular());
      break;
    }
    case kPolygonal: {
      _internal_mutable_polygonal()->::PolygonalShape::MergeFrom(from._internal_polygonal());
      break;
    }
    case kElliptical: {
      _internal_mutable_elliptical()->::EllipticalShape::MergeFrom(from._internal_elliptical());
      break;
    }
    case kRadial: {
      _internal_mutable_radial()->::RadialShape::MergeFrom(from._internal_radial());
      break;
    }
    case kRadialShapes: {
      _internal_mutable_radialshapes()->::RadialShapes::MergeFrom(from._internal_radialshapes());
      break;
    }
    case SHAPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SensorInformationContainer)
}

void SensorInformationContainer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorInformationContainer_cpm_5finterface_2eproto.base);
  ::memset(&sensorid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&perception_region_conf_) -
      reinterpret_cast<char*>(&sensorid_)) + sizeof(perception_region_conf_));
  clear_has_shape();
}

SensorInformationContainer::~SensorInformationContainer() {
  // @@protoc_insertion_point(destructor:SensorInformationContainer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SensorInformationContainer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_shape()) {
    clear_shape();
  }
}

void SensorInformationContainer::ArenaDtor(void* object) {
  SensorInformationContainer* _this = reinterpret_cast< SensorInformationContainer* >(object);
  (void)_this;
}
void SensorInformationContainer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorInformationContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorInformationContainer& SensorInformationContainer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorInformationContainer_cpm_5finterface_2eproto.base);
  return *internal_default_instance();
}


void SensorInformationContainer::clear_shape() {
// @@protoc_insertion_point(one_of_clear_start:SensorInformationContainer)
  switch (shape_case()) {
    case kRectangular: {
      if (GetArena() == nullptr) {
        delete shape_.rectangular_;
      }
      break;
    }
    case kCircular: {
      if (GetArena() == nullptr) {
        delete shape_.circular_;
      }
      break;
    }
    case kPolygonal: {
      if (GetArena() == nullptr) {
        delete shape_.polygonal_;
      }
      break;
    }
    case kElliptical: {
      if (GetArena() == nullptr) {
        delete shape_.elliptical_;
      }
      break;
    }
    case kRadial: {
      if (GetArena() == nullptr) {
        delete shape_.radial_;
      }
      break;
    }
    case kRadialShapes: {
      if (GetArena() == nullptr) {
        delete shape_.radialshapes_;
      }
      break;
    }
    case SHAPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SHAPE_NOT_SET;
}


void SensorInformationContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:SensorInformationContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&sensorid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&perception_region_conf_) -
        reinterpret_cast<char*>(&sensorid_)) + sizeof(perception_region_conf_));
  }
  clear_shape();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorInformationContainer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 sensorID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sensorid(&has_bits);
          sensorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .SensorType sensor_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SensorType_IsValid(val))) {
            _internal_set_sensor_type(static_cast<::SensorType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // .RectangularShape rectangular = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rectangular(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CircularShape circular = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_circular(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PolygonalShape polygonal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_polygonal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .EllipticalShape elliptical = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_elliptical(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RadialShape radial = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_radial(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RadialShapes radialShapes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_radialshapes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 perception_region_conf = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_perception_region_conf(&has_bits);
          perception_region_conf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool shadowingapplies = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_shadowingapplies(&has_bits);
          shadowingapplies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorInformationContainer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SensorInformationContainer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 sensorID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_sensorid(), target);
  }

  // required .SensorType sensor_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_sensor_type(), target);
  }

  switch (shape_case()) {
    case kRectangular: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::rectangular(this), target, stream);
      break;
    }
    case kCircular: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::circular(this), target, stream);
      break;
    }
    case kPolygonal: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::polygonal(this), target, stream);
      break;
    }
    case kElliptical: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::elliptical(this), target, stream);
      break;
    }
    case kRadial: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          7, _Internal::radial(this), target, stream);
      break;
    }
    case kRadialShapes: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          8, _Internal::radialshapes(this), target, stream);
      break;
    }
    default: ;
  }
  // optional uint32 perception_region_conf = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_perception_region_conf(), target);
  }

  // required bool shadowingapplies = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_shadowingapplies(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SensorInformationContainer)
  return target;
}

size_t SensorInformationContainer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SensorInformationContainer)
  size_t total_size = 0;

  if (_internal_has_sensorid()) {
    // required int64 sensorID = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sensorid());
  }

  if (_internal_has_shadowingapplies()) {
    // required bool shadowingapplies = 10;
    total_size += 1 + 1;
  }

  if (_internal_has_sensor_type()) {
    // required .SensorType sensor_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sensor_type());
  }

  return total_size;
}
size_t SensorInformationContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SensorInformationContainer)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 sensorID = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sensorid());

    // required bool shadowingapplies = 10;
    total_size += 1 + 1;

    // required .SensorType sensor_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sensor_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 perception_region_conf = 9;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_perception_region_conf());
  }

  switch (shape_case()) {
    // .RectangularShape rectangular = 3;
    case kRectangular: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shape_.rectangular_);
      break;
    }
    // .CircularShape circular = 4;
    case kCircular: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shape_.circular_);
      break;
    }
    // .PolygonalShape polygonal = 5;
    case kPolygonal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shape_.polygonal_);
      break;
    }
    // .EllipticalShape elliptical = 6;
    case kElliptical: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shape_.elliptical_);
      break;
    }
    // .RadialShape radial = 7;
    case kRadial: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shape_.radial_);
      break;
    }
    // .RadialShapes radialShapes = 8;
    case kRadialShapes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shape_.radialshapes_);
      break;
    }
    case SHAPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorInformationContainer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SensorInformationContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorInformationContainer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorInformationContainer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SensorInformationContainer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SensorInformationContainer)
    MergeFrom(*source);
  }
}

void SensorInformationContainer::MergeFrom(const SensorInformationContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SensorInformationContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      sensorid_ = from.sensorid_;
    }
    if (cached_has_bits & 0x00000002u) {
      shadowingapplies_ = from.shadowingapplies_;
    }
    if (cached_has_bits & 0x00000004u) {
      sensor_type_ = from.sensor_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      perception_region_conf_ = from.perception_region_conf_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.shape_case()) {
    case kRectangular: {
      _internal_mutable_rectangular()->::RectangularShape::MergeFrom(from._internal_rectangular());
      break;
    }
    case kCircular: {
      _internal_mutable_circular()->::CircularShape::MergeFrom(from._internal_circular());
      break;
    }
    case kPolygonal: {
      _internal_mutable_polygonal()->::PolygonalShape::MergeFrom(from._internal_polygonal());
      break;
    }
    case kElliptical: {
      _internal_mutable_elliptical()->::EllipticalShape::MergeFrom(from._internal_elliptical());
      break;
    }
    case kRadial: {
      _internal_mutable_radial()->::RadialShape::MergeFrom(from._internal_radial());
      break;
    }
    case kRadialShapes: {
      _internal_mutable_radialshapes()->::RadialShapes::MergeFrom(from._internal_radialshapes());
      break;
    }
    case SHAPE_NOT_SET: {
      break;
    }
  }
}

void SensorInformationContainer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SensorInformationContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorInformationContainer::CopyFrom(const SensorInformationContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SensorInformationContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorInformationContainer::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  switch (shape_case()) {
    case kRectangular: {
      if (has_rectangular()) {
        if (!this->rectangular().IsInitialized()) return false;
      }
      break;
    }
    case kCircular: {
      if (has_circular()) {
        if (!this->circular().IsInitialized()) return false;
      }
      break;
    }
    case kPolygonal: {
      if (has_polygonal()) {
        if (!this->polygonal().IsInitialized()) return false;
      }
      break;
    }
    case kElliptical: {
      if (has_elliptical()) {
        if (!this->elliptical().IsInitialized()) return false;
      }
      break;
    }
    case kRadial: {
      if (has_radial()) {
        if (!this->radial().IsInitialized()) return false;
      }
      break;
    }
    case kRadialShapes: {
      if (has_radialshapes()) {
        if (!this->radialshapes().IsInitialized()) return false;
      }
      break;
    }
    case SHAPE_NOT_SET: {
      break;
    }
  }
  return true;
}

void SensorInformationContainer::InternalSwap(SensorInformationContainer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorInformationContainer, perception_region_conf_)
      + sizeof(SensorInformationContainer::perception_region_conf_)
      - PROTOBUF_FIELD_OFFSET(SensorInformationContainer, sensorid_)>(
          reinterpret_cast<char*>(&sensorid_),
          reinterpret_cast<char*>(&other->sensorid_));
  swap(shape_, other->shape_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorInformationContainer::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CPMMessage* Arena::CreateMaybeMessage< ::CPMMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPMMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ManagmentContainer* Arena::CreateMaybeMessage< ::ManagmentContainer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ManagmentContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::CpmPayload* Arena::CreateMaybeMessage< ::CpmPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CpmPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::OriginatingStationsContainer* Arena::CreateMaybeMessage< ::OriginatingStationsContainer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OriginatingStationsContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::OriginatingVehicleContainer* Arena::CreateMaybeMessage< ::OriginatingVehicleContainer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OriginatingVehicleContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::OriginatingRSUContainer* Arena::CreateMaybeMessage< ::OriginatingRSUContainer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OriginatingRSUContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::SensorInformationContainer* Arena::CreateMaybeMessage< ::SensorInformationContainer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SensorInformationContainer >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
