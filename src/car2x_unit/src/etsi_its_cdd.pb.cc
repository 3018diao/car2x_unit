// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: etsi_its_cdd.proto

#include "etsi_its_cdd.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_etsi_5fits_5fcdd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Altitude_etsi_5fits_5fcdd_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_etsi_5fits_5fcdd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CartesianPosition3d_etsi_5fits_5fcdd_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_etsi_5fits_5fcdd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PositionConfidenceEllipse_etsi_5fits_5fcdd_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_etsi_5fits_5fcdd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RadialShapeDetails_etsi_5fits_5fcdd_2eproto;
class AltitudeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Altitude> _instance;
} _Altitude_default_instance_;
class CartesianAngleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CartesianAngle> _instance;
} _CartesianAngle_default_instance_;
class CartesianPosition3dDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CartesianPosition3d> _instance;
} _CartesianPosition3d_default_instance_;
class CircularShapeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CircularShape> _instance;
} _CircularShape_default_instance_;
class EllipticalShapeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EllipticalShape> _instance;
} _EllipticalShape_default_instance_;
class CurvatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Curvature> _instance;
} _Curvature_default_instance_;
class HeadingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Heading> _instance;
} _Heading_default_instance_;
class IntersectionReferenceIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntersectionReferenceID> _instance;
} _IntersectionReferenceID_default_instance_;
class LongitudinalAccelerationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LongitudinalAcceleration> _instance;
} _LongitudinalAcceleration_default_instance_;
class PolygonalShapeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PolygonalShape> _instance;
} _PolygonalShape_default_instance_;
class PositionConfidenceEllipseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionConfidenceEllipse> _instance;
} _PositionConfidenceEllipse_default_instance_;
class RadialShapeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RadialShape> _instance;
} _RadialShape_default_instance_;
class RadialShapesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RadialShapes> _instance;
} _RadialShapes_default_instance_;
class RadialShapeDetailsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RadialShapeDetails> _instance;
} _RadialShapeDetails_default_instance_;
class RectangularShapeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RectangularShape> _instance;
} _RectangularShape_default_instance_;
class ReferencePositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReferencePosition> _instance;
} _ReferencePosition_default_instance_;
class RoadSegmentReferenceIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoadSegmentReferenceID> _instance;
} _RoadSegmentReferenceID_default_instance_;
class SpeedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Speed> _instance;
} _Speed_default_instance_;
class VehicleLengthDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleLength> _instance;
} _VehicleLength_default_instance_;
class VehicleWidthDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleWidth> _instance;
} _VehicleWidth_default_instance_;
class Wgs84AngleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Wgs84Angle> _instance;
} _Wgs84Angle_default_instance_;
class YawRateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<YawRate> _instance;
} _YawRate_default_instance_;
static void InitDefaultsscc_info_Altitude_etsi_5fits_5fcdd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Altitude_default_instance_;
    new (ptr) ::Altitude();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Altitude::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Altitude_etsi_5fits_5fcdd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Altitude_etsi_5fits_5fcdd_2eproto}, {}};

static void InitDefaultsscc_info_CartesianAngle_etsi_5fits_5fcdd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CartesianAngle_default_instance_;
    new (ptr) ::CartesianAngle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CartesianAngle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CartesianAngle_etsi_5fits_5fcdd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CartesianAngle_etsi_5fits_5fcdd_2eproto}, {}};

static void InitDefaultsscc_info_CartesianPosition3d_etsi_5fits_5fcdd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CartesianPosition3d_default_instance_;
    new (ptr) ::CartesianPosition3d();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CartesianPosition3d::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CartesianPosition3d_etsi_5fits_5fcdd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CartesianPosition3d_etsi_5fits_5fcdd_2eproto}, {}};

static void InitDefaultsscc_info_CircularShape_etsi_5fits_5fcdd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CircularShape_default_instance_;
    new (ptr) ::CircularShape();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CircularShape::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CircularShape_etsi_5fits_5fcdd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CircularShape_etsi_5fits_5fcdd_2eproto}, {
      &scc_info_CartesianPosition3d_etsi_5fits_5fcdd_2eproto.base,}};

static void InitDefaultsscc_info_Curvature_etsi_5fits_5fcdd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Curvature_default_instance_;
    new (ptr) ::Curvature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Curvature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Curvature_etsi_5fits_5fcdd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Curvature_etsi_5fits_5fcdd_2eproto}, {}};

static void InitDefaultsscc_info_EllipticalShape_etsi_5fits_5fcdd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EllipticalShape_default_instance_;
    new (ptr) ::EllipticalShape();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EllipticalShape::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EllipticalShape_etsi_5fits_5fcdd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EllipticalShape_etsi_5fits_5fcdd_2eproto}, {
      &scc_info_CartesianPosition3d_etsi_5fits_5fcdd_2eproto.base,}};

static void InitDefaultsscc_info_Heading_etsi_5fits_5fcdd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Heading_default_instance_;
    new (ptr) ::Heading();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Heading::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Heading_etsi_5fits_5fcdd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Heading_etsi_5fits_5fcdd_2eproto}, {}};

static void InitDefaultsscc_info_IntersectionReferenceID_etsi_5fits_5fcdd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_IntersectionReferenceID_default_instance_;
    new (ptr) ::IntersectionReferenceID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IntersectionReferenceID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IntersectionReferenceID_etsi_5fits_5fcdd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IntersectionReferenceID_etsi_5fits_5fcdd_2eproto}, {}};

static void InitDefaultsscc_info_LongitudinalAcceleration_etsi_5fits_5fcdd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LongitudinalAcceleration_default_instance_;
    new (ptr) ::LongitudinalAcceleration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LongitudinalAcceleration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LongitudinalAcceleration_etsi_5fits_5fcdd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LongitudinalAcceleration_etsi_5fits_5fcdd_2eproto}, {}};

static void InitDefaultsscc_info_PolygonalShape_etsi_5fits_5fcdd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PolygonalShape_default_instance_;
    new (ptr) ::PolygonalShape();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PolygonalShape::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PolygonalShape_etsi_5fits_5fcdd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PolygonalShape_etsi_5fits_5fcdd_2eproto}, {
      &scc_info_CartesianPosition3d_etsi_5fits_5fcdd_2eproto.base,}};

static void InitDefaultsscc_info_PositionConfidenceEllipse_etsi_5fits_5fcdd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PositionConfidenceEllipse_default_instance_;
    new (ptr) ::PositionConfidenceEllipse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PositionConfidenceEllipse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PositionConfidenceEllipse_etsi_5fits_5fcdd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PositionConfidenceEllipse_etsi_5fits_5fcdd_2eproto}, {}};

static void InitDefaultsscc_info_RadialShape_etsi_5fits_5fcdd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RadialShape_default_instance_;
    new (ptr) ::RadialShape();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RadialShape::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RadialShape_etsi_5fits_5fcdd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RadialShape_etsi_5fits_5fcdd_2eproto}, {
      &scc_info_CartesianPosition3d_etsi_5fits_5fcdd_2eproto.base,}};

static void InitDefaultsscc_info_RadialShapeDetails_etsi_5fits_5fcdd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RadialShapeDetails_default_instance_;
    new (ptr) ::RadialShapeDetails();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RadialShapeDetails::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RadialShapeDetails_etsi_5fits_5fcdd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RadialShapeDetails_etsi_5fits_5fcdd_2eproto}, {}};

static void InitDefaultsscc_info_RadialShapes_etsi_5fits_5fcdd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RadialShapes_default_instance_;
    new (ptr) ::RadialShapes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RadialShapes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RadialShapes_etsi_5fits_5fcdd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RadialShapes_etsi_5fits_5fcdd_2eproto}, {
      &scc_info_RadialShapeDetails_etsi_5fits_5fcdd_2eproto.base,}};

static void InitDefaultsscc_info_RectangularShape_etsi_5fits_5fcdd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RectangularShape_default_instance_;
    new (ptr) ::RectangularShape();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RectangularShape::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RectangularShape_etsi_5fits_5fcdd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RectangularShape_etsi_5fits_5fcdd_2eproto}, {
      &scc_info_CartesianPosition3d_etsi_5fits_5fcdd_2eproto.base,}};

static void InitDefaultsscc_info_ReferencePosition_etsi_5fits_5fcdd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ReferencePosition_default_instance_;
    new (ptr) ::ReferencePosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ReferencePosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReferencePosition_etsi_5fits_5fcdd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ReferencePosition_etsi_5fits_5fcdd_2eproto}, {
      &scc_info_PositionConfidenceEllipse_etsi_5fits_5fcdd_2eproto.base,
      &scc_info_Altitude_etsi_5fits_5fcdd_2eproto.base,}};

static void InitDefaultsscc_info_RoadSegmentReferenceID_etsi_5fits_5fcdd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RoadSegmentReferenceID_default_instance_;
    new (ptr) ::RoadSegmentReferenceID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoadSegmentReferenceID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoadSegmentReferenceID_etsi_5fits_5fcdd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoadSegmentReferenceID_etsi_5fits_5fcdd_2eproto}, {}};

static void InitDefaultsscc_info_Speed_etsi_5fits_5fcdd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Speed_default_instance_;
    new (ptr) ::Speed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Speed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Speed_etsi_5fits_5fcdd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Speed_etsi_5fits_5fcdd_2eproto}, {}};

static void InitDefaultsscc_info_VehicleLength_etsi_5fits_5fcdd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_VehicleLength_default_instance_;
    new (ptr) ::VehicleLength();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VehicleLength::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleLength_etsi_5fits_5fcdd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VehicleLength_etsi_5fits_5fcdd_2eproto}, {}};

static void InitDefaultsscc_info_VehicleWidth_etsi_5fits_5fcdd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_VehicleWidth_default_instance_;
    new (ptr) ::VehicleWidth();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VehicleWidth::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleWidth_etsi_5fits_5fcdd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VehicleWidth_etsi_5fits_5fcdd_2eproto}, {}};

static void InitDefaultsscc_info_Wgs84Angle_etsi_5fits_5fcdd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Wgs84Angle_default_instance_;
    new (ptr) ::Wgs84Angle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Wgs84Angle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Wgs84Angle_etsi_5fits_5fcdd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Wgs84Angle_etsi_5fits_5fcdd_2eproto}, {}};

static void InitDefaultsscc_info_YawRate_etsi_5fits_5fcdd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_YawRate_default_instance_;
    new (ptr) ::YawRate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::YawRate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_YawRate_etsi_5fits_5fcdd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_YawRate_etsi_5fits_5fcdd_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_etsi_5fits_5fcdd_2eproto[22];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_etsi_5fits_5fcdd_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_etsi_5fits_5fcdd_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_etsi_5fits_5fcdd_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Altitude, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Altitude, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Altitude, value_),
  PROTOBUF_FIELD_OFFSET(::Altitude, confidence_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CartesianAngle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CartesianAngle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CartesianAngle, cartesian_value_),
  PROTOBUF_FIELD_OFFSET(::CartesianAngle, cartesian_angle_confidence_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CartesianPosition3d, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CartesianPosition3d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CartesianPosition3d, x_cord_),
  PROTOBUF_FIELD_OFFSET(::CartesianPosition3d, y_cord_),
  PROTOBUF_FIELD_OFFSET(::CartesianPosition3d, z_cord_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CircularShape, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CircularShape, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CircularShape, shaperefpoint_),
  PROTOBUF_FIELD_OFFSET(::CircularShape, radius_),
  PROTOBUF_FIELD_OFFSET(::CircularShape, height_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::EllipticalShape, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::EllipticalShape, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EllipticalShape, shapereferencepoint_),
  PROTOBUF_FIELD_OFFSET(::EllipticalShape, semimajoraxislength_),
  PROTOBUF_FIELD_OFFSET(::EllipticalShape, semiminoraxislength_),
  PROTOBUF_FIELD_OFFSET(::EllipticalShape, orientation_),
  PROTOBUF_FIELD_OFFSET(::EllipticalShape, height_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::Curvature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Curvature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Curvature, value_),
  PROTOBUF_FIELD_OFFSET(::Curvature, confidence_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Heading, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Heading, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Heading, value_),
  PROTOBUF_FIELD_OFFSET(::Heading, confidence_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::IntersectionReferenceID, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::IntersectionReferenceID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IntersectionReferenceID, region_),
  PROTOBUF_FIELD_OFFSET(::IntersectionReferenceID, id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::LongitudinalAcceleration, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::LongitudinalAcceleration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LongitudinalAcceleration, value_),
  PROTOBUF_FIELD_OFFSET(::LongitudinalAcceleration, confidence_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::PolygonalShape, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PolygonalShape, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PolygonalShape, shapereferencepoint_),
  PROTOBUF_FIELD_OFFSET(::PolygonalShape, polygon_),
  PROTOBUF_FIELD_OFFSET(::PolygonalShape, height_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::PositionConfidenceEllipse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PositionConfidenceEllipse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PositionConfidenceEllipse, semi_major_confidence_),
  PROTOBUF_FIELD_OFFSET(::PositionConfidenceEllipse, semi_minor_confidence_),
  PROTOBUF_FIELD_OFFSET(::PositionConfidenceEllipse, semi_major_orientation_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::RadialShape, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RadialShape, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RadialShape, sharedrefpoint_),
  PROTOBUF_FIELD_OFFSET(::RadialShape, range_),
  PROTOBUF_FIELD_OFFSET(::RadialShape, stationaryhorizontalopeninganglestart_),
  PROTOBUF_FIELD_OFFSET(::RadialShape, stationaryhorizontalopeningangleend_),
  PROTOBUF_FIELD_OFFSET(::RadialShape, verticalopeninganglestart_),
  PROTOBUF_FIELD_OFFSET(::RadialShape, verticalopeningangleend_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::RadialShapes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RadialShapes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RadialShapes, refpointid_),
  PROTOBUF_FIELD_OFFSET(::RadialShapes, x_cord_),
  PROTOBUF_FIELD_OFFSET(::RadialShapes, y_cord_),
  PROTOBUF_FIELD_OFFSET(::RadialShapes, z_cord_),
  PROTOBUF_FIELD_OFFSET(::RadialShapes, radialshapeslist_),
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::RadialShapeDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RadialShapeDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RadialShapeDetails, range_),
  PROTOBUF_FIELD_OFFSET(::RadialShapeDetails, horizontalopeninganglestart_),
  PROTOBUF_FIELD_OFFSET(::RadialShapeDetails, horizontalopeningangleend_),
  PROTOBUF_FIELD_OFFSET(::RadialShapeDetails, verticalopeninganglestart_),
  PROTOBUF_FIELD_OFFSET(::RadialShapeDetails, verticalopeningangleend_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::RectangularShape, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RectangularShape, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RectangularShape, center_point_),
  PROTOBUF_FIELD_OFFSET(::RectangularShape, semilength_),
  PROTOBUF_FIELD_OFFSET(::RectangularShape, semibreadth_),
  PROTOBUF_FIELD_OFFSET(::RectangularShape, orientation_),
  PROTOBUF_FIELD_OFFSET(::RectangularShape, height_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::ReferencePosition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ReferencePosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ReferencePosition, latitude_),
  PROTOBUF_FIELD_OFFSET(::ReferencePosition, longitude_),
  PROTOBUF_FIELD_OFFSET(::ReferencePosition, position_confidence_),
  PROTOBUF_FIELD_OFFSET(::ReferencePosition, altitude_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::RoadSegmentReferenceID, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RoadSegmentReferenceID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoadSegmentReferenceID, region_),
  PROTOBUF_FIELD_OFFSET(::RoadSegmentReferenceID, id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Speed, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Speed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Speed, value_),
  PROTOBUF_FIELD_OFFSET(::Speed, confidence_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::VehicleLength, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::VehicleLength, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VehicleLength, value_),
  PROTOBUF_FIELD_OFFSET(::VehicleLength, veh_len_conf_ind_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::VehicleWidth, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::VehicleWidth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VehicleWidth, value_),
  0,
  PROTOBUF_FIELD_OFFSET(::Wgs84Angle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Wgs84Angle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Wgs84Angle, wgsanglevalue_),
  PROTOBUF_FIELD_OFFSET(::Wgs84Angle, wgs84angleconfidence_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::YawRate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::YawRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::YawRate, yawratevalue_),
  PROTOBUF_FIELD_OFFSET(::YawRate, yawrateconfidence_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::Altitude)},
  { 9, 16, sizeof(::CartesianAngle)},
  { 18, 26, sizeof(::CartesianPosition3d)},
  { 29, 37, sizeof(::CircularShape)},
  { 40, 50, sizeof(::EllipticalShape)},
  { 55, 62, sizeof(::Curvature)},
  { 64, 71, sizeof(::Heading)},
  { 73, 80, sizeof(::IntersectionReferenceID)},
  { 82, 89, sizeof(::LongitudinalAcceleration)},
  { 91, 99, sizeof(::PolygonalShape)},
  { 102, 110, sizeof(::PositionConfidenceEllipse)},
  { 113, 124, sizeof(::RadialShape)},
  { 130, 140, sizeof(::RadialShapes)},
  { 145, 155, sizeof(::RadialShapeDetails)},
  { 160, 170, sizeof(::RectangularShape)},
  { 175, 184, sizeof(::ReferencePosition)},
  { 188, 195, sizeof(::RoadSegmentReferenceID)},
  { 197, 204, sizeof(::Speed)},
  { 206, 213, sizeof(::VehicleLength)},
  { 215, 221, sizeof(::VehicleWidth)},
  { 222, 229, sizeof(::Wgs84Angle)},
  { 231, 238, sizeof(::YawRate)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Altitude_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CartesianAngle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CartesianPosition3d_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CircularShape_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EllipticalShape_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Curvature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Heading_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_IntersectionReferenceID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LongitudinalAcceleration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PolygonalShape_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PositionConfidenceEllipse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RadialShape_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RadialShapes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RadialShapeDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RectangularShape_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ReferencePosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RoadSegmentReferenceID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Speed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_VehicleLength_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_VehicleWidth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Wgs84Angle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_YawRate_default_instance_),
};

const char descriptor_table_protodef_etsi_5fits_5fcdd_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022etsi_its_cdd.proto\"-\n\010Altitude\022\r\n\005valu"
  "e\030\001 \002(\005\022\022\n\nconfidence\030\002 \002(\r\"M\n\016Cartesian"
  "Angle\022\027\n\017cartesian_value\030\001 \002(\003\022\"\n\032cartes"
  "ian_angle_confidence\030\002 \002(\003\"E\n\023CartesianP"
  "osition3d\022\016\n\006x_cord\030\001 \002(\005\022\016\n\006y_cord\030\002 \002("
  "\005\022\016\n\006z_cord\030\003 \002(\005\"\\\n\rCircularShape\022+\n\rsh"
  "apeRefPoint\030\001 \001(\0132\024.CartesianPosition3d\022"
  "\016\n\006radius\030\002 \002(\005\022\016\n\006height\030\003 \001(\r\"\243\001\n\017Elli"
  "pticalShape\0221\n\023shapeReferencePoint\030\001 \001(\013"
  "2\024.CartesianPosition3d\022\033\n\023semiMajorAxisL"
  "ength\030\002 \002(\r\022\033\n\023semiMinorAxisLength\030\003 \002(\r"
  "\022\023\n\013orientation\030\004 \001(\r\022\016\n\006height\030\005 \001(\r\".\n"
  "\tCurvature\022\r\n\005value\030\001 \002(\005\022\022\n\nconfidence\030"
  "\002 \001(\005\",\n\007Heading\022\r\n\005value\030\001 \002(\005\022\022\n\nconfi"
  "dence\030\002 \002(\r\"5\n\027IntersectionReferenceID\022\016"
  "\n\006region\030\001 \001(\003\022\n\n\002id\030\002 \001(\003\"=\n\030Longitudin"
  "alAcceleration\022\r\n\005value\030\001 \002(\005\022\022\n\nconfide"
  "nce\030\002 \001(\005\"z\n\016PolygonalShape\0221\n\023shapeRefe"
  "rencePoint\030\001 \001(\0132\024.CartesianPosition3d\022%"
  "\n\007polygon\030\002 \003(\0132\024.CartesianPosition3d\022\016\n"
  "\006height\030\003 \001(\r\"y\n\031PositionConfidenceEllip"
  "se\022\035\n\025semi_major_confidence\030\001 \002(\r\022\035\n\025sem"
  "i_minor_confidence\030\002 \002(\r\022\036\n\026semi_major_o"
  "rientation\030\003 \002(\r\"\352\001\n\013RadialShape\022,\n\016shar"
  "edRefPoint\030\001 \001(\0132\024.CartesianPosition3d\022\r"
  "\n\005range\030\002 \002(\r\022-\n%stationaryHorizontalOpe"
  "ningAngleStart\030\003 \002(\r\022+\n#stationaryHorizo"
  "ntalOpeningAngleEnd\030\004 \002(\r\022!\n\031verticalOpe"
  "ningAngleStart\030\005 \001(\r\022\037\n\027verticalOpeningA"
  "ngleEnd\030\006 \001(\r\"\201\001\n\014RadialShapes\022\022\n\nrefPoi"
  "ntID\030\001 \002(\r\022\016\n\006x_cord\030\002 \002(\005\022\016\n\006y_cord\030\003 \002"
  "(\005\022\016\n\006z_cord\030\004 \001(\005\022-\n\020radialShapesList\030\006"
  " \003(\0132\023.RadialShapeDetails\"\257\001\n\022RadialShap"
  "eDetails\022\r\n\005range\030\001 \002(\005\022#\n\033horizontalOpe"
  "ningAngleStart\030\002 \002(\r\022!\n\031horizontalOpenin"
  "gAngleEnd\030\003 \002(\r\022!\n\031verticalOpeningAngleS"
  "tart\030\004 \001(\r\022\037\n\027verticalOpeningAngleEnd\030\005 "
  "\001(\r\"\214\001\n\020RectangularShape\022*\n\014center_point"
  "\030\001 \001(\0132\024.CartesianPosition3d\022\022\n\nsemiLeng"
  "th\030\002 \002(\r\022\023\n\013semiBreadth\030\003 \002(\r\022\023\n\013orienta"
  "tion\030\004 \001(\r\022\016\n\006height\030\005 \001(\r\"\216\001\n\021Reference"
  "Position\022\020\n\010latitude\030\001 \002(\003\022\021\n\tlongitude\030"
  "\002 \002(\003\0227\n\023position_confidence\030\003 \002(\0132\032.Pos"
  "itionConfidenceEllipse\022\033\n\010altitude\030\004 \002(\013"
  "2\t.Altitude\"4\n\026RoadSegmentReferenceID\022\016\n"
  "\006region\030\001 \001(\003\022\n\n\002id\030\002 \002(\003\"*\n\005Speed\022\r\n\005va"
  "lue\030\001 \002(\005\022\022\n\nconfidence\030\002 \002(\r\"\\\n\rVehicle"
  "Length\022\r\n\005value\030\001 \002(\005\022<\n\020veh_len_conf_in"
  "d\030\002 \001(\0162\".VehicleLengthConfidenceIndicat"
  "ion\"\035\n\014VehicleWidth\022\r\n\005value\030\001 \002(\005\"A\n\nWg"
  "s84Angle\022\025\n\rwgsAngleValue\030\001 \002(\r\022\034\n\024wgs84"
  "AngleConfidence\030\002 \002(\r\"N\n\007YawRate\022\024\n\014yawr"
  "atevalue\030\001 \002(\005\022-\n\021yawrateconfidence\030\002 \002("
  "\0162\022.YawRateConfidence*\\\n\030CurvatureCalcul"
  "ationMode\022\023\n\017CCM_YAWRATEUSED\020\000\022\026\n\022CCM_YA"
  "WRATENOTUSED\020\001\022\023\n\017CCM_UNAVAILABLE\020\002*E\n\016D"
  "riveDirection\022\016\n\nDD_FORWARD\020\000\022\017\n\013DD_BACK"
  "WARD\020\001\022\022\n\016DD_UNAVAILABLE\020\002*\252\002\n\nSensorTyp"
  "e\022\022\n\016SNSR_UNDEFINED\020\000\022\016\n\nSNSR_RADAR\020\001\022\016\n"
  "\nSNSR_LIDAR\020\002\022\022\n\016SNSR_MONOVIDEO\020\003\022\024\n\020SNS"
  "R_STEROVISION\020\004\022\024\n\020SNSR_NIGHTVISION\020\005\022\023\n"
  "\017SNSR_ULTRASONIC\020\006\022\014\n\010SNSR_PMD\020\007\022\026\n\022SNSR"
  "_INDUCTIONLOOP\020\010\022\030\n\024SNSR_SPHERICALCAMERA"
  "\020\t\022\014\n\010SNSR_UWB\020\n\022\021\n\rSNSR_ACOUSTIC\020\013\022\031\n\025S"
  "NSR_LOCALAGGREGATION\020\014\022\027\n\023SNSR_ITSAGGREG"
  "ATION\020\r*\320\001\n\013StationType\022\013\n\007UNKNOWN\020\000\022\016\n\n"
  "PEDESTRIAN\020\001\022\013\n\007CYCLIST\020\002\022\t\n\005MOPED\020\003\022\016\n\n"
  "MOTORCYCLE\020\004\022\021\n\rPASSENGER_CAR\020\005\022\007\n\003BUS\020\006"
  "\022\017\n\013LIGHT_TRUCK\020\007\022\017\n\013HEAVY_TRUCK\020\010\022\013\n\007TR"
  "AILER\020\t\022\023\n\017SPECIAL_VEHICLE\020\n\022\010\n\004TRAM\020\013\022\022"
  "\n\016ROAD_SIDE_UNIT\020\017*\326\001\n!VehicleLengthConf"
  "idenceIndication\022\033\n\027VLCI_NO_TRAILER_PRES"
  "ENT\020\000\022*\n&VLCI_TRAILER_PRESENT_WITH_KNOWN"
  "_LENGTH\020\001\022,\n(VLCI_TRAILER_PRESENT_WITH_U"
  "NKNOWN_LENGTH\020\002\022$\n VLCI_TRAILER_PRESENCE"
  "_IS_UNKNOWN\020\003\022\024\n\020VLCI_UNAVAILABLE\020\004*\335\001\n\021"
  "YawRateConfidence\022\025\n\021YRC_degSec_000_01\020\000"
  "\022\025\n\021YRC_degSec_000_05\020\001\022\025\n\021YRC_degSec_00"
  "0_10\020\002\022\025\n\021YRC_degSec_001_00\020\003\022\025\n\021YRC_deg"
  "Sec_005_00\020\004\022\025\n\021YRC_degSec_010_00\020\005\022\025\n\021Y"
  "RC_degSec_100_00\020\006\022\022\n\016YRC_OutOfRange\020\007\022\023"
  "\n\017YRC_UNAVAILABLE\020\010"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_etsi_5fits_5fcdd_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_etsi_5fits_5fcdd_2eproto_sccs[22] = {
  &scc_info_Altitude_etsi_5fits_5fcdd_2eproto.base,
  &scc_info_CartesianAngle_etsi_5fits_5fcdd_2eproto.base,
  &scc_info_CartesianPosition3d_etsi_5fits_5fcdd_2eproto.base,
  &scc_info_CircularShape_etsi_5fits_5fcdd_2eproto.base,
  &scc_info_Curvature_etsi_5fits_5fcdd_2eproto.base,
  &scc_info_EllipticalShape_etsi_5fits_5fcdd_2eproto.base,
  &scc_info_Heading_etsi_5fits_5fcdd_2eproto.base,
  &scc_info_IntersectionReferenceID_etsi_5fits_5fcdd_2eproto.base,
  &scc_info_LongitudinalAcceleration_etsi_5fits_5fcdd_2eproto.base,
  &scc_info_PolygonalShape_etsi_5fits_5fcdd_2eproto.base,
  &scc_info_PositionConfidenceEllipse_etsi_5fits_5fcdd_2eproto.base,
  &scc_info_RadialShape_etsi_5fits_5fcdd_2eproto.base,
  &scc_info_RadialShapeDetails_etsi_5fits_5fcdd_2eproto.base,
  &scc_info_RadialShapes_etsi_5fits_5fcdd_2eproto.base,
  &scc_info_RectangularShape_etsi_5fits_5fcdd_2eproto.base,
  &scc_info_ReferencePosition_etsi_5fits_5fcdd_2eproto.base,
  &scc_info_RoadSegmentReferenceID_etsi_5fits_5fcdd_2eproto.base,
  &scc_info_Speed_etsi_5fits_5fcdd_2eproto.base,
  &scc_info_VehicleLength_etsi_5fits_5fcdd_2eproto.base,
  &scc_info_VehicleWidth_etsi_5fits_5fcdd_2eproto.base,
  &scc_info_Wgs84Angle_etsi_5fits_5fcdd_2eproto.base,
  &scc_info_YawRate_etsi_5fits_5fcdd_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_etsi_5fits_5fcdd_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_etsi_5fits_5fcdd_2eproto = {
  false, false, descriptor_table_protodef_etsi_5fits_5fcdd_2eproto, "etsi_its_cdd.proto", 3259,
  &descriptor_table_etsi_5fits_5fcdd_2eproto_once, descriptor_table_etsi_5fits_5fcdd_2eproto_sccs, descriptor_table_etsi_5fits_5fcdd_2eproto_deps, 22, 0,
  schemas, file_default_instances, TableStruct_etsi_5fits_5fcdd_2eproto::offsets,
  file_level_metadata_etsi_5fits_5fcdd_2eproto, 22, file_level_enum_descriptors_etsi_5fits_5fcdd_2eproto, file_level_service_descriptors_etsi_5fits_5fcdd_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_etsi_5fits_5fcdd_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_etsi_5fits_5fcdd_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CurvatureCalculationMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_etsi_5fits_5fcdd_2eproto);
  return file_level_enum_descriptors_etsi_5fits_5fcdd_2eproto[0];
}
bool CurvatureCalculationMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DriveDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_etsi_5fits_5fcdd_2eproto);
  return file_level_enum_descriptors_etsi_5fits_5fcdd_2eproto[1];
}
bool DriveDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_etsi_5fits_5fcdd_2eproto);
  return file_level_enum_descriptors_etsi_5fits_5fcdd_2eproto[2];
}
bool SensorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_etsi_5fits_5fcdd_2eproto);
  return file_level_enum_descriptors_etsi_5fits_5fcdd_2eproto[3];
}
bool StationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehicleLengthConfidenceIndication_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_etsi_5fits_5fcdd_2eproto);
  return file_level_enum_descriptors_etsi_5fits_5fcdd_2eproto[4];
}
bool VehicleLengthConfidenceIndication_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* YawRateConfidence_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_etsi_5fits_5fcdd_2eproto);
  return file_level_enum_descriptors_etsi_5fits_5fcdd_2eproto[5];
}
bool YawRateConfidence_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Altitude::InitAsDefaultInstance() {
}
class Altitude::_Internal {
 public:
  using HasBits = decltype(std::declval<Altitude>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Altitude::Altitude(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Altitude)
}
Altitude::Altitude(const Altitude& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&value_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:Altitude)
}

void Altitude::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&value_)) + sizeof(confidence_));
}

Altitude::~Altitude() {
  // @@protoc_insertion_point(destructor:Altitude)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Altitude::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Altitude::ArenaDtor(void* object) {
  Altitude* _this = reinterpret_cast< Altitude* >(object);
  (void)_this;
}
void Altitude::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Altitude::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Altitude& Altitude::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Altitude_etsi_5fits_5fcdd_2eproto.base);
  return *internal_default_instance();
}


void Altitude::Clear() {
// @@protoc_insertion_point(message_clear_start:Altitude)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&confidence_) -
        reinterpret_cast<char*>(&value_)) + sizeof(confidence_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Altitude::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 confidence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_confidence(&has_bits);
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Altitude::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Altitude)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_value(), target);
  }

  // required uint32 confidence = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_confidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Altitude)
  return target;
}

size_t Altitude::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Altitude)
  size_t total_size = 0;

  if (_internal_has_value()) {
    // required int32 value = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());
  }

  if (_internal_has_confidence()) {
    // required uint32 confidence = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_confidence());
  }

  return total_size;
}
size_t Altitude::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Altitude)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 value = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());

    // required uint32 confidence = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_confidence());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Altitude::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Altitude)
  GOOGLE_DCHECK_NE(&from, this);
  const Altitude* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Altitude>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Altitude)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Altitude)
    MergeFrom(*source);
  }
}

void Altitude::MergeFrom(const Altitude& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Altitude)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000002u) {
      confidence_ = from.confidence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Altitude::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Altitude)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Altitude::CopyFrom(const Altitude& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Altitude)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Altitude::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Altitude::InternalSwap(Altitude* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Altitude, confidence_)
      + sizeof(Altitude::confidence_)
      - PROTOBUF_FIELD_OFFSET(Altitude, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Altitude::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CartesianAngle::InitAsDefaultInstance() {
}
class CartesianAngle::_Internal {
 public:
  using HasBits = decltype(std::declval<CartesianAngle>()._has_bits_);
  static void set_has_cartesian_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cartesian_angle_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CartesianAngle::CartesianAngle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CartesianAngle)
}
CartesianAngle::CartesianAngle(const CartesianAngle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cartesian_value_, &from.cartesian_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&cartesian_angle_confidence_) -
    reinterpret_cast<char*>(&cartesian_value_)) + sizeof(cartesian_angle_confidence_));
  // @@protoc_insertion_point(copy_constructor:CartesianAngle)
}

void CartesianAngle::SharedCtor() {
  ::memset(&cartesian_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cartesian_angle_confidence_) -
      reinterpret_cast<char*>(&cartesian_value_)) + sizeof(cartesian_angle_confidence_));
}

CartesianAngle::~CartesianAngle() {
  // @@protoc_insertion_point(destructor:CartesianAngle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CartesianAngle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CartesianAngle::ArenaDtor(void* object) {
  CartesianAngle* _this = reinterpret_cast< CartesianAngle* >(object);
  (void)_this;
}
void CartesianAngle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CartesianAngle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CartesianAngle& CartesianAngle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CartesianAngle_etsi_5fits_5fcdd_2eproto.base);
  return *internal_default_instance();
}


void CartesianAngle::Clear() {
// @@protoc_insertion_point(message_clear_start:CartesianAngle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&cartesian_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cartesian_angle_confidence_) -
        reinterpret_cast<char*>(&cartesian_value_)) + sizeof(cartesian_angle_confidence_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CartesianAngle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 cartesian_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cartesian_value(&has_bits);
          cartesian_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 cartesian_angle_confidence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cartesian_angle_confidence(&has_bits);
          cartesian_angle_confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CartesianAngle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CartesianAngle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 cartesian_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_cartesian_value(), target);
  }

  // required int64 cartesian_angle_confidence = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_cartesian_angle_confidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CartesianAngle)
  return target;
}

size_t CartesianAngle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CartesianAngle)
  size_t total_size = 0;

  if (_internal_has_cartesian_value()) {
    // required int64 cartesian_value = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cartesian_value());
  }

  if (_internal_has_cartesian_angle_confidence()) {
    // required int64 cartesian_angle_confidence = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cartesian_angle_confidence());
  }

  return total_size;
}
size_t CartesianAngle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CartesianAngle)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 cartesian_value = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cartesian_value());

    // required int64 cartesian_angle_confidence = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cartesian_angle_confidence());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CartesianAngle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CartesianAngle)
  GOOGLE_DCHECK_NE(&from, this);
  const CartesianAngle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CartesianAngle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CartesianAngle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CartesianAngle)
    MergeFrom(*source);
  }
}

void CartesianAngle::MergeFrom(const CartesianAngle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CartesianAngle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      cartesian_value_ = from.cartesian_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      cartesian_angle_confidence_ = from.cartesian_angle_confidence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CartesianAngle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CartesianAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CartesianAngle::CopyFrom(const CartesianAngle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CartesianAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CartesianAngle::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CartesianAngle::InternalSwap(CartesianAngle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CartesianAngle, cartesian_angle_confidence_)
      + sizeof(CartesianAngle::cartesian_angle_confidence_)
      - PROTOBUF_FIELD_OFFSET(CartesianAngle, cartesian_value_)>(
          reinterpret_cast<char*>(&cartesian_value_),
          reinterpret_cast<char*>(&other->cartesian_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CartesianAngle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CartesianPosition3d::InitAsDefaultInstance() {
}
class CartesianPosition3d::_Internal {
 public:
  using HasBits = decltype(std::declval<CartesianPosition3d>()._has_bits_);
  static void set_has_x_cord(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y_cord(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z_cord(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

CartesianPosition3d::CartesianPosition3d(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CartesianPosition3d)
}
CartesianPosition3d::CartesianPosition3d(const CartesianPosition3d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_cord_, &from.x_cord_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_cord_) -
    reinterpret_cast<char*>(&x_cord_)) + sizeof(z_cord_));
  // @@protoc_insertion_point(copy_constructor:CartesianPosition3d)
}

void CartesianPosition3d::SharedCtor() {
  ::memset(&x_cord_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_cord_) -
      reinterpret_cast<char*>(&x_cord_)) + sizeof(z_cord_));
}

CartesianPosition3d::~CartesianPosition3d() {
  // @@protoc_insertion_point(destructor:CartesianPosition3d)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CartesianPosition3d::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CartesianPosition3d::ArenaDtor(void* object) {
  CartesianPosition3d* _this = reinterpret_cast< CartesianPosition3d* >(object);
  (void)_this;
}
void CartesianPosition3d::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CartesianPosition3d::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CartesianPosition3d& CartesianPosition3d::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CartesianPosition3d_etsi_5fits_5fcdd_2eproto.base);
  return *internal_default_instance();
}


void CartesianPosition3d::Clear() {
// @@protoc_insertion_point(message_clear_start:CartesianPosition3d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_cord_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_cord_) -
        reinterpret_cast<char*>(&x_cord_)) + sizeof(z_cord_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CartesianPosition3d::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 x_cord = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_x_cord(&has_bits);
          x_cord_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 y_cord = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_y_cord(&has_bits);
          y_cord_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 z_cord = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_z_cord(&has_bits);
          z_cord_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CartesianPosition3d::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CartesianPosition3d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 x_cord = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x_cord(), target);
  }

  // required int32 y_cord = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y_cord(), target);
  }

  // required int32 z_cord = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_z_cord(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CartesianPosition3d)
  return target;
}

size_t CartesianPosition3d::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CartesianPosition3d)
  size_t total_size = 0;

  if (_internal_has_x_cord()) {
    // required int32 x_cord = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x_cord());
  }

  if (_internal_has_y_cord()) {
    // required int32 y_cord = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y_cord());
  }

  if (_internal_has_z_cord()) {
    // required int32 z_cord = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_z_cord());
  }

  return total_size;
}
size_t CartesianPosition3d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CartesianPosition3d)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 x_cord = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x_cord());

    // required int32 y_cord = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y_cord());

    // required int32 z_cord = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_z_cord());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CartesianPosition3d::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CartesianPosition3d)
  GOOGLE_DCHECK_NE(&from, this);
  const CartesianPosition3d* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CartesianPosition3d>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CartesianPosition3d)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CartesianPosition3d)
    MergeFrom(*source);
  }
}

void CartesianPosition3d::MergeFrom(const CartesianPosition3d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CartesianPosition3d)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_cord_ = from.x_cord_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_cord_ = from.y_cord_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_cord_ = from.z_cord_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CartesianPosition3d::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CartesianPosition3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CartesianPosition3d::CopyFrom(const CartesianPosition3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CartesianPosition3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CartesianPosition3d::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CartesianPosition3d::InternalSwap(CartesianPosition3d* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CartesianPosition3d, z_cord_)
      + sizeof(CartesianPosition3d::z_cord_)
      - PROTOBUF_FIELD_OFFSET(CartesianPosition3d, x_cord_)>(
          reinterpret_cast<char*>(&x_cord_),
          reinterpret_cast<char*>(&other->x_cord_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CartesianPosition3d::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CircularShape::InitAsDefaultInstance() {
  ::_CircularShape_default_instance_._instance.get_mutable()->shaperefpoint_ = const_cast< ::CartesianPosition3d*>(
      ::CartesianPosition3d::internal_default_instance());
}
class CircularShape::_Internal {
 public:
  using HasBits = decltype(std::declval<CircularShape>()._has_bits_);
  static const ::CartesianPosition3d& shaperefpoint(const CircularShape* msg);
  static void set_has_shaperefpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::CartesianPosition3d&
CircularShape::_Internal::shaperefpoint(const CircularShape* msg) {
  return *msg->shaperefpoint_;
}
CircularShape::CircularShape(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CircularShape)
}
CircularShape::CircularShape(const CircularShape& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shaperefpoint()) {
    shaperefpoint_ = new ::CartesianPosition3d(*from.shaperefpoint_);
  } else {
    shaperefpoint_ = nullptr;
  }
  ::memcpy(&radius_, &from.radius_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&radius_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:CircularShape)
}

void CircularShape::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CircularShape_etsi_5fits_5fcdd_2eproto.base);
  ::memset(&shaperefpoint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&shaperefpoint_)) + sizeof(height_));
}

CircularShape::~CircularShape() {
  // @@protoc_insertion_point(destructor:CircularShape)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CircularShape::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete shaperefpoint_;
}

void CircularShape::ArenaDtor(void* object) {
  CircularShape* _this = reinterpret_cast< CircularShape* >(object);
  (void)_this;
}
void CircularShape::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CircularShape::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CircularShape& CircularShape::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CircularShape_etsi_5fits_5fcdd_2eproto.base);
  return *internal_default_instance();
}


void CircularShape::Clear() {
// @@protoc_insertion_point(message_clear_start:CircularShape)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(shaperefpoint_ != nullptr);
    shaperefpoint_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&radius_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&radius_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CircularShape::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CartesianPosition3d shapeRefPoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_shaperefpoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 radius = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_radius(&has_bits);
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CircularShape::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CircularShape)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CartesianPosition3d shapeRefPoint = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::shaperefpoint(this), target, stream);
  }

  // required int32 radius = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_radius(), target);
  }

  // optional uint32 height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CircularShape)
  return target;
}

size_t CircularShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CircularShape)
  size_t total_size = 0;

  // required int32 radius = 2;
  if (_internal_has_radius()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_radius());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CartesianPosition3d shapeRefPoint = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shaperefpoint_);
  }

  // optional uint32 height = 3;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CircularShape::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CircularShape)
  GOOGLE_DCHECK_NE(&from, this);
  const CircularShape* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CircularShape>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CircularShape)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CircularShape)
    MergeFrom(*source);
  }
}

void CircularShape::MergeFrom(const CircularShape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CircularShape)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_shaperefpoint()->::CartesianPosition3d::MergeFrom(from._internal_shaperefpoint());
    }
    if (cached_has_bits & 0x00000002u) {
      radius_ = from.radius_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CircularShape::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CircularShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CircularShape::CopyFrom(const CircularShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CircularShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CircularShape::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_shaperefpoint()) {
    if (!shaperefpoint_->IsInitialized()) return false;
  }
  return true;
}

void CircularShape::InternalSwap(CircularShape* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CircularShape, height_)
      + sizeof(CircularShape::height_)
      - PROTOBUF_FIELD_OFFSET(CircularShape, shaperefpoint_)>(
          reinterpret_cast<char*>(&shaperefpoint_),
          reinterpret_cast<char*>(&other->shaperefpoint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CircularShape::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EllipticalShape::InitAsDefaultInstance() {
  ::_EllipticalShape_default_instance_._instance.get_mutable()->shapereferencepoint_ = const_cast< ::CartesianPosition3d*>(
      ::CartesianPosition3d::internal_default_instance());
}
class EllipticalShape::_Internal {
 public:
  using HasBits = decltype(std::declval<EllipticalShape>()._has_bits_);
  static const ::CartesianPosition3d& shapereferencepoint(const EllipticalShape* msg);
  static void set_has_shapereferencepoint(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_semimajoraxislength(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_semiminoraxislength(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::CartesianPosition3d&
EllipticalShape::_Internal::shapereferencepoint(const EllipticalShape* msg) {
  return *msg->shapereferencepoint_;
}
EllipticalShape::EllipticalShape(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:EllipticalShape)
}
EllipticalShape::EllipticalShape(const EllipticalShape& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shapereferencepoint()) {
    shapereferencepoint_ = new ::CartesianPosition3d(*from.shapereferencepoint_);
  } else {
    shapereferencepoint_ = nullptr;
  }
  ::memcpy(&semimajoraxislength_, &from.semimajoraxislength_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&semimajoraxislength_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:EllipticalShape)
}

void EllipticalShape::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EllipticalShape_etsi_5fits_5fcdd_2eproto.base);
  ::memset(&shapereferencepoint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&shapereferencepoint_)) + sizeof(height_));
}

EllipticalShape::~EllipticalShape() {
  // @@protoc_insertion_point(destructor:EllipticalShape)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EllipticalShape::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete shapereferencepoint_;
}

void EllipticalShape::ArenaDtor(void* object) {
  EllipticalShape* _this = reinterpret_cast< EllipticalShape* >(object);
  (void)_this;
}
void EllipticalShape::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EllipticalShape::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EllipticalShape& EllipticalShape::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EllipticalShape_etsi_5fits_5fcdd_2eproto.base);
  return *internal_default_instance();
}


void EllipticalShape::Clear() {
// @@protoc_insertion_point(message_clear_start:EllipticalShape)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(shapereferencepoint_ != nullptr);
    shapereferencepoint_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&semimajoraxislength_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&semimajoraxislength_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EllipticalShape::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CartesianPosition3d shapeReferencePoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_shapereferencepoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 semiMajorAxisLength = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_semimajoraxislength(&has_bits);
          semimajoraxislength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 semiMinorAxisLength = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_semiminoraxislength(&has_bits);
          semiminoraxislength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 orientation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_orientation(&has_bits);
          orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EllipticalShape::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EllipticalShape)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CartesianPosition3d shapeReferencePoint = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::shapereferencepoint(this), target, stream);
  }

  // required uint32 semiMajorAxisLength = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_semimajoraxislength(), target);
  }

  // required uint32 semiMinorAxisLength = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_semiminoraxislength(), target);
  }

  // optional uint32 orientation = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_orientation(), target);
  }

  // optional uint32 height = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EllipticalShape)
  return target;
}

size_t EllipticalShape::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EllipticalShape)
  size_t total_size = 0;

  if (_internal_has_semimajoraxislength()) {
    // required uint32 semiMajorAxisLength = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_semimajoraxislength());
  }

  if (_internal_has_semiminoraxislength()) {
    // required uint32 semiMinorAxisLength = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_semiminoraxislength());
  }

  return total_size;
}
size_t EllipticalShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EllipticalShape)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 semiMajorAxisLength = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_semimajoraxislength());

    // required uint32 semiMinorAxisLength = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_semiminoraxislength());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CartesianPosition3d shapeReferencePoint = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shapereferencepoint_);
  }

  if (cached_has_bits & 0x00000018u) {
    // optional uint32 orientation = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_orientation());
    }

    // optional uint32 height = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_height());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EllipticalShape::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EllipticalShape)
  GOOGLE_DCHECK_NE(&from, this);
  const EllipticalShape* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EllipticalShape>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EllipticalShape)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EllipticalShape)
    MergeFrom(*source);
  }
}

void EllipticalShape::MergeFrom(const EllipticalShape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EllipticalShape)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_shapereferencepoint()->::CartesianPosition3d::MergeFrom(from._internal_shapereferencepoint());
    }
    if (cached_has_bits & 0x00000002u) {
      semimajoraxislength_ = from.semimajoraxislength_;
    }
    if (cached_has_bits & 0x00000004u) {
      semiminoraxislength_ = from.semiminoraxislength_;
    }
    if (cached_has_bits & 0x00000008u) {
      orientation_ = from.orientation_;
    }
    if (cached_has_bits & 0x00000010u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EllipticalShape::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EllipticalShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EllipticalShape::CopyFrom(const EllipticalShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EllipticalShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EllipticalShape::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_shapereferencepoint()) {
    if (!shapereferencepoint_->IsInitialized()) return false;
  }
  return true;
}

void EllipticalShape::InternalSwap(EllipticalShape* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EllipticalShape, height_)
      + sizeof(EllipticalShape::height_)
      - PROTOBUF_FIELD_OFFSET(EllipticalShape, shapereferencepoint_)>(
          reinterpret_cast<char*>(&shapereferencepoint_),
          reinterpret_cast<char*>(&other->shapereferencepoint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EllipticalShape::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Curvature::InitAsDefaultInstance() {
}
class Curvature::_Internal {
 public:
  using HasBits = decltype(std::declval<Curvature>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

Curvature::Curvature(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Curvature)
}
Curvature::Curvature(const Curvature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&value_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:Curvature)
}

void Curvature::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&value_)) + sizeof(confidence_));
}

Curvature::~Curvature() {
  // @@protoc_insertion_point(destructor:Curvature)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Curvature::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Curvature::ArenaDtor(void* object) {
  Curvature* _this = reinterpret_cast< Curvature* >(object);
  (void)_this;
}
void Curvature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Curvature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Curvature& Curvature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Curvature_etsi_5fits_5fcdd_2eproto.base);
  return *internal_default_instance();
}


void Curvature::Clear() {
// @@protoc_insertion_point(message_clear_start:Curvature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&confidence_) -
        reinterpret_cast<char*>(&value_)) + sizeof(confidence_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Curvature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 confidence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_confidence(&has_bits);
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Curvature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Curvature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_value(), target);
  }

  // optional int32 confidence = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_confidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Curvature)
  return target;
}

size_t Curvature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Curvature)
  size_t total_size = 0;

  // required int32 value = 1;
  if (_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 confidence = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_confidence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Curvature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Curvature)
  GOOGLE_DCHECK_NE(&from, this);
  const Curvature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Curvature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Curvature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Curvature)
    MergeFrom(*source);
  }
}

void Curvature::MergeFrom(const Curvature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Curvature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000002u) {
      confidence_ = from.confidence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Curvature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Curvature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Curvature::CopyFrom(const Curvature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Curvature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Curvature::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Curvature::InternalSwap(Curvature* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Curvature, confidence_)
      + sizeof(Curvature::confidence_)
      - PROTOBUF_FIELD_OFFSET(Curvature, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Curvature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Heading::InitAsDefaultInstance() {
}
class Heading::_Internal {
 public:
  using HasBits = decltype(std::declval<Heading>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Heading::Heading(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Heading)
}
Heading::Heading(const Heading& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&value_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:Heading)
}

void Heading::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&value_)) + sizeof(confidence_));
}

Heading::~Heading() {
  // @@protoc_insertion_point(destructor:Heading)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Heading::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Heading::ArenaDtor(void* object) {
  Heading* _this = reinterpret_cast< Heading* >(object);
  (void)_this;
}
void Heading::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Heading::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Heading& Heading::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Heading_etsi_5fits_5fcdd_2eproto.base);
  return *internal_default_instance();
}


void Heading::Clear() {
// @@protoc_insertion_point(message_clear_start:Heading)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&confidence_) -
        reinterpret_cast<char*>(&value_)) + sizeof(confidence_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Heading::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 confidence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_confidence(&has_bits);
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Heading::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Heading)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_value(), target);
  }

  // required uint32 confidence = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_confidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Heading)
  return target;
}

size_t Heading::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Heading)
  size_t total_size = 0;

  if (_internal_has_value()) {
    // required int32 value = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());
  }

  if (_internal_has_confidence()) {
    // required uint32 confidence = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_confidence());
  }

  return total_size;
}
size_t Heading::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Heading)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 value = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());

    // required uint32 confidence = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_confidence());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Heading::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Heading)
  GOOGLE_DCHECK_NE(&from, this);
  const Heading* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Heading>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Heading)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Heading)
    MergeFrom(*source);
  }
}

void Heading::MergeFrom(const Heading& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Heading)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000002u) {
      confidence_ = from.confidence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Heading::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Heading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Heading::CopyFrom(const Heading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Heading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heading::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Heading::InternalSwap(Heading* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Heading, confidence_)
      + sizeof(Heading::confidence_)
      - PROTOBUF_FIELD_OFFSET(Heading, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Heading::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IntersectionReferenceID::InitAsDefaultInstance() {
}
class IntersectionReferenceID::_Internal {
 public:
  using HasBits = decltype(std::declval<IntersectionReferenceID>()._has_bits_);
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

IntersectionReferenceID::IntersectionReferenceID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IntersectionReferenceID)
}
IntersectionReferenceID::IntersectionReferenceID(const IntersectionReferenceID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&region_, &from.region_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&region_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:IntersectionReferenceID)
}

void IntersectionReferenceID::SharedCtor() {
  ::memset(&region_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&region_)) + sizeof(id_));
}

IntersectionReferenceID::~IntersectionReferenceID() {
  // @@protoc_insertion_point(destructor:IntersectionReferenceID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IntersectionReferenceID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IntersectionReferenceID::ArenaDtor(void* object) {
  IntersectionReferenceID* _this = reinterpret_cast< IntersectionReferenceID* >(object);
  (void)_this;
}
void IntersectionReferenceID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IntersectionReferenceID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntersectionReferenceID& IntersectionReferenceID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntersectionReferenceID_etsi_5fits_5fcdd_2eproto.base);
  return *internal_default_instance();
}


void IntersectionReferenceID::Clear() {
// @@protoc_insertion_point(message_clear_start:IntersectionReferenceID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&region_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&region_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntersectionReferenceID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_region(&has_bits);
          region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IntersectionReferenceID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntersectionReferenceID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 region = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_region(), target);
  }

  // optional int64 id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntersectionReferenceID)
  return target;
}

size_t IntersectionReferenceID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IntersectionReferenceID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 region = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_region());
    }

    // optional int64 id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntersectionReferenceID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IntersectionReferenceID)
  GOOGLE_DCHECK_NE(&from, this);
  const IntersectionReferenceID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntersectionReferenceID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IntersectionReferenceID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IntersectionReferenceID)
    MergeFrom(*source);
  }
}

void IntersectionReferenceID::MergeFrom(const IntersectionReferenceID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IntersectionReferenceID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      region_ = from.region_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IntersectionReferenceID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IntersectionReferenceID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntersectionReferenceID::CopyFrom(const IntersectionReferenceID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IntersectionReferenceID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntersectionReferenceID::IsInitialized() const {
  return true;
}

void IntersectionReferenceID::InternalSwap(IntersectionReferenceID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IntersectionReferenceID, id_)
      + sizeof(IntersectionReferenceID::id_)
      - PROTOBUF_FIELD_OFFSET(IntersectionReferenceID, region_)>(
          reinterpret_cast<char*>(&region_),
          reinterpret_cast<char*>(&other->region_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IntersectionReferenceID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LongitudinalAcceleration::InitAsDefaultInstance() {
}
class LongitudinalAcceleration::_Internal {
 public:
  using HasBits = decltype(std::declval<LongitudinalAcceleration>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

LongitudinalAcceleration::LongitudinalAcceleration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LongitudinalAcceleration)
}
LongitudinalAcceleration::LongitudinalAcceleration(const LongitudinalAcceleration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&value_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:LongitudinalAcceleration)
}

void LongitudinalAcceleration::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&value_)) + sizeof(confidence_));
}

LongitudinalAcceleration::~LongitudinalAcceleration() {
  // @@protoc_insertion_point(destructor:LongitudinalAcceleration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LongitudinalAcceleration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LongitudinalAcceleration::ArenaDtor(void* object) {
  LongitudinalAcceleration* _this = reinterpret_cast< LongitudinalAcceleration* >(object);
  (void)_this;
}
void LongitudinalAcceleration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LongitudinalAcceleration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LongitudinalAcceleration& LongitudinalAcceleration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LongitudinalAcceleration_etsi_5fits_5fcdd_2eproto.base);
  return *internal_default_instance();
}


void LongitudinalAcceleration::Clear() {
// @@protoc_insertion_point(message_clear_start:LongitudinalAcceleration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&confidence_) -
        reinterpret_cast<char*>(&value_)) + sizeof(confidence_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LongitudinalAcceleration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 confidence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_confidence(&has_bits);
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LongitudinalAcceleration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LongitudinalAcceleration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_value(), target);
  }

  // optional int32 confidence = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_confidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LongitudinalAcceleration)
  return target;
}

size_t LongitudinalAcceleration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LongitudinalAcceleration)
  size_t total_size = 0;

  // required int32 value = 1;
  if (_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 confidence = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_confidence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LongitudinalAcceleration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LongitudinalAcceleration)
  GOOGLE_DCHECK_NE(&from, this);
  const LongitudinalAcceleration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LongitudinalAcceleration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LongitudinalAcceleration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LongitudinalAcceleration)
    MergeFrom(*source);
  }
}

void LongitudinalAcceleration::MergeFrom(const LongitudinalAcceleration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LongitudinalAcceleration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000002u) {
      confidence_ = from.confidence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LongitudinalAcceleration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LongitudinalAcceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LongitudinalAcceleration::CopyFrom(const LongitudinalAcceleration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LongitudinalAcceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongitudinalAcceleration::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void LongitudinalAcceleration::InternalSwap(LongitudinalAcceleration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LongitudinalAcceleration, confidence_)
      + sizeof(LongitudinalAcceleration::confidence_)
      - PROTOBUF_FIELD_OFFSET(LongitudinalAcceleration, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LongitudinalAcceleration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PolygonalShape::InitAsDefaultInstance() {
  ::_PolygonalShape_default_instance_._instance.get_mutable()->shapereferencepoint_ = const_cast< ::CartesianPosition3d*>(
      ::CartesianPosition3d::internal_default_instance());
}
class PolygonalShape::_Internal {
 public:
  using HasBits = decltype(std::declval<PolygonalShape>()._has_bits_);
  static const ::CartesianPosition3d& shapereferencepoint(const PolygonalShape* msg);
  static void set_has_shapereferencepoint(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CartesianPosition3d&
PolygonalShape::_Internal::shapereferencepoint(const PolygonalShape* msg) {
  return *msg->shapereferencepoint_;
}
PolygonalShape::PolygonalShape(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  polygon_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PolygonalShape)
}
PolygonalShape::PolygonalShape(const PolygonalShape& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      polygon_(from.polygon_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shapereferencepoint()) {
    shapereferencepoint_ = new ::CartesianPosition3d(*from.shapereferencepoint_);
  } else {
    shapereferencepoint_ = nullptr;
  }
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:PolygonalShape)
}

void PolygonalShape::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PolygonalShape_etsi_5fits_5fcdd_2eproto.base);
  ::memset(&shapereferencepoint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&shapereferencepoint_)) + sizeof(height_));
}

PolygonalShape::~PolygonalShape() {
  // @@protoc_insertion_point(destructor:PolygonalShape)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PolygonalShape::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete shapereferencepoint_;
}

void PolygonalShape::ArenaDtor(void* object) {
  PolygonalShape* _this = reinterpret_cast< PolygonalShape* >(object);
  (void)_this;
}
void PolygonalShape::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PolygonalShape::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PolygonalShape& PolygonalShape::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PolygonalShape_etsi_5fits_5fcdd_2eproto.base);
  return *internal_default_instance();
}


void PolygonalShape::Clear() {
// @@protoc_insertion_point(message_clear_start:PolygonalShape)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polygon_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(shapereferencepoint_ != nullptr);
    shapereferencepoint_->Clear();
  }
  height_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PolygonalShape::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CartesianPosition3d shapeReferencePoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_shapereferencepoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CartesianPosition3d polygon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_polygon(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PolygonalShape::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PolygonalShape)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CartesianPosition3d shapeReferencePoint = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::shapereferencepoint(this), target, stream);
  }

  // repeated .CartesianPosition3d polygon = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_polygon_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_polygon(i), target, stream);
  }

  // optional uint32 height = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PolygonalShape)
  return target;
}

size_t PolygonalShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PolygonalShape)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CartesianPosition3d polygon = 2;
  total_size += 1UL * this->_internal_polygon_size();
  for (const auto& msg : this->polygon_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CartesianPosition3d shapeReferencePoint = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shapereferencepoint_);
    }

    // optional uint32 height = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_height());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PolygonalShape::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PolygonalShape)
  GOOGLE_DCHECK_NE(&from, this);
  const PolygonalShape* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PolygonalShape>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PolygonalShape)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PolygonalShape)
    MergeFrom(*source);
  }
}

void PolygonalShape::MergeFrom(const PolygonalShape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PolygonalShape)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygon_.MergeFrom(from.polygon_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_shapereferencepoint()->::CartesianPosition3d::MergeFrom(from._internal_shapereferencepoint());
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PolygonalShape::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PolygonalShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PolygonalShape::CopyFrom(const PolygonalShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PolygonalShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolygonalShape::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(polygon_)) return false;
  if (_internal_has_shapereferencepoint()) {
    if (!shapereferencepoint_->IsInitialized()) return false;
  }
  return true;
}

void PolygonalShape::InternalSwap(PolygonalShape* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  polygon_.InternalSwap(&other->polygon_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PolygonalShape, height_)
      + sizeof(PolygonalShape::height_)
      - PROTOBUF_FIELD_OFFSET(PolygonalShape, shapereferencepoint_)>(
          reinterpret_cast<char*>(&shapereferencepoint_),
          reinterpret_cast<char*>(&other->shapereferencepoint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PolygonalShape::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PositionConfidenceEllipse::InitAsDefaultInstance() {
}
class PositionConfidenceEllipse::_Internal {
 public:
  using HasBits = decltype(std::declval<PositionConfidenceEllipse>()._has_bits_);
  static void set_has_semi_major_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_semi_minor_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_semi_major_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

PositionConfidenceEllipse::PositionConfidenceEllipse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PositionConfidenceEllipse)
}
PositionConfidenceEllipse::PositionConfidenceEllipse(const PositionConfidenceEllipse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&semi_major_confidence_, &from.semi_major_confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&semi_major_orientation_) -
    reinterpret_cast<char*>(&semi_major_confidence_)) + sizeof(semi_major_orientation_));
  // @@protoc_insertion_point(copy_constructor:PositionConfidenceEllipse)
}

void PositionConfidenceEllipse::SharedCtor() {
  ::memset(&semi_major_confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&semi_major_orientation_) -
      reinterpret_cast<char*>(&semi_major_confidence_)) + sizeof(semi_major_orientation_));
}

PositionConfidenceEllipse::~PositionConfidenceEllipse() {
  // @@protoc_insertion_point(destructor:PositionConfidenceEllipse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PositionConfidenceEllipse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PositionConfidenceEllipse::ArenaDtor(void* object) {
  PositionConfidenceEllipse* _this = reinterpret_cast< PositionConfidenceEllipse* >(object);
  (void)_this;
}
void PositionConfidenceEllipse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PositionConfidenceEllipse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionConfidenceEllipse& PositionConfidenceEllipse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionConfidenceEllipse_etsi_5fits_5fcdd_2eproto.base);
  return *internal_default_instance();
}


void PositionConfidenceEllipse::Clear() {
// @@protoc_insertion_point(message_clear_start:PositionConfidenceEllipse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&semi_major_confidence_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&semi_major_orientation_) -
        reinterpret_cast<char*>(&semi_major_confidence_)) + sizeof(semi_major_orientation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionConfidenceEllipse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 semi_major_confidence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_semi_major_confidence(&has_bits);
          semi_major_confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 semi_minor_confidence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_semi_minor_confidence(&has_bits);
          semi_minor_confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 semi_major_orientation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_semi_major_orientation(&has_bits);
          semi_major_orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionConfidenceEllipse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PositionConfidenceEllipse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 semi_major_confidence = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_semi_major_confidence(), target);
  }

  // required uint32 semi_minor_confidence = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_semi_minor_confidence(), target);
  }

  // required uint32 semi_major_orientation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_semi_major_orientation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PositionConfidenceEllipse)
  return target;
}

size_t PositionConfidenceEllipse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PositionConfidenceEllipse)
  size_t total_size = 0;

  if (_internal_has_semi_major_confidence()) {
    // required uint32 semi_major_confidence = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_semi_major_confidence());
  }

  if (_internal_has_semi_minor_confidence()) {
    // required uint32 semi_minor_confidence = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_semi_minor_confidence());
  }

  if (_internal_has_semi_major_orientation()) {
    // required uint32 semi_major_orientation = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_semi_major_orientation());
  }

  return total_size;
}
size_t PositionConfidenceEllipse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PositionConfidenceEllipse)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 semi_major_confidence = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_semi_major_confidence());

    // required uint32 semi_minor_confidence = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_semi_minor_confidence());

    // required uint32 semi_major_orientation = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_semi_major_orientation());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionConfidenceEllipse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PositionConfidenceEllipse)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionConfidenceEllipse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionConfidenceEllipse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PositionConfidenceEllipse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PositionConfidenceEllipse)
    MergeFrom(*source);
  }
}

void PositionConfidenceEllipse::MergeFrom(const PositionConfidenceEllipse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PositionConfidenceEllipse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      semi_major_confidence_ = from.semi_major_confidence_;
    }
    if (cached_has_bits & 0x00000002u) {
      semi_minor_confidence_ = from.semi_minor_confidence_;
    }
    if (cached_has_bits & 0x00000004u) {
      semi_major_orientation_ = from.semi_major_orientation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PositionConfidenceEllipse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PositionConfidenceEllipse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionConfidenceEllipse::CopyFrom(const PositionConfidenceEllipse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PositionConfidenceEllipse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionConfidenceEllipse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PositionConfidenceEllipse::InternalSwap(PositionConfidenceEllipse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionConfidenceEllipse, semi_major_orientation_)
      + sizeof(PositionConfidenceEllipse::semi_major_orientation_)
      - PROTOBUF_FIELD_OFFSET(PositionConfidenceEllipse, semi_major_confidence_)>(
          reinterpret_cast<char*>(&semi_major_confidence_),
          reinterpret_cast<char*>(&other->semi_major_confidence_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionConfidenceEllipse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RadialShape::InitAsDefaultInstance() {
  ::_RadialShape_default_instance_._instance.get_mutable()->sharedrefpoint_ = const_cast< ::CartesianPosition3d*>(
      ::CartesianPosition3d::internal_default_instance());
}
class RadialShape::_Internal {
 public:
  using HasBits = decltype(std::declval<RadialShape>()._has_bits_);
  static const ::CartesianPosition3d& sharedrefpoint(const RadialShape* msg);
  static void set_has_sharedrefpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stationaryhorizontalopeninganglestart(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stationaryhorizontalopeningangleend(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_verticalopeninganglestart(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_verticalopeningangleend(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000e) ^ 0x0000000e) != 0;
  }
};

const ::CartesianPosition3d&
RadialShape::_Internal::sharedrefpoint(const RadialShape* msg) {
  return *msg->sharedrefpoint_;
}
RadialShape::RadialShape(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RadialShape)
}
RadialShape::RadialShape(const RadialShape& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sharedrefpoint()) {
    sharedrefpoint_ = new ::CartesianPosition3d(*from.sharedrefpoint_);
  } else {
    sharedrefpoint_ = nullptr;
  }
  ::memcpy(&range_, &from.range_,
    static_cast<size_t>(reinterpret_cast<char*>(&verticalopeningangleend_) -
    reinterpret_cast<char*>(&range_)) + sizeof(verticalopeningangleend_));
  // @@protoc_insertion_point(copy_constructor:RadialShape)
}

void RadialShape::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RadialShape_etsi_5fits_5fcdd_2eproto.base);
  ::memset(&sharedrefpoint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&verticalopeningangleend_) -
      reinterpret_cast<char*>(&sharedrefpoint_)) + sizeof(verticalopeningangleend_));
}

RadialShape::~RadialShape() {
  // @@protoc_insertion_point(destructor:RadialShape)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RadialShape::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sharedrefpoint_;
}

void RadialShape::ArenaDtor(void* object) {
  RadialShape* _this = reinterpret_cast< RadialShape* >(object);
  (void)_this;
}
void RadialShape::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RadialShape::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RadialShape& RadialShape::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RadialShape_etsi_5fits_5fcdd_2eproto.base);
  return *internal_default_instance();
}


void RadialShape::Clear() {
// @@protoc_insertion_point(message_clear_start:RadialShape)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(sharedrefpoint_ != nullptr);
    sharedrefpoint_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&range_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&verticalopeningangleend_) -
        reinterpret_cast<char*>(&range_)) + sizeof(verticalopeningangleend_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadialShape::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CartesianPosition3d sharedRefPoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sharedrefpoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_range(&has_bits);
          range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 stationaryHorizontalOpeningAngleStart = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_stationaryhorizontalopeninganglestart(&has_bits);
          stationaryhorizontalopeninganglestart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 stationaryHorizontalOpeningAngleEnd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_stationaryhorizontalopeningangleend(&has_bits);
          stationaryhorizontalopeningangleend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 verticalOpeningAngleStart = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_verticalopeninganglestart(&has_bits);
          verticalopeninganglestart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 verticalOpeningAngleEnd = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_verticalopeningangleend(&has_bits);
          verticalopeningangleend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RadialShape::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RadialShape)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CartesianPosition3d sharedRefPoint = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sharedrefpoint(this), target, stream);
  }

  // required uint32 range = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_range(), target);
  }

  // required uint32 stationaryHorizontalOpeningAngleStart = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_stationaryhorizontalopeninganglestart(), target);
  }

  // required uint32 stationaryHorizontalOpeningAngleEnd = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_stationaryhorizontalopeningangleend(), target);
  }

  // optional uint32 verticalOpeningAngleStart = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_verticalopeninganglestart(), target);
  }

  // optional uint32 verticalOpeningAngleEnd = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_verticalopeningangleend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RadialShape)
  return target;
}

size_t RadialShape::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RadialShape)
  size_t total_size = 0;

  if (_internal_has_range()) {
    // required uint32 range = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_range());
  }

  if (_internal_has_stationaryhorizontalopeninganglestart()) {
    // required uint32 stationaryHorizontalOpeningAngleStart = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stationaryhorizontalopeninganglestart());
  }

  if (_internal_has_stationaryhorizontalopeningangleend()) {
    // required uint32 stationaryHorizontalOpeningAngleEnd = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stationaryhorizontalopeningangleend());
  }

  return total_size;
}
size_t RadialShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RadialShape)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required uint32 range = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_range());

    // required uint32 stationaryHorizontalOpeningAngleStart = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stationaryhorizontalopeninganglestart());

    // required uint32 stationaryHorizontalOpeningAngleEnd = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stationaryhorizontalopeningangleend());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CartesianPosition3d sharedRefPoint = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sharedrefpoint_);
  }

  if (cached_has_bits & 0x00000030u) {
    // optional uint32 verticalOpeningAngleStart = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_verticalopeninganglestart());
    }

    // optional uint32 verticalOpeningAngleEnd = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_verticalopeningangleend());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RadialShape::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RadialShape)
  GOOGLE_DCHECK_NE(&from, this);
  const RadialShape* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RadialShape>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RadialShape)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RadialShape)
    MergeFrom(*source);
  }
}

void RadialShape::MergeFrom(const RadialShape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RadialShape)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sharedrefpoint()->::CartesianPosition3d::MergeFrom(from._internal_sharedrefpoint());
    }
    if (cached_has_bits & 0x00000002u) {
      range_ = from.range_;
    }
    if (cached_has_bits & 0x00000004u) {
      stationaryhorizontalopeninganglestart_ = from.stationaryhorizontalopeninganglestart_;
    }
    if (cached_has_bits & 0x00000008u) {
      stationaryhorizontalopeningangleend_ = from.stationaryhorizontalopeningangleend_;
    }
    if (cached_has_bits & 0x00000010u) {
      verticalopeninganglestart_ = from.verticalopeninganglestart_;
    }
    if (cached_has_bits & 0x00000020u) {
      verticalopeningangleend_ = from.verticalopeningangleend_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RadialShape::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RadialShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadialShape::CopyFrom(const RadialShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RadialShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadialShape::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_sharedrefpoint()) {
    if (!sharedrefpoint_->IsInitialized()) return false;
  }
  return true;
}

void RadialShape::InternalSwap(RadialShape* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadialShape, verticalopeningangleend_)
      + sizeof(RadialShape::verticalopeningangleend_)
      - PROTOBUF_FIELD_OFFSET(RadialShape, sharedrefpoint_)>(
          reinterpret_cast<char*>(&sharedrefpoint_),
          reinterpret_cast<char*>(&other->sharedrefpoint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadialShape::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RadialShapes::InitAsDefaultInstance() {
}
class RadialShapes::_Internal {
 public:
  using HasBits = decltype(std::declval<RadialShapes>()._has_bits_);
  static void set_has_refpointid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x_cord(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y_cord(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_z_cord(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

RadialShapes::RadialShapes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  radialshapeslist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RadialShapes)
}
RadialShapes::RadialShapes(const RadialShapes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      radialshapeslist_(from.radialshapeslist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&refpointid_, &from.refpointid_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_cord_) -
    reinterpret_cast<char*>(&refpointid_)) + sizeof(z_cord_));
  // @@protoc_insertion_point(copy_constructor:RadialShapes)
}

void RadialShapes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RadialShapes_etsi_5fits_5fcdd_2eproto.base);
  ::memset(&refpointid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_cord_) -
      reinterpret_cast<char*>(&refpointid_)) + sizeof(z_cord_));
}

RadialShapes::~RadialShapes() {
  // @@protoc_insertion_point(destructor:RadialShapes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RadialShapes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RadialShapes::ArenaDtor(void* object) {
  RadialShapes* _this = reinterpret_cast< RadialShapes* >(object);
  (void)_this;
}
void RadialShapes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RadialShapes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RadialShapes& RadialShapes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RadialShapes_etsi_5fits_5fcdd_2eproto.base);
  return *internal_default_instance();
}


void RadialShapes::Clear() {
// @@protoc_insertion_point(message_clear_start:RadialShapes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  radialshapeslist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&refpointid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_cord_) -
        reinterpret_cast<char*>(&refpointid_)) + sizeof(z_cord_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadialShapes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 refPointID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_refpointid(&has_bits);
          refpointid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 x_cord = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_x_cord(&has_bits);
          x_cord_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 y_cord = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_y_cord(&has_bits);
          y_cord_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 z_cord = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_z_cord(&has_bits);
          z_cord_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .RadialShapeDetails radialShapesList = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_radialshapeslist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RadialShapes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RadialShapes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 refPointID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_refpointid(), target);
  }

  // required int32 x_cord = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_x_cord(), target);
  }

  // required int32 y_cord = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_y_cord(), target);
  }

  // optional int32 z_cord = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_z_cord(), target);
  }

  // repeated .RadialShapeDetails radialShapesList = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_radialshapeslist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_radialshapeslist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RadialShapes)
  return target;
}

size_t RadialShapes::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RadialShapes)
  size_t total_size = 0;

  if (_internal_has_refpointid()) {
    // required uint32 refPointID = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_refpointid());
  }

  if (_internal_has_x_cord()) {
    // required int32 x_cord = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x_cord());
  }

  if (_internal_has_y_cord()) {
    // required int32 y_cord = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y_cord());
  }

  return total_size;
}
size_t RadialShapes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RadialShapes)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 refPointID = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_refpointid());

    // required int32 x_cord = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x_cord());

    // required int32 y_cord = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y_cord());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RadialShapeDetails radialShapesList = 6;
  total_size += 1UL * this->_internal_radialshapeslist_size();
  for (const auto& msg : this->radialshapeslist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 z_cord = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_z_cord());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RadialShapes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RadialShapes)
  GOOGLE_DCHECK_NE(&from, this);
  const RadialShapes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RadialShapes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RadialShapes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RadialShapes)
    MergeFrom(*source);
  }
}

void RadialShapes::MergeFrom(const RadialShapes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RadialShapes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  radialshapeslist_.MergeFrom(from.radialshapeslist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      refpointid_ = from.refpointid_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_cord_ = from.x_cord_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_cord_ = from.y_cord_;
    }
    if (cached_has_bits & 0x00000008u) {
      z_cord_ = from.z_cord_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RadialShapes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RadialShapes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadialShapes::CopyFrom(const RadialShapes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RadialShapes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadialShapes::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(radialshapeslist_)) return false;
  return true;
}

void RadialShapes::InternalSwap(RadialShapes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  radialshapeslist_.InternalSwap(&other->radialshapeslist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadialShapes, z_cord_)
      + sizeof(RadialShapes::z_cord_)
      - PROTOBUF_FIELD_OFFSET(RadialShapes, refpointid_)>(
          reinterpret_cast<char*>(&refpointid_),
          reinterpret_cast<char*>(&other->refpointid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadialShapes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RadialShapeDetails::InitAsDefaultInstance() {
}
class RadialShapeDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<RadialShapeDetails>()._has_bits_);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_horizontalopeninganglestart(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_horizontalopeningangleend(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_verticalopeninganglestart(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_verticalopeningangleend(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

RadialShapeDetails::RadialShapeDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RadialShapeDetails)
}
RadialShapeDetails::RadialShapeDetails(const RadialShapeDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&range_, &from.range_,
    static_cast<size_t>(reinterpret_cast<char*>(&verticalopeningangleend_) -
    reinterpret_cast<char*>(&range_)) + sizeof(verticalopeningangleend_));
  // @@protoc_insertion_point(copy_constructor:RadialShapeDetails)
}

void RadialShapeDetails::SharedCtor() {
  ::memset(&range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&verticalopeningangleend_) -
      reinterpret_cast<char*>(&range_)) + sizeof(verticalopeningangleend_));
}

RadialShapeDetails::~RadialShapeDetails() {
  // @@protoc_insertion_point(destructor:RadialShapeDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RadialShapeDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RadialShapeDetails::ArenaDtor(void* object) {
  RadialShapeDetails* _this = reinterpret_cast< RadialShapeDetails* >(object);
  (void)_this;
}
void RadialShapeDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RadialShapeDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RadialShapeDetails& RadialShapeDetails::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RadialShapeDetails_etsi_5fits_5fcdd_2eproto.base);
  return *internal_default_instance();
}


void RadialShapeDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:RadialShapeDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&range_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&verticalopeningangleend_) -
        reinterpret_cast<char*>(&range_)) + sizeof(verticalopeningangleend_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadialShapeDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_range(&has_bits);
          range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 horizontalOpeningAngleStart = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_horizontalopeninganglestart(&has_bits);
          horizontalopeninganglestart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 horizontalOpeningAngleEnd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_horizontalopeningangleend(&has_bits);
          horizontalopeningangleend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 verticalOpeningAngleStart = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_verticalopeninganglestart(&has_bits);
          verticalopeninganglestart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 verticalOpeningAngleEnd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_verticalopeningangleend(&has_bits);
          verticalopeningangleend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RadialShapeDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RadialShapeDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 range = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_range(), target);
  }

  // required uint32 horizontalOpeningAngleStart = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_horizontalopeninganglestart(), target);
  }

  // required uint32 horizontalOpeningAngleEnd = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_horizontalopeningangleend(), target);
  }

  // optional uint32 verticalOpeningAngleStart = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_verticalopeninganglestart(), target);
  }

  // optional uint32 verticalOpeningAngleEnd = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_verticalopeningangleend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RadialShapeDetails)
  return target;
}

size_t RadialShapeDetails::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RadialShapeDetails)
  size_t total_size = 0;

  if (_internal_has_range()) {
    // required int32 range = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_range());
  }

  if (_internal_has_horizontalopeninganglestart()) {
    // required uint32 horizontalOpeningAngleStart = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_horizontalopeninganglestart());
  }

  if (_internal_has_horizontalopeningangleend()) {
    // required uint32 horizontalOpeningAngleEnd = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_horizontalopeningangleend());
  }

  return total_size;
}
size_t RadialShapeDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RadialShapeDetails)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 range = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_range());

    // required uint32 horizontalOpeningAngleStart = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_horizontalopeninganglestart());

    // required uint32 horizontalOpeningAngleEnd = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_horizontalopeningangleend());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000018u) {
    // optional uint32 verticalOpeningAngleStart = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_verticalopeninganglestart());
    }

    // optional uint32 verticalOpeningAngleEnd = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_verticalopeningangleend());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RadialShapeDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RadialShapeDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const RadialShapeDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RadialShapeDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RadialShapeDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RadialShapeDetails)
    MergeFrom(*source);
  }
}

void RadialShapeDetails::MergeFrom(const RadialShapeDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RadialShapeDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      range_ = from.range_;
    }
    if (cached_has_bits & 0x00000002u) {
      horizontalopeninganglestart_ = from.horizontalopeninganglestart_;
    }
    if (cached_has_bits & 0x00000004u) {
      horizontalopeningangleend_ = from.horizontalopeningangleend_;
    }
    if (cached_has_bits & 0x00000008u) {
      verticalopeninganglestart_ = from.verticalopeninganglestart_;
    }
    if (cached_has_bits & 0x00000010u) {
      verticalopeningangleend_ = from.verticalopeningangleend_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RadialShapeDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RadialShapeDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadialShapeDetails::CopyFrom(const RadialShapeDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RadialShapeDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadialShapeDetails::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void RadialShapeDetails::InternalSwap(RadialShapeDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadialShapeDetails, verticalopeningangleend_)
      + sizeof(RadialShapeDetails::verticalopeningangleend_)
      - PROTOBUF_FIELD_OFFSET(RadialShapeDetails, range_)>(
          reinterpret_cast<char*>(&range_),
          reinterpret_cast<char*>(&other->range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadialShapeDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RectangularShape::InitAsDefaultInstance() {
  ::_RectangularShape_default_instance_._instance.get_mutable()->center_point_ = const_cast< ::CartesianPosition3d*>(
      ::CartesianPosition3d::internal_default_instance());
}
class RectangularShape::_Internal {
 public:
  using HasBits = decltype(std::declval<RectangularShape>()._has_bits_);
  static const ::CartesianPosition3d& center_point(const RectangularShape* msg);
  static void set_has_center_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_semilength(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_semibreadth(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::CartesianPosition3d&
RectangularShape::_Internal::center_point(const RectangularShape* msg) {
  return *msg->center_point_;
}
RectangularShape::RectangularShape(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RectangularShape)
}
RectangularShape::RectangularShape(const RectangularShape& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_center_point()) {
    center_point_ = new ::CartesianPosition3d(*from.center_point_);
  } else {
    center_point_ = nullptr;
  }
  ::memcpy(&semilength_, &from.semilength_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&semilength_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:RectangularShape)
}

void RectangularShape::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RectangularShape_etsi_5fits_5fcdd_2eproto.base);
  ::memset(&center_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&center_point_)) + sizeof(height_));
}

RectangularShape::~RectangularShape() {
  // @@protoc_insertion_point(destructor:RectangularShape)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RectangularShape::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete center_point_;
}

void RectangularShape::ArenaDtor(void* object) {
  RectangularShape* _this = reinterpret_cast< RectangularShape* >(object);
  (void)_this;
}
void RectangularShape::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RectangularShape::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RectangularShape& RectangularShape::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RectangularShape_etsi_5fits_5fcdd_2eproto.base);
  return *internal_default_instance();
}


void RectangularShape::Clear() {
// @@protoc_insertion_point(message_clear_start:RectangularShape)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(center_point_ != nullptr);
    center_point_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&semilength_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&semilength_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RectangularShape::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CartesianPosition3d center_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_center_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 semiLength = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_semilength(&has_bits);
          semilength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 semiBreadth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_semibreadth(&has_bits);
          semibreadth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 orientation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_orientation(&has_bits);
          orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RectangularShape::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RectangularShape)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CartesianPosition3d center_point = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::center_point(this), target, stream);
  }

  // required uint32 semiLength = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_semilength(), target);
  }

  // required uint32 semiBreadth = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_semibreadth(), target);
  }

  // optional uint32 orientation = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_orientation(), target);
  }

  // optional uint32 height = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RectangularShape)
  return target;
}

size_t RectangularShape::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RectangularShape)
  size_t total_size = 0;

  if (_internal_has_semilength()) {
    // required uint32 semiLength = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_semilength());
  }

  if (_internal_has_semibreadth()) {
    // required uint32 semiBreadth = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_semibreadth());
  }

  return total_size;
}
size_t RectangularShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RectangularShape)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 semiLength = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_semilength());

    // required uint32 semiBreadth = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_semibreadth());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CartesianPosition3d center_point = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_point_);
  }

  if (cached_has_bits & 0x00000018u) {
    // optional uint32 orientation = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_orientation());
    }

    // optional uint32 height = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_height());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RectangularShape::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RectangularShape)
  GOOGLE_DCHECK_NE(&from, this);
  const RectangularShape* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RectangularShape>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RectangularShape)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RectangularShape)
    MergeFrom(*source);
  }
}

void RectangularShape::MergeFrom(const RectangularShape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RectangularShape)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_center_point()->::CartesianPosition3d::MergeFrom(from._internal_center_point());
    }
    if (cached_has_bits & 0x00000002u) {
      semilength_ = from.semilength_;
    }
    if (cached_has_bits & 0x00000004u) {
      semibreadth_ = from.semibreadth_;
    }
    if (cached_has_bits & 0x00000008u) {
      orientation_ = from.orientation_;
    }
    if (cached_has_bits & 0x00000010u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RectangularShape::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RectangularShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RectangularShape::CopyFrom(const RectangularShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RectangularShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RectangularShape::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_center_point()) {
    if (!center_point_->IsInitialized()) return false;
  }
  return true;
}

void RectangularShape::InternalSwap(RectangularShape* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RectangularShape, height_)
      + sizeof(RectangularShape::height_)
      - PROTOBUF_FIELD_OFFSET(RectangularShape, center_point_)>(
          reinterpret_cast<char*>(&center_point_),
          reinterpret_cast<char*>(&other->center_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RectangularShape::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReferencePosition::InitAsDefaultInstance() {
  ::_ReferencePosition_default_instance_._instance.get_mutable()->position_confidence_ = const_cast< ::PositionConfidenceEllipse*>(
      ::PositionConfidenceEllipse::internal_default_instance());
  ::_ReferencePosition_default_instance_._instance.get_mutable()->altitude_ = const_cast< ::Altitude*>(
      ::Altitude::internal_default_instance());
}
class ReferencePosition::_Internal {
 public:
  using HasBits = decltype(std::declval<ReferencePosition>()._has_bits_);
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::PositionConfidenceEllipse& position_confidence(const ReferencePosition* msg);
  static void set_has_position_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Altitude& altitude(const ReferencePosition* msg);
  static void set_has_altitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::PositionConfidenceEllipse&
ReferencePosition::_Internal::position_confidence(const ReferencePosition* msg) {
  return *msg->position_confidence_;
}
const ::Altitude&
ReferencePosition::_Internal::altitude(const ReferencePosition* msg) {
  return *msg->altitude_;
}
ReferencePosition::ReferencePosition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ReferencePosition)
}
ReferencePosition::ReferencePosition(const ReferencePosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position_confidence()) {
    position_confidence_ = new ::PositionConfidenceEllipse(*from.position_confidence_);
  } else {
    position_confidence_ = nullptr;
  }
  if (from._internal_has_altitude()) {
    altitude_ = new ::Altitude(*from.altitude_);
  } else {
    altitude_ = nullptr;
  }
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  // @@protoc_insertion_point(copy_constructor:ReferencePosition)
}

void ReferencePosition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReferencePosition_etsi_5fits_5fcdd_2eproto.base);
  ::memset(&position_confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&position_confidence_)) + sizeof(longitude_));
}

ReferencePosition::~ReferencePosition() {
  // @@protoc_insertion_point(destructor:ReferencePosition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReferencePosition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_confidence_;
  if (this != internal_default_instance()) delete altitude_;
}

void ReferencePosition::ArenaDtor(void* object) {
  ReferencePosition* _this = reinterpret_cast< ReferencePosition* >(object);
  (void)_this;
}
void ReferencePosition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReferencePosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReferencePosition& ReferencePosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReferencePosition_etsi_5fits_5fcdd_2eproto.base);
  return *internal_default_instance();
}


void ReferencePosition::Clear() {
// @@protoc_insertion_point(message_clear_start:ReferencePosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(position_confidence_ != nullptr);
      position_confidence_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(altitude_ != nullptr);
      altitude_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&latitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&longitude_) -
        reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReferencePosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_latitude(&has_bits);
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_longitude(&has_bits);
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .PositionConfidenceEllipse position_confidence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_confidence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Altitude altitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_altitude(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReferencePosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReferencePosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 latitude = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_latitude(), target);
  }

  // required int64 longitude = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_longitude(), target);
  }

  // required .PositionConfidenceEllipse position_confidence = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::position_confidence(this), target, stream);
  }

  // required .Altitude altitude = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::altitude(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReferencePosition)
  return target;
}

size_t ReferencePosition::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ReferencePosition)
  size_t total_size = 0;

  if (_internal_has_position_confidence()) {
    // required .PositionConfidenceEllipse position_confidence = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_confidence_);
  }

  if (_internal_has_altitude()) {
    // required .Altitude altitude = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *altitude_);
  }

  if (_internal_has_latitude()) {
    // required int64 latitude = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_latitude());
  }

  if (_internal_has_longitude()) {
    // required int64 longitude = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_longitude());
  }

  return total_size;
}
size_t ReferencePosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReferencePosition)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .PositionConfidenceEllipse position_confidence = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_confidence_);

    // required .Altitude altitude = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *altitude_);

    // required int64 latitude = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_latitude());

    // required int64 longitude = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_longitude());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReferencePosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReferencePosition)
  GOOGLE_DCHECK_NE(&from, this);
  const ReferencePosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReferencePosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReferencePosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReferencePosition)
    MergeFrom(*source);
  }
}

void ReferencePosition::MergeFrom(const ReferencePosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReferencePosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_position_confidence()->::PositionConfidenceEllipse::MergeFrom(from._internal_position_confidence());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_altitude()->::Altitude::MergeFrom(from._internal_altitude());
    }
    if (cached_has_bits & 0x00000004u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000008u) {
      longitude_ = from.longitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReferencePosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReferencePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferencePosition::CopyFrom(const ReferencePosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReferencePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferencePosition::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_position_confidence()) {
    if (!position_confidence_->IsInitialized()) return false;
  }
  if (_internal_has_altitude()) {
    if (!altitude_->IsInitialized()) return false;
  }
  return true;
}

void ReferencePosition::InternalSwap(ReferencePosition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReferencePosition, longitude_)
      + sizeof(ReferencePosition::longitude_)
      - PROTOBUF_FIELD_OFFSET(ReferencePosition, position_confidence_)>(
          reinterpret_cast<char*>(&position_confidence_),
          reinterpret_cast<char*>(&other->position_confidence_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferencePosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoadSegmentReferenceID::InitAsDefaultInstance() {
}
class RoadSegmentReferenceID::_Internal {
 public:
  using HasBits = decltype(std::declval<RoadSegmentReferenceID>()._has_bits_);
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

RoadSegmentReferenceID::RoadSegmentReferenceID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RoadSegmentReferenceID)
}
RoadSegmentReferenceID::RoadSegmentReferenceID(const RoadSegmentReferenceID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&region_, &from.region_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&region_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:RoadSegmentReferenceID)
}

void RoadSegmentReferenceID::SharedCtor() {
  ::memset(&region_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&region_)) + sizeof(id_));
}

RoadSegmentReferenceID::~RoadSegmentReferenceID() {
  // @@protoc_insertion_point(destructor:RoadSegmentReferenceID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoadSegmentReferenceID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RoadSegmentReferenceID::ArenaDtor(void* object) {
  RoadSegmentReferenceID* _this = reinterpret_cast< RoadSegmentReferenceID* >(object);
  (void)_this;
}
void RoadSegmentReferenceID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoadSegmentReferenceID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoadSegmentReferenceID& RoadSegmentReferenceID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoadSegmentReferenceID_etsi_5fits_5fcdd_2eproto.base);
  return *internal_default_instance();
}


void RoadSegmentReferenceID::Clear() {
// @@protoc_insertion_point(message_clear_start:RoadSegmentReferenceID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&region_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&region_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoadSegmentReferenceID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_region(&has_bits);
          region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoadSegmentReferenceID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoadSegmentReferenceID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 region = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_region(), target);
  }

  // required int64 id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoadSegmentReferenceID)
  return target;
}

size_t RoadSegmentReferenceID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoadSegmentReferenceID)
  size_t total_size = 0;

  // required int64 id = 2;
  if (_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 region = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_region());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadSegmentReferenceID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoadSegmentReferenceID)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadSegmentReferenceID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoadSegmentReferenceID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoadSegmentReferenceID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoadSegmentReferenceID)
    MergeFrom(*source);
  }
}

void RoadSegmentReferenceID::MergeFrom(const RoadSegmentReferenceID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoadSegmentReferenceID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      region_ = from.region_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RoadSegmentReferenceID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoadSegmentReferenceID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadSegmentReferenceID::CopyFrom(const RoadSegmentReferenceID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoadSegmentReferenceID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadSegmentReferenceID::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void RoadSegmentReferenceID::InternalSwap(RoadSegmentReferenceID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadSegmentReferenceID, id_)
      + sizeof(RoadSegmentReferenceID::id_)
      - PROTOBUF_FIELD_OFFSET(RoadSegmentReferenceID, region_)>(
          reinterpret_cast<char*>(&region_),
          reinterpret_cast<char*>(&other->region_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoadSegmentReferenceID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Speed::InitAsDefaultInstance() {
}
class Speed::_Internal {
 public:
  using HasBits = decltype(std::declval<Speed>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Speed::Speed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Speed)
}
Speed::Speed(const Speed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&value_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:Speed)
}

void Speed::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&value_)) + sizeof(confidence_));
}

Speed::~Speed() {
  // @@protoc_insertion_point(destructor:Speed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Speed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Speed::ArenaDtor(void* object) {
  Speed* _this = reinterpret_cast< Speed* >(object);
  (void)_this;
}
void Speed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Speed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Speed& Speed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Speed_etsi_5fits_5fcdd_2eproto.base);
  return *internal_default_instance();
}


void Speed::Clear() {
// @@protoc_insertion_point(message_clear_start:Speed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&confidence_) -
        reinterpret_cast<char*>(&value_)) + sizeof(confidence_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Speed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 confidence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_confidence(&has_bits);
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Speed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Speed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_value(), target);
  }

  // required uint32 confidence = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_confidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Speed)
  return target;
}

size_t Speed::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Speed)
  size_t total_size = 0;

  if (_internal_has_value()) {
    // required int32 value = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());
  }

  if (_internal_has_confidence()) {
    // required uint32 confidence = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_confidence());
  }

  return total_size;
}
size_t Speed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Speed)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 value = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());

    // required uint32 confidence = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_confidence());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Speed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Speed)
  GOOGLE_DCHECK_NE(&from, this);
  const Speed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Speed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Speed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Speed)
    MergeFrom(*source);
  }
}

void Speed::MergeFrom(const Speed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Speed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000002u) {
      confidence_ = from.confidence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Speed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Speed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Speed::CopyFrom(const Speed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Speed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Speed::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Speed::InternalSwap(Speed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Speed, confidence_)
      + sizeof(Speed::confidence_)
      - PROTOBUF_FIELD_OFFSET(Speed, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Speed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VehicleLength::InitAsDefaultInstance() {
}
class VehicleLength::_Internal {
 public:
  using HasBits = decltype(std::declval<VehicleLength>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_veh_len_conf_ind(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

VehicleLength::VehicleLength(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VehicleLength)
}
VehicleLength::VehicleLength(const VehicleLength& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&veh_len_conf_ind_) -
    reinterpret_cast<char*>(&value_)) + sizeof(veh_len_conf_ind_));
  // @@protoc_insertion_point(copy_constructor:VehicleLength)
}

void VehicleLength::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&veh_len_conf_ind_) -
      reinterpret_cast<char*>(&value_)) + sizeof(veh_len_conf_ind_));
}

VehicleLength::~VehicleLength() {
  // @@protoc_insertion_point(destructor:VehicleLength)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VehicleLength::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VehicleLength::ArenaDtor(void* object) {
  VehicleLength* _this = reinterpret_cast< VehicleLength* >(object);
  (void)_this;
}
void VehicleLength::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VehicleLength::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleLength& VehicleLength::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleLength_etsi_5fits_5fcdd_2eproto.base);
  return *internal_default_instance();
}


void VehicleLength::Clear() {
// @@protoc_insertion_point(message_clear_start:VehicleLength)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&veh_len_conf_ind_) -
        reinterpret_cast<char*>(&value_)) + sizeof(veh_len_conf_ind_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleLength::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .VehicleLengthConfidenceIndication veh_len_conf_ind = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::VehicleLengthConfidenceIndication_IsValid(val))) {
            _internal_set_veh_len_conf_ind(static_cast<::VehicleLengthConfidenceIndication>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleLength::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VehicleLength)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_value(), target);
  }

  // optional .VehicleLengthConfidenceIndication veh_len_conf_ind = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_veh_len_conf_ind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VehicleLength)
  return target;
}

size_t VehicleLength::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VehicleLength)
  size_t total_size = 0;

  // required int32 value = 1;
  if (_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .VehicleLengthConfidenceIndication veh_len_conf_ind = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_veh_len_conf_ind());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleLength::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VehicleLength)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleLength* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleLength>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VehicleLength)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VehicleLength)
    MergeFrom(*source);
  }
}

void VehicleLength::MergeFrom(const VehicleLength& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VehicleLength)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000002u) {
      veh_len_conf_ind_ = from.veh_len_conf_ind_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VehicleLength::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VehicleLength)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleLength::CopyFrom(const VehicleLength& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VehicleLength)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleLength::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void VehicleLength::InternalSwap(VehicleLength* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleLength, veh_len_conf_ind_)
      + sizeof(VehicleLength::veh_len_conf_ind_)
      - PROTOBUF_FIELD_OFFSET(VehicleLength, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleLength::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VehicleWidth::InitAsDefaultInstance() {
}
class VehicleWidth::_Internal {
 public:
  using HasBits = decltype(std::declval<VehicleWidth>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

VehicleWidth::VehicleWidth(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VehicleWidth)
}
VehicleWidth::VehicleWidth(const VehicleWidth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:VehicleWidth)
}

void VehicleWidth::SharedCtor() {
  value_ = 0;
}

VehicleWidth::~VehicleWidth() {
  // @@protoc_insertion_point(destructor:VehicleWidth)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VehicleWidth::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VehicleWidth::ArenaDtor(void* object) {
  VehicleWidth* _this = reinterpret_cast< VehicleWidth* >(object);
  (void)_this;
}
void VehicleWidth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VehicleWidth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleWidth& VehicleWidth::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleWidth_etsi_5fits_5fcdd_2eproto.base);
  return *internal_default_instance();
}


void VehicleWidth::Clear() {
// @@protoc_insertion_point(message_clear_start:VehicleWidth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleWidth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleWidth::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VehicleWidth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VehicleWidth)
  return target;
}

size_t VehicleWidth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VehicleWidth)
  size_t total_size = 0;

  // required int32 value = 1;
  if (_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleWidth::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VehicleWidth)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleWidth* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleWidth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VehicleWidth)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VehicleWidth)
    MergeFrom(*source);
  }
}

void VehicleWidth::MergeFrom(const VehicleWidth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VehicleWidth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_set_value(from._internal_value());
  }
}

void VehicleWidth::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VehicleWidth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleWidth::CopyFrom(const VehicleWidth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VehicleWidth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleWidth::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void VehicleWidth::InternalSwap(VehicleWidth* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleWidth::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Wgs84Angle::InitAsDefaultInstance() {
}
class Wgs84Angle::_Internal {
 public:
  using HasBits = decltype(std::declval<Wgs84Angle>()._has_bits_);
  static void set_has_wgsanglevalue(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_wgs84angleconfidence(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Wgs84Angle::Wgs84Angle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Wgs84Angle)
}
Wgs84Angle::Wgs84Angle(const Wgs84Angle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&wgsanglevalue_, &from.wgsanglevalue_,
    static_cast<size_t>(reinterpret_cast<char*>(&wgs84angleconfidence_) -
    reinterpret_cast<char*>(&wgsanglevalue_)) + sizeof(wgs84angleconfidence_));
  // @@protoc_insertion_point(copy_constructor:Wgs84Angle)
}

void Wgs84Angle::SharedCtor() {
  ::memset(&wgsanglevalue_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wgs84angleconfidence_) -
      reinterpret_cast<char*>(&wgsanglevalue_)) + sizeof(wgs84angleconfidence_));
}

Wgs84Angle::~Wgs84Angle() {
  // @@protoc_insertion_point(destructor:Wgs84Angle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Wgs84Angle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Wgs84Angle::ArenaDtor(void* object) {
  Wgs84Angle* _this = reinterpret_cast< Wgs84Angle* >(object);
  (void)_this;
}
void Wgs84Angle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Wgs84Angle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Wgs84Angle& Wgs84Angle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Wgs84Angle_etsi_5fits_5fcdd_2eproto.base);
  return *internal_default_instance();
}


void Wgs84Angle::Clear() {
// @@protoc_insertion_point(message_clear_start:Wgs84Angle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&wgsanglevalue_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wgs84angleconfidence_) -
        reinterpret_cast<char*>(&wgsanglevalue_)) + sizeof(wgs84angleconfidence_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Wgs84Angle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 wgsAngleValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_wgsanglevalue(&has_bits);
          wgsanglevalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 wgs84AngleConfidence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_wgs84angleconfidence(&has_bits);
          wgs84angleconfidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Wgs84Angle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Wgs84Angle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 wgsAngleValue = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_wgsanglevalue(), target);
  }

  // required uint32 wgs84AngleConfidence = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_wgs84angleconfidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Wgs84Angle)
  return target;
}

size_t Wgs84Angle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Wgs84Angle)
  size_t total_size = 0;

  if (_internal_has_wgsanglevalue()) {
    // required uint32 wgsAngleValue = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_wgsanglevalue());
  }

  if (_internal_has_wgs84angleconfidence()) {
    // required uint32 wgs84AngleConfidence = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_wgs84angleconfidence());
  }

  return total_size;
}
size_t Wgs84Angle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Wgs84Angle)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 wgsAngleValue = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_wgsanglevalue());

    // required uint32 wgs84AngleConfidence = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_wgs84angleconfidence());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Wgs84Angle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Wgs84Angle)
  GOOGLE_DCHECK_NE(&from, this);
  const Wgs84Angle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Wgs84Angle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Wgs84Angle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Wgs84Angle)
    MergeFrom(*source);
  }
}

void Wgs84Angle::MergeFrom(const Wgs84Angle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Wgs84Angle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      wgsanglevalue_ = from.wgsanglevalue_;
    }
    if (cached_has_bits & 0x00000002u) {
      wgs84angleconfidence_ = from.wgs84angleconfidence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Wgs84Angle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Wgs84Angle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Wgs84Angle::CopyFrom(const Wgs84Angle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Wgs84Angle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wgs84Angle::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Wgs84Angle::InternalSwap(Wgs84Angle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Wgs84Angle, wgs84angleconfidence_)
      + sizeof(Wgs84Angle::wgs84angleconfidence_)
      - PROTOBUF_FIELD_OFFSET(Wgs84Angle, wgsanglevalue_)>(
          reinterpret_cast<char*>(&wgsanglevalue_),
          reinterpret_cast<char*>(&other->wgsanglevalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Wgs84Angle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void YawRate::InitAsDefaultInstance() {
}
class YawRate::_Internal {
 public:
  using HasBits = decltype(std::declval<YawRate>()._has_bits_);
  static void set_has_yawratevalue(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_yawrateconfidence(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

YawRate::YawRate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:YawRate)
}
YawRate::YawRate(const YawRate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&yawratevalue_, &from.yawratevalue_,
    static_cast<size_t>(reinterpret_cast<char*>(&yawrateconfidence_) -
    reinterpret_cast<char*>(&yawratevalue_)) + sizeof(yawrateconfidence_));
  // @@protoc_insertion_point(copy_constructor:YawRate)
}

void YawRate::SharedCtor() {
  ::memset(&yawratevalue_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yawrateconfidence_) -
      reinterpret_cast<char*>(&yawratevalue_)) + sizeof(yawrateconfidence_));
}

YawRate::~YawRate() {
  // @@protoc_insertion_point(destructor:YawRate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void YawRate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void YawRate::ArenaDtor(void* object) {
  YawRate* _this = reinterpret_cast< YawRate* >(object);
  (void)_this;
}
void YawRate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void YawRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const YawRate& YawRate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_YawRate_etsi_5fits_5fcdd_2eproto.base);
  return *internal_default_instance();
}


void YawRate::Clear() {
// @@protoc_insertion_point(message_clear_start:YawRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&yawratevalue_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&yawrateconfidence_) -
        reinterpret_cast<char*>(&yawratevalue_)) + sizeof(yawrateconfidence_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* YawRate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 yawratevalue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_yawratevalue(&has_bits);
          yawratevalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .YawRateConfidence yawrateconfidence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::YawRateConfidence_IsValid(val))) {
            _internal_set_yawrateconfidence(static_cast<::YawRateConfidence>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* YawRate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:YawRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 yawratevalue = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_yawratevalue(), target);
  }

  // required .YawRateConfidence yawrateconfidence = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_yawrateconfidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:YawRate)
  return target;
}

size_t YawRate::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:YawRate)
  size_t total_size = 0;

  if (_internal_has_yawratevalue()) {
    // required int32 yawratevalue = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_yawratevalue());
  }

  if (_internal_has_yawrateconfidence()) {
    // required .YawRateConfidence yawrateconfidence = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_yawrateconfidence());
  }

  return total_size;
}
size_t YawRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:YawRate)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 yawratevalue = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_yawratevalue());

    // required .YawRateConfidence yawrateconfidence = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_yawrateconfidence());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void YawRate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:YawRate)
  GOOGLE_DCHECK_NE(&from, this);
  const YawRate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<YawRate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:YawRate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:YawRate)
    MergeFrom(*source);
  }
}

void YawRate::MergeFrom(const YawRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:YawRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      yawratevalue_ = from.yawratevalue_;
    }
    if (cached_has_bits & 0x00000002u) {
      yawrateconfidence_ = from.yawrateconfidence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void YawRate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:YawRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YawRate::CopyFrom(const YawRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:YawRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YawRate::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void YawRate::InternalSwap(YawRate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(YawRate, yawrateconfidence_)
      + sizeof(YawRate::yawrateconfidence_)
      - PROTOBUF_FIELD_OFFSET(YawRate, yawratevalue_)>(
          reinterpret_cast<char*>(&yawratevalue_),
          reinterpret_cast<char*>(&other->yawratevalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata YawRate::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Altitude* Arena::CreateMaybeMessage< ::Altitude >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Altitude >(arena);
}
template<> PROTOBUF_NOINLINE ::CartesianAngle* Arena::CreateMaybeMessage< ::CartesianAngle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CartesianAngle >(arena);
}
template<> PROTOBUF_NOINLINE ::CartesianPosition3d* Arena::CreateMaybeMessage< ::CartesianPosition3d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CartesianPosition3d >(arena);
}
template<> PROTOBUF_NOINLINE ::CircularShape* Arena::CreateMaybeMessage< ::CircularShape >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CircularShape >(arena);
}
template<> PROTOBUF_NOINLINE ::EllipticalShape* Arena::CreateMaybeMessage< ::EllipticalShape >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EllipticalShape >(arena);
}
template<> PROTOBUF_NOINLINE ::Curvature* Arena::CreateMaybeMessage< ::Curvature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Curvature >(arena);
}
template<> PROTOBUF_NOINLINE ::Heading* Arena::CreateMaybeMessage< ::Heading >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Heading >(arena);
}
template<> PROTOBUF_NOINLINE ::IntersectionReferenceID* Arena::CreateMaybeMessage< ::IntersectionReferenceID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IntersectionReferenceID >(arena);
}
template<> PROTOBUF_NOINLINE ::LongitudinalAcceleration* Arena::CreateMaybeMessage< ::LongitudinalAcceleration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LongitudinalAcceleration >(arena);
}
template<> PROTOBUF_NOINLINE ::PolygonalShape* Arena::CreateMaybeMessage< ::PolygonalShape >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PolygonalShape >(arena);
}
template<> PROTOBUF_NOINLINE ::PositionConfidenceEllipse* Arena::CreateMaybeMessage< ::PositionConfidenceEllipse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PositionConfidenceEllipse >(arena);
}
template<> PROTOBUF_NOINLINE ::RadialShape* Arena::CreateMaybeMessage< ::RadialShape >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RadialShape >(arena);
}
template<> PROTOBUF_NOINLINE ::RadialShapes* Arena::CreateMaybeMessage< ::RadialShapes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RadialShapes >(arena);
}
template<> PROTOBUF_NOINLINE ::RadialShapeDetails* Arena::CreateMaybeMessage< ::RadialShapeDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RadialShapeDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::RectangularShape* Arena::CreateMaybeMessage< ::RectangularShape >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RectangularShape >(arena);
}
template<> PROTOBUF_NOINLINE ::ReferencePosition* Arena::CreateMaybeMessage< ::ReferencePosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReferencePosition >(arena);
}
template<> PROTOBUF_NOINLINE ::RoadSegmentReferenceID* Arena::CreateMaybeMessage< ::RoadSegmentReferenceID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoadSegmentReferenceID >(arena);
}
template<> PROTOBUF_NOINLINE ::Speed* Arena::CreateMaybeMessage< ::Speed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Speed >(arena);
}
template<> PROTOBUF_NOINLINE ::VehicleLength* Arena::CreateMaybeMessage< ::VehicleLength >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VehicleLength >(arena);
}
template<> PROTOBUF_NOINLINE ::VehicleWidth* Arena::CreateMaybeMessage< ::VehicleWidth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VehicleWidth >(arena);
}
template<> PROTOBUF_NOINLINE ::Wgs84Angle* Arena::CreateMaybeMessage< ::Wgs84Angle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Wgs84Angle >(arena);
}
template<> PROTOBUF_NOINLINE ::YawRate* Arena::CreateMaybeMessage< ::YawRate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::YawRate >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
