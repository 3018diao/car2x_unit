// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cpm_interface.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cpm_5finterface_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cpm_5finterface_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "itspduheader_interface.pb.h"
#include "etsi_its_cdd.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cpm_5finterface_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cpm_5finterface_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cpm_5finterface_2eproto;
class CPMMessage;
class CPMMessageDefaultTypeInternal;
extern CPMMessageDefaultTypeInternal _CPMMessage_default_instance_;
class CpmPayload;
class CpmPayloadDefaultTypeInternal;
extern CpmPayloadDefaultTypeInternal _CpmPayload_default_instance_;
class ManagmentContainer;
class ManagmentContainerDefaultTypeInternal;
extern ManagmentContainerDefaultTypeInternal _ManagmentContainer_default_instance_;
class OriginatingRSUContainer;
class OriginatingRSUContainerDefaultTypeInternal;
extern OriginatingRSUContainerDefaultTypeInternal _OriginatingRSUContainer_default_instance_;
class OriginatingStationsContainer;
class OriginatingStationsContainerDefaultTypeInternal;
extern OriginatingStationsContainerDefaultTypeInternal _OriginatingStationsContainer_default_instance_;
class OriginatingVehicleContainer;
class OriginatingVehicleContainerDefaultTypeInternal;
extern OriginatingVehicleContainerDefaultTypeInternal _OriginatingVehicleContainer_default_instance_;
class SensorInformationContainer;
class SensorInformationContainerDefaultTypeInternal;
extern SensorInformationContainerDefaultTypeInternal _SensorInformationContainer_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CPMMessage* Arena::CreateMaybeMessage<::CPMMessage>(Arena*);
template<> ::CpmPayload* Arena::CreateMaybeMessage<::CpmPayload>(Arena*);
template<> ::ManagmentContainer* Arena::CreateMaybeMessage<::ManagmentContainer>(Arena*);
template<> ::OriginatingRSUContainer* Arena::CreateMaybeMessage<::OriginatingRSUContainer>(Arena*);
template<> ::OriginatingStationsContainer* Arena::CreateMaybeMessage<::OriginatingStationsContainer>(Arena*);
template<> ::OriginatingVehicleContainer* Arena::CreateMaybeMessage<::OriginatingVehicleContainer>(Arena*);
template<> ::SensorInformationContainer* Arena::CreateMaybeMessage<::SensorInformationContainer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CPMMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPMMessage) */ {
 public:
  inline CPMMessage() : CPMMessage(nullptr) {};
  virtual ~CPMMessage();

  CPMMessage(const CPMMessage& from);
  CPMMessage(CPMMessage&& from) noexcept
    : CPMMessage() {
    *this = ::std::move(from);
  }

  inline CPMMessage& operator=(const CPMMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPMMessage& operator=(CPMMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CPMMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPMMessage* internal_default_instance() {
    return reinterpret_cast<const CPMMessage*>(
               &_CPMMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CPMMessage& a, CPMMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CPMMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPMMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPMMessage* New() const final {
    return CreateMaybeMessage<CPMMessage>(nullptr);
  }

  CPMMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPMMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CPMMessage& from);
  void MergeFrom(const CPMMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPMMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPMMessage";
  }
  protected:
  explicit CPMMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cpm_5finterface_2eproto);
    return ::descriptor_table_cpm_5finterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMgmtCntnrFieldNumber = 1,
    kCpmPayloadFieldNumber = 2,
  };
  // required .ManagmentContainer mgmt_cntnr = 1;
  bool has_mgmt_cntnr() const;
  private:
  bool _internal_has_mgmt_cntnr() const;
  public:
  void clear_mgmt_cntnr();
  const ::ManagmentContainer& mgmt_cntnr() const;
  ::ManagmentContainer* release_mgmt_cntnr();
  ::ManagmentContainer* mutable_mgmt_cntnr();
  void set_allocated_mgmt_cntnr(::ManagmentContainer* mgmt_cntnr);
  private:
  const ::ManagmentContainer& _internal_mgmt_cntnr() const;
  ::ManagmentContainer* _internal_mutable_mgmt_cntnr();
  public:
  void unsafe_arena_set_allocated_mgmt_cntnr(
      ::ManagmentContainer* mgmt_cntnr);
  ::ManagmentContainer* unsafe_arena_release_mgmt_cntnr();

  // required .CpmPayload cpm_payload = 2;
  bool has_cpm_payload() const;
  private:
  bool _internal_has_cpm_payload() const;
  public:
  void clear_cpm_payload();
  const ::CpmPayload& cpm_payload() const;
  ::CpmPayload* release_cpm_payload();
  ::CpmPayload* mutable_cpm_payload();
  void set_allocated_cpm_payload(::CpmPayload* cpm_payload);
  private:
  const ::CpmPayload& _internal_cpm_payload() const;
  ::CpmPayload* _internal_mutable_cpm_payload();
  public:
  void unsafe_arena_set_allocated_cpm_payload(
      ::CpmPayload* cpm_payload);
  ::CpmPayload* unsafe_arena_release_cpm_payload();

  // @@protoc_insertion_point(class_scope:CPMMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ManagmentContainer* mgmt_cntnr_;
  ::CpmPayload* cpm_payload_;
  friend struct ::TableStruct_cpm_5finterface_2eproto;
};
// -------------------------------------------------------------------

class ManagmentContainer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ManagmentContainer) */ {
 public:
  inline ManagmentContainer() : ManagmentContainer(nullptr) {};
  virtual ~ManagmentContainer();

  ManagmentContainer(const ManagmentContainer& from);
  ManagmentContainer(ManagmentContainer&& from) noexcept
    : ManagmentContainer() {
    *this = ::std::move(from);
  }

  inline ManagmentContainer& operator=(const ManagmentContainer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ManagmentContainer& operator=(ManagmentContainer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ManagmentContainer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ManagmentContainer* internal_default_instance() {
    return reinterpret_cast<const ManagmentContainer*>(
               &_ManagmentContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ManagmentContainer& a, ManagmentContainer& b) {
    a.Swap(&b);
  }
  inline void Swap(ManagmentContainer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ManagmentContainer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ManagmentContainer* New() const final {
    return CreateMaybeMessage<ManagmentContainer>(nullptr);
  }

  ManagmentContainer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ManagmentContainer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ManagmentContainer& from);
  void MergeFrom(const ManagmentContainer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ManagmentContainer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ManagmentContainer";
  }
  protected:
  explicit ManagmentContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cpm_5finterface_2eproto);
    return ::descriptor_table_cpm_5finterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRefPosFieldNumber = 1,
  };
  // required .ReferencePosition ref_pos = 1;
  bool has_ref_pos() const;
  private:
  bool _internal_has_ref_pos() const;
  public:
  void clear_ref_pos();
  const ::ReferencePosition& ref_pos() const;
  ::ReferencePosition* release_ref_pos();
  ::ReferencePosition* mutable_ref_pos();
  void set_allocated_ref_pos(::ReferencePosition* ref_pos);
  private:
  const ::ReferencePosition& _internal_ref_pos() const;
  ::ReferencePosition* _internal_mutable_ref_pos();
  public:
  void unsafe_arena_set_allocated_ref_pos(
      ::ReferencePosition* ref_pos);
  ::ReferencePosition* unsafe_arena_release_ref_pos();

  // @@protoc_insertion_point(class_scope:ManagmentContainer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ReferencePosition* ref_pos_;
  friend struct ::TableStruct_cpm_5finterface_2eproto;
};
// -------------------------------------------------------------------

class CpmPayload PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CpmPayload) */ {
 public:
  inline CpmPayload() : CpmPayload(nullptr) {};
  virtual ~CpmPayload();

  CpmPayload(const CpmPayload& from);
  CpmPayload(CpmPayload&& from) noexcept
    : CpmPayload() {
    *this = ::std::move(from);
  }

  inline CpmPayload& operator=(const CpmPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpmPayload& operator=(CpmPayload&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CpmPayload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CpmPayload* internal_default_instance() {
    return reinterpret_cast<const CpmPayload*>(
               &_CpmPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CpmPayload& a, CpmPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(CpmPayload* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CpmPayload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CpmPayload* New() const final {
    return CreateMaybeMessage<CpmPayload>(nullptr);
  }

  CpmPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CpmPayload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CpmPayload& from);
  void MergeFrom(const CpmPayload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CpmPayload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CpmPayload";
  }
  protected:
  explicit CpmPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cpm_5finterface_2eproto);
    return ::descriptor_table_cpm_5finterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgStnCntrFieldNumber = 1,
    kSnsrInfoCntrFieldNumber = 2,
  };
  // required .OriginatingStationsContainer org_stn_cntr = 1;
  bool has_org_stn_cntr() const;
  private:
  bool _internal_has_org_stn_cntr() const;
  public:
  void clear_org_stn_cntr();
  const ::OriginatingStationsContainer& org_stn_cntr() const;
  ::OriginatingStationsContainer* release_org_stn_cntr();
  ::OriginatingStationsContainer* mutable_org_stn_cntr();
  void set_allocated_org_stn_cntr(::OriginatingStationsContainer* org_stn_cntr);
  private:
  const ::OriginatingStationsContainer& _internal_org_stn_cntr() const;
  ::OriginatingStationsContainer* _internal_mutable_org_stn_cntr();
  public:
  void unsafe_arena_set_allocated_org_stn_cntr(
      ::OriginatingStationsContainer* org_stn_cntr);
  ::OriginatingStationsContainer* unsafe_arena_release_org_stn_cntr();

  // required .SensorInformationContainer snsr_info_cntr = 2;
  bool has_snsr_info_cntr() const;
  private:
  bool _internal_has_snsr_info_cntr() const;
  public:
  void clear_snsr_info_cntr();
  const ::SensorInformationContainer& snsr_info_cntr() const;
  ::SensorInformationContainer* release_snsr_info_cntr();
  ::SensorInformationContainer* mutable_snsr_info_cntr();
  void set_allocated_snsr_info_cntr(::SensorInformationContainer* snsr_info_cntr);
  private:
  const ::SensorInformationContainer& _internal_snsr_info_cntr() const;
  ::SensorInformationContainer* _internal_mutable_snsr_info_cntr();
  public:
  void unsafe_arena_set_allocated_snsr_info_cntr(
      ::SensorInformationContainer* snsr_info_cntr);
  ::SensorInformationContainer* unsafe_arena_release_snsr_info_cntr();

  // @@protoc_insertion_point(class_scope:CpmPayload)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::OriginatingStationsContainer* org_stn_cntr_;
  ::SensorInformationContainer* snsr_info_cntr_;
  friend struct ::TableStruct_cpm_5finterface_2eproto;
};
// -------------------------------------------------------------------

class OriginatingStationsContainer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OriginatingStationsContainer) */ {
 public:
  inline OriginatingStationsContainer() : OriginatingStationsContainer(nullptr) {};
  virtual ~OriginatingStationsContainer();

  OriginatingStationsContainer(const OriginatingStationsContainer& from);
  OriginatingStationsContainer(OriginatingStationsContainer&& from) noexcept
    : OriginatingStationsContainer() {
    *this = ::std::move(from);
  }

  inline OriginatingStationsContainer& operator=(const OriginatingStationsContainer& from) {
    CopyFrom(from);
    return *this;
  }
  inline OriginatingStationsContainer& operator=(OriginatingStationsContainer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OriginatingStationsContainer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OriginatingStationsContainer* internal_default_instance() {
    return reinterpret_cast<const OriginatingStationsContainer*>(
               &_OriginatingStationsContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OriginatingStationsContainer& a, OriginatingStationsContainer& b) {
    a.Swap(&b);
  }
  inline void Swap(OriginatingStationsContainer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OriginatingStationsContainer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OriginatingStationsContainer* New() const final {
    return CreateMaybeMessage<OriginatingStationsContainer>(nullptr);
  }

  OriginatingStationsContainer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OriginatingStationsContainer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OriginatingStationsContainer& from);
  void MergeFrom(const OriginatingStationsContainer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OriginatingStationsContainer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OriginatingStationsContainer";
  }
  protected:
  explicit OriginatingStationsContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cpm_5finterface_2eproto);
    return ::descriptor_table_cpm_5finterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgVehCntrFieldNumber = 1,
    kOrgRsuCntrFieldNumber = 2,
  };
  // optional .OriginatingVehicleContainer org_veh_cntr = 1;
  bool has_org_veh_cntr() const;
  private:
  bool _internal_has_org_veh_cntr() const;
  public:
  void clear_org_veh_cntr();
  const ::OriginatingVehicleContainer& org_veh_cntr() const;
  ::OriginatingVehicleContainer* release_org_veh_cntr();
  ::OriginatingVehicleContainer* mutable_org_veh_cntr();
  void set_allocated_org_veh_cntr(::OriginatingVehicleContainer* org_veh_cntr);
  private:
  const ::OriginatingVehicleContainer& _internal_org_veh_cntr() const;
  ::OriginatingVehicleContainer* _internal_mutable_org_veh_cntr();
  public:
  void unsafe_arena_set_allocated_org_veh_cntr(
      ::OriginatingVehicleContainer* org_veh_cntr);
  ::OriginatingVehicleContainer* unsafe_arena_release_org_veh_cntr();

  // optional .OriginatingRSUContainer org_rsu_cntr = 2;
  bool has_org_rsu_cntr() const;
  private:
  bool _internal_has_org_rsu_cntr() const;
  public:
  void clear_org_rsu_cntr();
  const ::OriginatingRSUContainer& org_rsu_cntr() const;
  ::OriginatingRSUContainer* release_org_rsu_cntr();
  ::OriginatingRSUContainer* mutable_org_rsu_cntr();
  void set_allocated_org_rsu_cntr(::OriginatingRSUContainer* org_rsu_cntr);
  private:
  const ::OriginatingRSUContainer& _internal_org_rsu_cntr() const;
  ::OriginatingRSUContainer* _internal_mutable_org_rsu_cntr();
  public:
  void unsafe_arena_set_allocated_org_rsu_cntr(
      ::OriginatingRSUContainer* org_rsu_cntr);
  ::OriginatingRSUContainer* unsafe_arena_release_org_rsu_cntr();

  // @@protoc_insertion_point(class_scope:OriginatingStationsContainer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::OriginatingVehicleContainer* org_veh_cntr_;
  ::OriginatingRSUContainer* org_rsu_cntr_;
  friend struct ::TableStruct_cpm_5finterface_2eproto;
};
// -------------------------------------------------------------------

class OriginatingVehicleContainer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OriginatingVehicleContainer) */ {
 public:
  inline OriginatingVehicleContainer() : OriginatingVehicleContainer(nullptr) {};
  virtual ~OriginatingVehicleContainer();

  OriginatingVehicleContainer(const OriginatingVehicleContainer& from);
  OriginatingVehicleContainer(OriginatingVehicleContainer&& from) noexcept
    : OriginatingVehicleContainer() {
    *this = ::std::move(from);
  }

  inline OriginatingVehicleContainer& operator=(const OriginatingVehicleContainer& from) {
    CopyFrom(from);
    return *this;
  }
  inline OriginatingVehicleContainer& operator=(OriginatingVehicleContainer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OriginatingVehicleContainer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OriginatingVehicleContainer* internal_default_instance() {
    return reinterpret_cast<const OriginatingVehicleContainer*>(
               &_OriginatingVehicleContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(OriginatingVehicleContainer& a, OriginatingVehicleContainer& b) {
    a.Swap(&b);
  }
  inline void Swap(OriginatingVehicleContainer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OriginatingVehicleContainer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OriginatingVehicleContainer* New() const final {
    return CreateMaybeMessage<OriginatingVehicleContainer>(nullptr);
  }

  OriginatingVehicleContainer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OriginatingVehicleContainer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OriginatingVehicleContainer& from);
  void MergeFrom(const OriginatingVehicleContainer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OriginatingVehicleContainer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OriginatingVehicleContainer";
  }
  protected:
  explicit OriginatingVehicleContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cpm_5finterface_2eproto);
    return ::descriptor_table_cpm_5finterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrientationAngleFieldNumber = 1,
    kPitchAngleFieldNumber = 2,
    kRollAngleFieldNumber = 3,
    kTrailerDatasetFieldNumber = 4,
  };
  // required .Wgs84Angle orientationAngle = 1;
  bool has_orientationangle() const;
  private:
  bool _internal_has_orientationangle() const;
  public:
  void clear_orientationangle();
  const ::Wgs84Angle& orientationangle() const;
  ::Wgs84Angle* release_orientationangle();
  ::Wgs84Angle* mutable_orientationangle();
  void set_allocated_orientationangle(::Wgs84Angle* orientationangle);
  private:
  const ::Wgs84Angle& _internal_orientationangle() const;
  ::Wgs84Angle* _internal_mutable_orientationangle();
  public:
  void unsafe_arena_set_allocated_orientationangle(
      ::Wgs84Angle* orientationangle);
  ::Wgs84Angle* unsafe_arena_release_orientationangle();

  // optional .CartesianAngle pitchAngle = 2;
  bool has_pitchangle() const;
  private:
  bool _internal_has_pitchangle() const;
  public:
  void clear_pitchangle();
  const ::CartesianAngle& pitchangle() const;
  ::CartesianAngle* release_pitchangle();
  ::CartesianAngle* mutable_pitchangle();
  void set_allocated_pitchangle(::CartesianAngle* pitchangle);
  private:
  const ::CartesianAngle& _internal_pitchangle() const;
  ::CartesianAngle* _internal_mutable_pitchangle();
  public:
  void unsafe_arena_set_allocated_pitchangle(
      ::CartesianAngle* pitchangle);
  ::CartesianAngle* unsafe_arena_release_pitchangle();

  // optional .CartesianAngle rollAngle = 3;
  bool has_rollangle() const;
  private:
  bool _internal_has_rollangle() const;
  public:
  void clear_rollangle();
  const ::CartesianAngle& rollangle() const;
  ::CartesianAngle* release_rollangle();
  ::CartesianAngle* mutable_rollangle();
  void set_allocated_rollangle(::CartesianAngle* rollangle);
  private:
  const ::CartesianAngle& _internal_rollangle() const;
  ::CartesianAngle* _internal_mutable_rollangle();
  public:
  void unsafe_arena_set_allocated_rollangle(
      ::CartesianAngle* rollangle);
  ::CartesianAngle* unsafe_arena_release_rollangle();

  // optional int64 trailerDataset = 4;
  bool has_trailerdataset() const;
  private:
  bool _internal_has_trailerdataset() const;
  public:
  void clear_trailerdataset();
  ::PROTOBUF_NAMESPACE_ID::int64 trailerdataset() const;
  void set_trailerdataset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_trailerdataset() const;
  void _internal_set_trailerdataset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:OriginatingVehicleContainer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Wgs84Angle* orientationangle_;
  ::CartesianAngle* pitchangle_;
  ::CartesianAngle* rollangle_;
  ::PROTOBUF_NAMESPACE_ID::int64 trailerdataset_;
  friend struct ::TableStruct_cpm_5finterface_2eproto;
};
// -------------------------------------------------------------------

class OriginatingRSUContainer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OriginatingRSUContainer) */ {
 public:
  inline OriginatingRSUContainer() : OriginatingRSUContainer(nullptr) {};
  virtual ~OriginatingRSUContainer();

  OriginatingRSUContainer(const OriginatingRSUContainer& from);
  OriginatingRSUContainer(OriginatingRSUContainer&& from) noexcept
    : OriginatingRSUContainer() {
    *this = ::std::move(from);
  }

  inline OriginatingRSUContainer& operator=(const OriginatingRSUContainer& from) {
    CopyFrom(from);
    return *this;
  }
  inline OriginatingRSUContainer& operator=(OriginatingRSUContainer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OriginatingRSUContainer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OriginatingRSUContainer* internal_default_instance() {
    return reinterpret_cast<const OriginatingRSUContainer*>(
               &_OriginatingRSUContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(OriginatingRSUContainer& a, OriginatingRSUContainer& b) {
    a.Swap(&b);
  }
  inline void Swap(OriginatingRSUContainer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OriginatingRSUContainer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OriginatingRSUContainer* New() const final {
    return CreateMaybeMessage<OriginatingRSUContainer>(nullptr);
  }

  OriginatingRSUContainer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OriginatingRSUContainer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OriginatingRSUContainer& from);
  void MergeFrom(const OriginatingRSUContainer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OriginatingRSUContainer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OriginatingRSUContainer";
  }
  protected:
  explicit OriginatingRSUContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cpm_5finterface_2eproto);
    return ::descriptor_table_cpm_5finterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoadsegmentFieldNumber = 1,
    kIntersectionFieldNumber = 2,
  };
  // required .RoadSegmentReferenceID roadsegment = 1;
  bool has_roadsegment() const;
  private:
  bool _internal_has_roadsegment() const;
  public:
  void clear_roadsegment();
  const ::RoadSegmentReferenceID& roadsegment() const;
  ::RoadSegmentReferenceID* release_roadsegment();
  ::RoadSegmentReferenceID* mutable_roadsegment();
  void set_allocated_roadsegment(::RoadSegmentReferenceID* roadsegment);
  private:
  const ::RoadSegmentReferenceID& _internal_roadsegment() const;
  ::RoadSegmentReferenceID* _internal_mutable_roadsegment();
  public:
  void unsafe_arena_set_allocated_roadsegment(
      ::RoadSegmentReferenceID* roadsegment);
  ::RoadSegmentReferenceID* unsafe_arena_release_roadsegment();

  // required .IntersectionReferenceID intersection = 2;
  bool has_intersection() const;
  private:
  bool _internal_has_intersection() const;
  public:
  void clear_intersection();
  const ::IntersectionReferenceID& intersection() const;
  ::IntersectionReferenceID* release_intersection();
  ::IntersectionReferenceID* mutable_intersection();
  void set_allocated_intersection(::IntersectionReferenceID* intersection);
  private:
  const ::IntersectionReferenceID& _internal_intersection() const;
  ::IntersectionReferenceID* _internal_mutable_intersection();
  public:
  void unsafe_arena_set_allocated_intersection(
      ::IntersectionReferenceID* intersection);
  ::IntersectionReferenceID* unsafe_arena_release_intersection();

  // @@protoc_insertion_point(class_scope:OriginatingRSUContainer)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::RoadSegmentReferenceID* roadsegment_;
  ::IntersectionReferenceID* intersection_;
  friend struct ::TableStruct_cpm_5finterface_2eproto;
};
// -------------------------------------------------------------------

class SensorInformationContainer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SensorInformationContainer) */ {
 public:
  inline SensorInformationContainer() : SensorInformationContainer(nullptr) {};
  virtual ~SensorInformationContainer();

  SensorInformationContainer(const SensorInformationContainer& from);
  SensorInformationContainer(SensorInformationContainer&& from) noexcept
    : SensorInformationContainer() {
    *this = ::std::move(from);
  }

  inline SensorInformationContainer& operator=(const SensorInformationContainer& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorInformationContainer& operator=(SensorInformationContainer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorInformationContainer& default_instance();

  enum ShapeCase {
    kRectangular = 3,
    kCircular = 4,
    kPolygonal = 5,
    kElliptical = 6,
    kRadial = 7,
    kRadialShapes = 8,
    SHAPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorInformationContainer* internal_default_instance() {
    return reinterpret_cast<const SensorInformationContainer*>(
               &_SensorInformationContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SensorInformationContainer& a, SensorInformationContainer& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorInformationContainer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SensorInformationContainer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorInformationContainer* New() const final {
    return CreateMaybeMessage<SensorInformationContainer>(nullptr);
  }

  SensorInformationContainer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorInformationContainer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorInformationContainer& from);
  void MergeFrom(const SensorInformationContainer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorInformationContainer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SensorInformationContainer";
  }
  protected:
  explicit SensorInformationContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cpm_5finterface_2eproto);
    return ::descriptor_table_cpm_5finterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSensorIDFieldNumber = 1,
    kShadowingappliesFieldNumber = 10,
    kSensorTypeFieldNumber = 2,
    kPerceptionRegionConfFieldNumber = 9,
    kRectangularFieldNumber = 3,
    kCircularFieldNumber = 4,
    kPolygonalFieldNumber = 5,
    kEllipticalFieldNumber = 6,
    kRadialFieldNumber = 7,
    kRadialShapesFieldNumber = 8,
  };
  // required int64 sensorID = 1;
  bool has_sensorid() const;
  private:
  bool _internal_has_sensorid() const;
  public:
  void clear_sensorid();
  ::PROTOBUF_NAMESPACE_ID::int64 sensorid() const;
  void set_sensorid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sensorid() const;
  void _internal_set_sensorid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required bool shadowingapplies = 10;
  bool has_shadowingapplies() const;
  private:
  bool _internal_has_shadowingapplies() const;
  public:
  void clear_shadowingapplies();
  bool shadowingapplies() const;
  void set_shadowingapplies(bool value);
  private:
  bool _internal_shadowingapplies() const;
  void _internal_set_shadowingapplies(bool value);
  public:

  // required .SensorType sensor_type = 2;
  bool has_sensor_type() const;
  private:
  bool _internal_has_sensor_type() const;
  public:
  void clear_sensor_type();
  ::SensorType sensor_type() const;
  void set_sensor_type(::SensorType value);
  private:
  ::SensorType _internal_sensor_type() const;
  void _internal_set_sensor_type(::SensorType value);
  public:

  // optional uint32 perception_region_conf = 9;
  bool has_perception_region_conf() const;
  private:
  bool _internal_has_perception_region_conf() const;
  public:
  void clear_perception_region_conf();
  ::PROTOBUF_NAMESPACE_ID::uint32 perception_region_conf() const;
  void set_perception_region_conf(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_perception_region_conf() const;
  void _internal_set_perception_region_conf(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .RectangularShape rectangular = 3;
  bool has_rectangular() const;
  private:
  bool _internal_has_rectangular() const;
  public:
  void clear_rectangular();
  const ::RectangularShape& rectangular() const;
  ::RectangularShape* release_rectangular();
  ::RectangularShape* mutable_rectangular();
  void set_allocated_rectangular(::RectangularShape* rectangular);
  private:
  const ::RectangularShape& _internal_rectangular() const;
  ::RectangularShape* _internal_mutable_rectangular();
  public:
  void unsafe_arena_set_allocated_rectangular(
      ::RectangularShape* rectangular);
  ::RectangularShape* unsafe_arena_release_rectangular();

  // .CircularShape circular = 4;
  bool has_circular() const;
  private:
  bool _internal_has_circular() const;
  public:
  void clear_circular();
  const ::CircularShape& circular() const;
  ::CircularShape* release_circular();
  ::CircularShape* mutable_circular();
  void set_allocated_circular(::CircularShape* circular);
  private:
  const ::CircularShape& _internal_circular() const;
  ::CircularShape* _internal_mutable_circular();
  public:
  void unsafe_arena_set_allocated_circular(
      ::CircularShape* circular);
  ::CircularShape* unsafe_arena_release_circular();

  // .PolygonalShape polygonal = 5;
  bool has_polygonal() const;
  private:
  bool _internal_has_polygonal() const;
  public:
  void clear_polygonal();
  const ::PolygonalShape& polygonal() const;
  ::PolygonalShape* release_polygonal();
  ::PolygonalShape* mutable_polygonal();
  void set_allocated_polygonal(::PolygonalShape* polygonal);
  private:
  const ::PolygonalShape& _internal_polygonal() const;
  ::PolygonalShape* _internal_mutable_polygonal();
  public:
  void unsafe_arena_set_allocated_polygonal(
      ::PolygonalShape* polygonal);
  ::PolygonalShape* unsafe_arena_release_polygonal();

  // .EllipticalShape elliptical = 6;
  bool has_elliptical() const;
  private:
  bool _internal_has_elliptical() const;
  public:
  void clear_elliptical();
  const ::EllipticalShape& elliptical() const;
  ::EllipticalShape* release_elliptical();
  ::EllipticalShape* mutable_elliptical();
  void set_allocated_elliptical(::EllipticalShape* elliptical);
  private:
  const ::EllipticalShape& _internal_elliptical() const;
  ::EllipticalShape* _internal_mutable_elliptical();
  public:
  void unsafe_arena_set_allocated_elliptical(
      ::EllipticalShape* elliptical);
  ::EllipticalShape* unsafe_arena_release_elliptical();

  // .RadialShape radial = 7;
  bool has_radial() const;
  private:
  bool _internal_has_radial() const;
  public:
  void clear_radial();
  const ::RadialShape& radial() const;
  ::RadialShape* release_radial();
  ::RadialShape* mutable_radial();
  void set_allocated_radial(::RadialShape* radial);
  private:
  const ::RadialShape& _internal_radial() const;
  ::RadialShape* _internal_mutable_radial();
  public:
  void unsafe_arena_set_allocated_radial(
      ::RadialShape* radial);
  ::RadialShape* unsafe_arena_release_radial();

  // .RadialShapes radialShapes = 8;
  bool has_radialshapes() const;
  private:
  bool _internal_has_radialshapes() const;
  public:
  void clear_radialshapes();
  const ::RadialShapes& radialshapes() const;
  ::RadialShapes* release_radialshapes();
  ::RadialShapes* mutable_radialshapes();
  void set_allocated_radialshapes(::RadialShapes* radialshapes);
  private:
  const ::RadialShapes& _internal_radialshapes() const;
  ::RadialShapes* _internal_mutable_radialshapes();
  public:
  void unsafe_arena_set_allocated_radialshapes(
      ::RadialShapes* radialshapes);
  ::RadialShapes* unsafe_arena_release_radialshapes();

  void clear_shape();
  ShapeCase shape_case() const;
  // @@protoc_insertion_point(class_scope:SensorInformationContainer)
 private:
  class _Internal;
  void set_has_rectangular();
  void set_has_circular();
  void set_has_polygonal();
  void set_has_elliptical();
  void set_has_radial();
  void set_has_radialshapes();

  inline bool has_shape() const;
  inline void clear_has_shape();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 sensorid_;
  bool shadowingapplies_;
  int sensor_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 perception_region_conf_;
  union ShapeUnion {
    ShapeUnion() {}
    ::RectangularShape* rectangular_;
    ::CircularShape* circular_;
    ::PolygonalShape* polygonal_;
    ::EllipticalShape* elliptical_;
    ::RadialShape* radial_;
    ::RadialShapes* radialshapes_;
  } shape_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_cpm_5finterface_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CPMMessage

// required .ManagmentContainer mgmt_cntnr = 1;
inline bool CPMMessage::_internal_has_mgmt_cntnr() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || mgmt_cntnr_ != nullptr);
  return value;
}
inline bool CPMMessage::has_mgmt_cntnr() const {
  return _internal_has_mgmt_cntnr();
}
inline void CPMMessage::clear_mgmt_cntnr() {
  if (mgmt_cntnr_ != nullptr) mgmt_cntnr_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ManagmentContainer& CPMMessage::_internal_mgmt_cntnr() const {
  const ::ManagmentContainer* p = mgmt_cntnr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ManagmentContainer*>(
      &::_ManagmentContainer_default_instance_);
}
inline const ::ManagmentContainer& CPMMessage::mgmt_cntnr() const {
  // @@protoc_insertion_point(field_get:CPMMessage.mgmt_cntnr)
  return _internal_mgmt_cntnr();
}
inline void CPMMessage::unsafe_arena_set_allocated_mgmt_cntnr(
    ::ManagmentContainer* mgmt_cntnr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mgmt_cntnr_);
  }
  mgmt_cntnr_ = mgmt_cntnr;
  if (mgmt_cntnr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CPMMessage.mgmt_cntnr)
}
inline ::ManagmentContainer* CPMMessage::release_mgmt_cntnr() {
  auto temp = unsafe_arena_release_mgmt_cntnr();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ManagmentContainer* CPMMessage::unsafe_arena_release_mgmt_cntnr() {
  // @@protoc_insertion_point(field_release:CPMMessage.mgmt_cntnr)
  _has_bits_[0] &= ~0x00000001u;
  ::ManagmentContainer* temp = mgmt_cntnr_;
  mgmt_cntnr_ = nullptr;
  return temp;
}
inline ::ManagmentContainer* CPMMessage::_internal_mutable_mgmt_cntnr() {
  _has_bits_[0] |= 0x00000001u;
  if (mgmt_cntnr_ == nullptr) {
    auto* p = CreateMaybeMessage<::ManagmentContainer>(GetArena());
    mgmt_cntnr_ = p;
  }
  return mgmt_cntnr_;
}
inline ::ManagmentContainer* CPMMessage::mutable_mgmt_cntnr() {
  // @@protoc_insertion_point(field_mutable:CPMMessage.mgmt_cntnr)
  return _internal_mutable_mgmt_cntnr();
}
inline void CPMMessage::set_allocated_mgmt_cntnr(::ManagmentContainer* mgmt_cntnr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mgmt_cntnr_;
  }
  if (mgmt_cntnr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mgmt_cntnr);
    if (message_arena != submessage_arena) {
      mgmt_cntnr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mgmt_cntnr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mgmt_cntnr_ = mgmt_cntnr;
  // @@protoc_insertion_point(field_set_allocated:CPMMessage.mgmt_cntnr)
}

// required .CpmPayload cpm_payload = 2;
inline bool CPMMessage::_internal_has_cpm_payload() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || cpm_payload_ != nullptr);
  return value;
}
inline bool CPMMessage::has_cpm_payload() const {
  return _internal_has_cpm_payload();
}
inline void CPMMessage::clear_cpm_payload() {
  if (cpm_payload_ != nullptr) cpm_payload_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CpmPayload& CPMMessage::_internal_cpm_payload() const {
  const ::CpmPayload* p = cpm_payload_;
  return p != nullptr ? *p : *reinterpret_cast<const ::CpmPayload*>(
      &::_CpmPayload_default_instance_);
}
inline const ::CpmPayload& CPMMessage::cpm_payload() const {
  // @@protoc_insertion_point(field_get:CPMMessage.cpm_payload)
  return _internal_cpm_payload();
}
inline void CPMMessage::unsafe_arena_set_allocated_cpm_payload(
    ::CpmPayload* cpm_payload) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cpm_payload_);
  }
  cpm_payload_ = cpm_payload;
  if (cpm_payload) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CPMMessage.cpm_payload)
}
inline ::CpmPayload* CPMMessage::release_cpm_payload() {
  auto temp = unsafe_arena_release_cpm_payload();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CpmPayload* CPMMessage::unsafe_arena_release_cpm_payload() {
  // @@protoc_insertion_point(field_release:CPMMessage.cpm_payload)
  _has_bits_[0] &= ~0x00000002u;
  ::CpmPayload* temp = cpm_payload_;
  cpm_payload_ = nullptr;
  return temp;
}
inline ::CpmPayload* CPMMessage::_internal_mutable_cpm_payload() {
  _has_bits_[0] |= 0x00000002u;
  if (cpm_payload_ == nullptr) {
    auto* p = CreateMaybeMessage<::CpmPayload>(GetArena());
    cpm_payload_ = p;
  }
  return cpm_payload_;
}
inline ::CpmPayload* CPMMessage::mutable_cpm_payload() {
  // @@protoc_insertion_point(field_mutable:CPMMessage.cpm_payload)
  return _internal_mutable_cpm_payload();
}
inline void CPMMessage::set_allocated_cpm_payload(::CpmPayload* cpm_payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cpm_payload_;
  }
  if (cpm_payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cpm_payload);
    if (message_arena != submessage_arena) {
      cpm_payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpm_payload, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cpm_payload_ = cpm_payload;
  // @@protoc_insertion_point(field_set_allocated:CPMMessage.cpm_payload)
}

// -------------------------------------------------------------------

// ManagmentContainer

// required .ReferencePosition ref_pos = 1;
inline bool ManagmentContainer::_internal_has_ref_pos() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ref_pos_ != nullptr);
  return value;
}
inline bool ManagmentContainer::has_ref_pos() const {
  return _internal_has_ref_pos();
}
inline const ::ReferencePosition& ManagmentContainer::_internal_ref_pos() const {
  const ::ReferencePosition* p = ref_pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ReferencePosition*>(
      &::_ReferencePosition_default_instance_);
}
inline const ::ReferencePosition& ManagmentContainer::ref_pos() const {
  // @@protoc_insertion_point(field_get:ManagmentContainer.ref_pos)
  return _internal_ref_pos();
}
inline void ManagmentContainer::unsafe_arena_set_allocated_ref_pos(
    ::ReferencePosition* ref_pos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ref_pos_);
  }
  ref_pos_ = ref_pos;
  if (ref_pos) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ManagmentContainer.ref_pos)
}
inline ::ReferencePosition* ManagmentContainer::release_ref_pos() {
  auto temp = unsafe_arena_release_ref_pos();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ReferencePosition* ManagmentContainer::unsafe_arena_release_ref_pos() {
  // @@protoc_insertion_point(field_release:ManagmentContainer.ref_pos)
  _has_bits_[0] &= ~0x00000001u;
  ::ReferencePosition* temp = ref_pos_;
  ref_pos_ = nullptr;
  return temp;
}
inline ::ReferencePosition* ManagmentContainer::_internal_mutable_ref_pos() {
  _has_bits_[0] |= 0x00000001u;
  if (ref_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::ReferencePosition>(GetArena());
    ref_pos_ = p;
  }
  return ref_pos_;
}
inline ::ReferencePosition* ManagmentContainer::mutable_ref_pos() {
  // @@protoc_insertion_point(field_mutable:ManagmentContainer.ref_pos)
  return _internal_mutable_ref_pos();
}
inline void ManagmentContainer::set_allocated_ref_pos(::ReferencePosition* ref_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ref_pos_);
  }
  if (ref_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ref_pos)->GetArena();
    if (message_arena != submessage_arena) {
      ref_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ref_pos, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ref_pos_ = ref_pos;
  // @@protoc_insertion_point(field_set_allocated:ManagmentContainer.ref_pos)
}

// -------------------------------------------------------------------

// CpmPayload

// required .OriginatingStationsContainer org_stn_cntr = 1;
inline bool CpmPayload::_internal_has_org_stn_cntr() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || org_stn_cntr_ != nullptr);
  return value;
}
inline bool CpmPayload::has_org_stn_cntr() const {
  return _internal_has_org_stn_cntr();
}
inline void CpmPayload::clear_org_stn_cntr() {
  if (org_stn_cntr_ != nullptr) org_stn_cntr_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::OriginatingStationsContainer& CpmPayload::_internal_org_stn_cntr() const {
  const ::OriginatingStationsContainer* p = org_stn_cntr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OriginatingStationsContainer*>(
      &::_OriginatingStationsContainer_default_instance_);
}
inline const ::OriginatingStationsContainer& CpmPayload::org_stn_cntr() const {
  // @@protoc_insertion_point(field_get:CpmPayload.org_stn_cntr)
  return _internal_org_stn_cntr();
}
inline void CpmPayload::unsafe_arena_set_allocated_org_stn_cntr(
    ::OriginatingStationsContainer* org_stn_cntr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(org_stn_cntr_);
  }
  org_stn_cntr_ = org_stn_cntr;
  if (org_stn_cntr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CpmPayload.org_stn_cntr)
}
inline ::OriginatingStationsContainer* CpmPayload::release_org_stn_cntr() {
  auto temp = unsafe_arena_release_org_stn_cntr();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::OriginatingStationsContainer* CpmPayload::unsafe_arena_release_org_stn_cntr() {
  // @@protoc_insertion_point(field_release:CpmPayload.org_stn_cntr)
  _has_bits_[0] &= ~0x00000001u;
  ::OriginatingStationsContainer* temp = org_stn_cntr_;
  org_stn_cntr_ = nullptr;
  return temp;
}
inline ::OriginatingStationsContainer* CpmPayload::_internal_mutable_org_stn_cntr() {
  _has_bits_[0] |= 0x00000001u;
  if (org_stn_cntr_ == nullptr) {
    auto* p = CreateMaybeMessage<::OriginatingStationsContainer>(GetArena());
    org_stn_cntr_ = p;
  }
  return org_stn_cntr_;
}
inline ::OriginatingStationsContainer* CpmPayload::mutable_org_stn_cntr() {
  // @@protoc_insertion_point(field_mutable:CpmPayload.org_stn_cntr)
  return _internal_mutable_org_stn_cntr();
}
inline void CpmPayload::set_allocated_org_stn_cntr(::OriginatingStationsContainer* org_stn_cntr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete org_stn_cntr_;
  }
  if (org_stn_cntr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(org_stn_cntr);
    if (message_arena != submessage_arena) {
      org_stn_cntr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, org_stn_cntr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  org_stn_cntr_ = org_stn_cntr;
  // @@protoc_insertion_point(field_set_allocated:CpmPayload.org_stn_cntr)
}

// required .SensorInformationContainer snsr_info_cntr = 2;
inline bool CpmPayload::_internal_has_snsr_info_cntr() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || snsr_info_cntr_ != nullptr);
  return value;
}
inline bool CpmPayload::has_snsr_info_cntr() const {
  return _internal_has_snsr_info_cntr();
}
inline void CpmPayload::clear_snsr_info_cntr() {
  if (snsr_info_cntr_ != nullptr) snsr_info_cntr_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::SensorInformationContainer& CpmPayload::_internal_snsr_info_cntr() const {
  const ::SensorInformationContainer* p = snsr_info_cntr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SensorInformationContainer*>(
      &::_SensorInformationContainer_default_instance_);
}
inline const ::SensorInformationContainer& CpmPayload::snsr_info_cntr() const {
  // @@protoc_insertion_point(field_get:CpmPayload.snsr_info_cntr)
  return _internal_snsr_info_cntr();
}
inline void CpmPayload::unsafe_arena_set_allocated_snsr_info_cntr(
    ::SensorInformationContainer* snsr_info_cntr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(snsr_info_cntr_);
  }
  snsr_info_cntr_ = snsr_info_cntr;
  if (snsr_info_cntr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CpmPayload.snsr_info_cntr)
}
inline ::SensorInformationContainer* CpmPayload::release_snsr_info_cntr() {
  auto temp = unsafe_arena_release_snsr_info_cntr();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SensorInformationContainer* CpmPayload::unsafe_arena_release_snsr_info_cntr() {
  // @@protoc_insertion_point(field_release:CpmPayload.snsr_info_cntr)
  _has_bits_[0] &= ~0x00000002u;
  ::SensorInformationContainer* temp = snsr_info_cntr_;
  snsr_info_cntr_ = nullptr;
  return temp;
}
inline ::SensorInformationContainer* CpmPayload::_internal_mutable_snsr_info_cntr() {
  _has_bits_[0] |= 0x00000002u;
  if (snsr_info_cntr_ == nullptr) {
    auto* p = CreateMaybeMessage<::SensorInformationContainer>(GetArena());
    snsr_info_cntr_ = p;
  }
  return snsr_info_cntr_;
}
inline ::SensorInformationContainer* CpmPayload::mutable_snsr_info_cntr() {
  // @@protoc_insertion_point(field_mutable:CpmPayload.snsr_info_cntr)
  return _internal_mutable_snsr_info_cntr();
}
inline void CpmPayload::set_allocated_snsr_info_cntr(::SensorInformationContainer* snsr_info_cntr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete snsr_info_cntr_;
  }
  if (snsr_info_cntr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(snsr_info_cntr);
    if (message_arena != submessage_arena) {
      snsr_info_cntr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snsr_info_cntr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  snsr_info_cntr_ = snsr_info_cntr;
  // @@protoc_insertion_point(field_set_allocated:CpmPayload.snsr_info_cntr)
}

// -------------------------------------------------------------------

// OriginatingStationsContainer

// optional .OriginatingVehicleContainer org_veh_cntr = 1;
inline bool OriginatingStationsContainer::_internal_has_org_veh_cntr() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || org_veh_cntr_ != nullptr);
  return value;
}
inline bool OriginatingStationsContainer::has_org_veh_cntr() const {
  return _internal_has_org_veh_cntr();
}
inline void OriginatingStationsContainer::clear_org_veh_cntr() {
  if (org_veh_cntr_ != nullptr) org_veh_cntr_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::OriginatingVehicleContainer& OriginatingStationsContainer::_internal_org_veh_cntr() const {
  const ::OriginatingVehicleContainer* p = org_veh_cntr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OriginatingVehicleContainer*>(
      &::_OriginatingVehicleContainer_default_instance_);
}
inline const ::OriginatingVehicleContainer& OriginatingStationsContainer::org_veh_cntr() const {
  // @@protoc_insertion_point(field_get:OriginatingStationsContainer.org_veh_cntr)
  return _internal_org_veh_cntr();
}
inline void OriginatingStationsContainer::unsafe_arena_set_allocated_org_veh_cntr(
    ::OriginatingVehicleContainer* org_veh_cntr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(org_veh_cntr_);
  }
  org_veh_cntr_ = org_veh_cntr;
  if (org_veh_cntr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OriginatingStationsContainer.org_veh_cntr)
}
inline ::OriginatingVehicleContainer* OriginatingStationsContainer::release_org_veh_cntr() {
  auto temp = unsafe_arena_release_org_veh_cntr();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::OriginatingVehicleContainer* OriginatingStationsContainer::unsafe_arena_release_org_veh_cntr() {
  // @@protoc_insertion_point(field_release:OriginatingStationsContainer.org_veh_cntr)
  _has_bits_[0] &= ~0x00000001u;
  ::OriginatingVehicleContainer* temp = org_veh_cntr_;
  org_veh_cntr_ = nullptr;
  return temp;
}
inline ::OriginatingVehicleContainer* OriginatingStationsContainer::_internal_mutable_org_veh_cntr() {
  _has_bits_[0] |= 0x00000001u;
  if (org_veh_cntr_ == nullptr) {
    auto* p = CreateMaybeMessage<::OriginatingVehicleContainer>(GetArena());
    org_veh_cntr_ = p;
  }
  return org_veh_cntr_;
}
inline ::OriginatingVehicleContainer* OriginatingStationsContainer::mutable_org_veh_cntr() {
  // @@protoc_insertion_point(field_mutable:OriginatingStationsContainer.org_veh_cntr)
  return _internal_mutable_org_veh_cntr();
}
inline void OriginatingStationsContainer::set_allocated_org_veh_cntr(::OriginatingVehicleContainer* org_veh_cntr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete org_veh_cntr_;
  }
  if (org_veh_cntr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(org_veh_cntr);
    if (message_arena != submessage_arena) {
      org_veh_cntr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, org_veh_cntr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  org_veh_cntr_ = org_veh_cntr;
  // @@protoc_insertion_point(field_set_allocated:OriginatingStationsContainer.org_veh_cntr)
}

// optional .OriginatingRSUContainer org_rsu_cntr = 2;
inline bool OriginatingStationsContainer::_internal_has_org_rsu_cntr() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || org_rsu_cntr_ != nullptr);
  return value;
}
inline bool OriginatingStationsContainer::has_org_rsu_cntr() const {
  return _internal_has_org_rsu_cntr();
}
inline void OriginatingStationsContainer::clear_org_rsu_cntr() {
  if (org_rsu_cntr_ != nullptr) org_rsu_cntr_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::OriginatingRSUContainer& OriginatingStationsContainer::_internal_org_rsu_cntr() const {
  const ::OriginatingRSUContainer* p = org_rsu_cntr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OriginatingRSUContainer*>(
      &::_OriginatingRSUContainer_default_instance_);
}
inline const ::OriginatingRSUContainer& OriginatingStationsContainer::org_rsu_cntr() const {
  // @@protoc_insertion_point(field_get:OriginatingStationsContainer.org_rsu_cntr)
  return _internal_org_rsu_cntr();
}
inline void OriginatingStationsContainer::unsafe_arena_set_allocated_org_rsu_cntr(
    ::OriginatingRSUContainer* org_rsu_cntr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(org_rsu_cntr_);
  }
  org_rsu_cntr_ = org_rsu_cntr;
  if (org_rsu_cntr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OriginatingStationsContainer.org_rsu_cntr)
}
inline ::OriginatingRSUContainer* OriginatingStationsContainer::release_org_rsu_cntr() {
  auto temp = unsafe_arena_release_org_rsu_cntr();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::OriginatingRSUContainer* OriginatingStationsContainer::unsafe_arena_release_org_rsu_cntr() {
  // @@protoc_insertion_point(field_release:OriginatingStationsContainer.org_rsu_cntr)
  _has_bits_[0] &= ~0x00000002u;
  ::OriginatingRSUContainer* temp = org_rsu_cntr_;
  org_rsu_cntr_ = nullptr;
  return temp;
}
inline ::OriginatingRSUContainer* OriginatingStationsContainer::_internal_mutable_org_rsu_cntr() {
  _has_bits_[0] |= 0x00000002u;
  if (org_rsu_cntr_ == nullptr) {
    auto* p = CreateMaybeMessage<::OriginatingRSUContainer>(GetArena());
    org_rsu_cntr_ = p;
  }
  return org_rsu_cntr_;
}
inline ::OriginatingRSUContainer* OriginatingStationsContainer::mutable_org_rsu_cntr() {
  // @@protoc_insertion_point(field_mutable:OriginatingStationsContainer.org_rsu_cntr)
  return _internal_mutable_org_rsu_cntr();
}
inline void OriginatingStationsContainer::set_allocated_org_rsu_cntr(::OriginatingRSUContainer* org_rsu_cntr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete org_rsu_cntr_;
  }
  if (org_rsu_cntr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(org_rsu_cntr);
    if (message_arena != submessage_arena) {
      org_rsu_cntr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, org_rsu_cntr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  org_rsu_cntr_ = org_rsu_cntr;
  // @@protoc_insertion_point(field_set_allocated:OriginatingStationsContainer.org_rsu_cntr)
}

// -------------------------------------------------------------------

// OriginatingVehicleContainer

// required .Wgs84Angle orientationAngle = 1;
inline bool OriginatingVehicleContainer::_internal_has_orientationangle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || orientationangle_ != nullptr);
  return value;
}
inline bool OriginatingVehicleContainer::has_orientationangle() const {
  return _internal_has_orientationangle();
}
inline const ::Wgs84Angle& OriginatingVehicleContainer::_internal_orientationangle() const {
  const ::Wgs84Angle* p = orientationangle_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Wgs84Angle*>(
      &::_Wgs84Angle_default_instance_);
}
inline const ::Wgs84Angle& OriginatingVehicleContainer::orientationangle() const {
  // @@protoc_insertion_point(field_get:OriginatingVehicleContainer.orientationAngle)
  return _internal_orientationangle();
}
inline void OriginatingVehicleContainer::unsafe_arena_set_allocated_orientationangle(
    ::Wgs84Angle* orientationangle) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientationangle_);
  }
  orientationangle_ = orientationangle;
  if (orientationangle) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OriginatingVehicleContainer.orientationAngle)
}
inline ::Wgs84Angle* OriginatingVehicleContainer::release_orientationangle() {
  auto temp = unsafe_arena_release_orientationangle();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Wgs84Angle* OriginatingVehicleContainer::unsafe_arena_release_orientationangle() {
  // @@protoc_insertion_point(field_release:OriginatingVehicleContainer.orientationAngle)
  _has_bits_[0] &= ~0x00000001u;
  ::Wgs84Angle* temp = orientationangle_;
  orientationangle_ = nullptr;
  return temp;
}
inline ::Wgs84Angle* OriginatingVehicleContainer::_internal_mutable_orientationangle() {
  _has_bits_[0] |= 0x00000001u;
  if (orientationangle_ == nullptr) {
    auto* p = CreateMaybeMessage<::Wgs84Angle>(GetArena());
    orientationangle_ = p;
  }
  return orientationangle_;
}
inline ::Wgs84Angle* OriginatingVehicleContainer::mutable_orientationangle() {
  // @@protoc_insertion_point(field_mutable:OriginatingVehicleContainer.orientationAngle)
  return _internal_mutable_orientationangle();
}
inline void OriginatingVehicleContainer::set_allocated_orientationangle(::Wgs84Angle* orientationangle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientationangle_);
  }
  if (orientationangle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientationangle)->GetArena();
    if (message_arena != submessage_arena) {
      orientationangle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientationangle, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  orientationangle_ = orientationangle;
  // @@protoc_insertion_point(field_set_allocated:OriginatingVehicleContainer.orientationAngle)
}

// optional .CartesianAngle pitchAngle = 2;
inline bool OriginatingVehicleContainer::_internal_has_pitchangle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || pitchangle_ != nullptr);
  return value;
}
inline bool OriginatingVehicleContainer::has_pitchangle() const {
  return _internal_has_pitchangle();
}
inline const ::CartesianAngle& OriginatingVehicleContainer::_internal_pitchangle() const {
  const ::CartesianAngle* p = pitchangle_;
  return p != nullptr ? *p : *reinterpret_cast<const ::CartesianAngle*>(
      &::_CartesianAngle_default_instance_);
}
inline const ::CartesianAngle& OriginatingVehicleContainer::pitchangle() const {
  // @@protoc_insertion_point(field_get:OriginatingVehicleContainer.pitchAngle)
  return _internal_pitchangle();
}
inline void OriginatingVehicleContainer::unsafe_arena_set_allocated_pitchangle(
    ::CartesianAngle* pitchangle) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pitchangle_);
  }
  pitchangle_ = pitchangle;
  if (pitchangle) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OriginatingVehicleContainer.pitchAngle)
}
inline ::CartesianAngle* OriginatingVehicleContainer::release_pitchangle() {
  auto temp = unsafe_arena_release_pitchangle();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CartesianAngle* OriginatingVehicleContainer::unsafe_arena_release_pitchangle() {
  // @@protoc_insertion_point(field_release:OriginatingVehicleContainer.pitchAngle)
  _has_bits_[0] &= ~0x00000002u;
  ::CartesianAngle* temp = pitchangle_;
  pitchangle_ = nullptr;
  return temp;
}
inline ::CartesianAngle* OriginatingVehicleContainer::_internal_mutable_pitchangle() {
  _has_bits_[0] |= 0x00000002u;
  if (pitchangle_ == nullptr) {
    auto* p = CreateMaybeMessage<::CartesianAngle>(GetArena());
    pitchangle_ = p;
  }
  return pitchangle_;
}
inline ::CartesianAngle* OriginatingVehicleContainer::mutable_pitchangle() {
  // @@protoc_insertion_point(field_mutable:OriginatingVehicleContainer.pitchAngle)
  return _internal_mutable_pitchangle();
}
inline void OriginatingVehicleContainer::set_allocated_pitchangle(::CartesianAngle* pitchangle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pitchangle_);
  }
  if (pitchangle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pitchangle)->GetArena();
    if (message_arena != submessage_arena) {
      pitchangle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pitchangle, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pitchangle_ = pitchangle;
  // @@protoc_insertion_point(field_set_allocated:OriginatingVehicleContainer.pitchAngle)
}

// optional .CartesianAngle rollAngle = 3;
inline bool OriginatingVehicleContainer::_internal_has_rollangle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || rollangle_ != nullptr);
  return value;
}
inline bool OriginatingVehicleContainer::has_rollangle() const {
  return _internal_has_rollangle();
}
inline const ::CartesianAngle& OriginatingVehicleContainer::_internal_rollangle() const {
  const ::CartesianAngle* p = rollangle_;
  return p != nullptr ? *p : *reinterpret_cast<const ::CartesianAngle*>(
      &::_CartesianAngle_default_instance_);
}
inline const ::CartesianAngle& OriginatingVehicleContainer::rollangle() const {
  // @@protoc_insertion_point(field_get:OriginatingVehicleContainer.rollAngle)
  return _internal_rollangle();
}
inline void OriginatingVehicleContainer::unsafe_arena_set_allocated_rollangle(
    ::CartesianAngle* rollangle) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rollangle_);
  }
  rollangle_ = rollangle;
  if (rollangle) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OriginatingVehicleContainer.rollAngle)
}
inline ::CartesianAngle* OriginatingVehicleContainer::release_rollangle() {
  auto temp = unsafe_arena_release_rollangle();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CartesianAngle* OriginatingVehicleContainer::unsafe_arena_release_rollangle() {
  // @@protoc_insertion_point(field_release:OriginatingVehicleContainer.rollAngle)
  _has_bits_[0] &= ~0x00000004u;
  ::CartesianAngle* temp = rollangle_;
  rollangle_ = nullptr;
  return temp;
}
inline ::CartesianAngle* OriginatingVehicleContainer::_internal_mutable_rollangle() {
  _has_bits_[0] |= 0x00000004u;
  if (rollangle_ == nullptr) {
    auto* p = CreateMaybeMessage<::CartesianAngle>(GetArena());
    rollangle_ = p;
  }
  return rollangle_;
}
inline ::CartesianAngle* OriginatingVehicleContainer::mutable_rollangle() {
  // @@protoc_insertion_point(field_mutable:OriginatingVehicleContainer.rollAngle)
  return _internal_mutable_rollangle();
}
inline void OriginatingVehicleContainer::set_allocated_rollangle(::CartesianAngle* rollangle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rollangle_);
  }
  if (rollangle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rollangle)->GetArena();
    if (message_arena != submessage_arena) {
      rollangle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rollangle, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  rollangle_ = rollangle;
  // @@protoc_insertion_point(field_set_allocated:OriginatingVehicleContainer.rollAngle)
}

// optional int64 trailerDataset = 4;
inline bool OriginatingVehicleContainer::_internal_has_trailerdataset() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool OriginatingVehicleContainer::has_trailerdataset() const {
  return _internal_has_trailerdataset();
}
inline void OriginatingVehicleContainer::clear_trailerdataset() {
  trailerdataset_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OriginatingVehicleContainer::_internal_trailerdataset() const {
  return trailerdataset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OriginatingVehicleContainer::trailerdataset() const {
  // @@protoc_insertion_point(field_get:OriginatingVehicleContainer.trailerDataset)
  return _internal_trailerdataset();
}
inline void OriginatingVehicleContainer::_internal_set_trailerdataset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  trailerdataset_ = value;
}
inline void OriginatingVehicleContainer::set_trailerdataset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_trailerdataset(value);
  // @@protoc_insertion_point(field_set:OriginatingVehicleContainer.trailerDataset)
}

// -------------------------------------------------------------------

// OriginatingRSUContainer

// required .RoadSegmentReferenceID roadsegment = 1;
inline bool OriginatingRSUContainer::_internal_has_roadsegment() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || roadsegment_ != nullptr);
  return value;
}
inline bool OriginatingRSUContainer::has_roadsegment() const {
  return _internal_has_roadsegment();
}
inline const ::RoadSegmentReferenceID& OriginatingRSUContainer::_internal_roadsegment() const {
  const ::RoadSegmentReferenceID* p = roadsegment_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoadSegmentReferenceID*>(
      &::_RoadSegmentReferenceID_default_instance_);
}
inline const ::RoadSegmentReferenceID& OriginatingRSUContainer::roadsegment() const {
  // @@protoc_insertion_point(field_get:OriginatingRSUContainer.roadsegment)
  return _internal_roadsegment();
}
inline void OriginatingRSUContainer::unsafe_arena_set_allocated_roadsegment(
    ::RoadSegmentReferenceID* roadsegment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roadsegment_);
  }
  roadsegment_ = roadsegment;
  if (roadsegment) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OriginatingRSUContainer.roadsegment)
}
inline ::RoadSegmentReferenceID* OriginatingRSUContainer::release_roadsegment() {
  auto temp = unsafe_arena_release_roadsegment();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoadSegmentReferenceID* OriginatingRSUContainer::unsafe_arena_release_roadsegment() {
  // @@protoc_insertion_point(field_release:OriginatingRSUContainer.roadsegment)
  _has_bits_[0] &= ~0x00000001u;
  ::RoadSegmentReferenceID* temp = roadsegment_;
  roadsegment_ = nullptr;
  return temp;
}
inline ::RoadSegmentReferenceID* OriginatingRSUContainer::_internal_mutable_roadsegment() {
  _has_bits_[0] |= 0x00000001u;
  if (roadsegment_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoadSegmentReferenceID>(GetArena());
    roadsegment_ = p;
  }
  return roadsegment_;
}
inline ::RoadSegmentReferenceID* OriginatingRSUContainer::mutable_roadsegment() {
  // @@protoc_insertion_point(field_mutable:OriginatingRSUContainer.roadsegment)
  return _internal_mutable_roadsegment();
}
inline void OriginatingRSUContainer::set_allocated_roadsegment(::RoadSegmentReferenceID* roadsegment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(roadsegment_);
  }
  if (roadsegment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roadsegment)->GetArena();
    if (message_arena != submessage_arena) {
      roadsegment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roadsegment, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  roadsegment_ = roadsegment;
  // @@protoc_insertion_point(field_set_allocated:OriginatingRSUContainer.roadsegment)
}

// required .IntersectionReferenceID intersection = 2;
inline bool OriginatingRSUContainer::_internal_has_intersection() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || intersection_ != nullptr);
  return value;
}
inline bool OriginatingRSUContainer::has_intersection() const {
  return _internal_has_intersection();
}
inline const ::IntersectionReferenceID& OriginatingRSUContainer::_internal_intersection() const {
  const ::IntersectionReferenceID* p = intersection_;
  return p != nullptr ? *p : *reinterpret_cast<const ::IntersectionReferenceID*>(
      &::_IntersectionReferenceID_default_instance_);
}
inline const ::IntersectionReferenceID& OriginatingRSUContainer::intersection() const {
  // @@protoc_insertion_point(field_get:OriginatingRSUContainer.intersection)
  return _internal_intersection();
}
inline void OriginatingRSUContainer::unsafe_arena_set_allocated_intersection(
    ::IntersectionReferenceID* intersection) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(intersection_);
  }
  intersection_ = intersection;
  if (intersection) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OriginatingRSUContainer.intersection)
}
inline ::IntersectionReferenceID* OriginatingRSUContainer::release_intersection() {
  auto temp = unsafe_arena_release_intersection();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IntersectionReferenceID* OriginatingRSUContainer::unsafe_arena_release_intersection() {
  // @@protoc_insertion_point(field_release:OriginatingRSUContainer.intersection)
  _has_bits_[0] &= ~0x00000002u;
  ::IntersectionReferenceID* temp = intersection_;
  intersection_ = nullptr;
  return temp;
}
inline ::IntersectionReferenceID* OriginatingRSUContainer::_internal_mutable_intersection() {
  _has_bits_[0] |= 0x00000002u;
  if (intersection_ == nullptr) {
    auto* p = CreateMaybeMessage<::IntersectionReferenceID>(GetArena());
    intersection_ = p;
  }
  return intersection_;
}
inline ::IntersectionReferenceID* OriginatingRSUContainer::mutable_intersection() {
  // @@protoc_insertion_point(field_mutable:OriginatingRSUContainer.intersection)
  return _internal_mutable_intersection();
}
inline void OriginatingRSUContainer::set_allocated_intersection(::IntersectionReferenceID* intersection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(intersection_);
  }
  if (intersection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(intersection)->GetArena();
    if (message_arena != submessage_arena) {
      intersection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intersection, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  intersection_ = intersection;
  // @@protoc_insertion_point(field_set_allocated:OriginatingRSUContainer.intersection)
}

// -------------------------------------------------------------------

// SensorInformationContainer

// required int64 sensorID = 1;
inline bool SensorInformationContainer::_internal_has_sensorid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SensorInformationContainer::has_sensorid() const {
  return _internal_has_sensorid();
}
inline void SensorInformationContainer::clear_sensorid() {
  sensorid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SensorInformationContainer::_internal_sensorid() const {
  return sensorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SensorInformationContainer::sensorid() const {
  // @@protoc_insertion_point(field_get:SensorInformationContainer.sensorID)
  return _internal_sensorid();
}
inline void SensorInformationContainer::_internal_set_sensorid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  sensorid_ = value;
}
inline void SensorInformationContainer::set_sensorid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sensorid(value);
  // @@protoc_insertion_point(field_set:SensorInformationContainer.sensorID)
}

// required .SensorType sensor_type = 2;
inline bool SensorInformationContainer::_internal_has_sensor_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SensorInformationContainer::has_sensor_type() const {
  return _internal_has_sensor_type();
}
inline void SensorInformationContainer::clear_sensor_type() {
  sensor_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::SensorType SensorInformationContainer::_internal_sensor_type() const {
  return static_cast< ::SensorType >(sensor_type_);
}
inline ::SensorType SensorInformationContainer::sensor_type() const {
  // @@protoc_insertion_point(field_get:SensorInformationContainer.sensor_type)
  return _internal_sensor_type();
}
inline void SensorInformationContainer::_internal_set_sensor_type(::SensorType value) {
  assert(::SensorType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  sensor_type_ = value;
}
inline void SensorInformationContainer::set_sensor_type(::SensorType value) {
  _internal_set_sensor_type(value);
  // @@protoc_insertion_point(field_set:SensorInformationContainer.sensor_type)
}

// .RectangularShape rectangular = 3;
inline bool SensorInformationContainer::_internal_has_rectangular() const {
  return shape_case() == kRectangular;
}
inline bool SensorInformationContainer::has_rectangular() const {
  return _internal_has_rectangular();
}
inline void SensorInformationContainer::set_has_rectangular() {
  _oneof_case_[0] = kRectangular;
}
inline ::RectangularShape* SensorInformationContainer::release_rectangular() {
  // @@protoc_insertion_point(field_release:SensorInformationContainer.rectangular)
  if (_internal_has_rectangular()) {
    clear_has_shape();
      ::RectangularShape* temp = shape_.rectangular_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    shape_.rectangular_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::RectangularShape& SensorInformationContainer::_internal_rectangular() const {
  return _internal_has_rectangular()
      ? *shape_.rectangular_
      : *reinterpret_cast< ::RectangularShape*>(&::_RectangularShape_default_instance_);
}
inline const ::RectangularShape& SensorInformationContainer::rectangular() const {
  // @@protoc_insertion_point(field_get:SensorInformationContainer.rectangular)
  return _internal_rectangular();
}
inline ::RectangularShape* SensorInformationContainer::unsafe_arena_release_rectangular() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SensorInformationContainer.rectangular)
  if (_internal_has_rectangular()) {
    clear_has_shape();
    ::RectangularShape* temp = shape_.rectangular_;
    shape_.rectangular_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SensorInformationContainer::unsafe_arena_set_allocated_rectangular(::RectangularShape* rectangular) {
  clear_shape();
  if (rectangular) {
    set_has_rectangular();
    shape_.rectangular_ = rectangular;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SensorInformationContainer.rectangular)
}
inline ::RectangularShape* SensorInformationContainer::_internal_mutable_rectangular() {
  if (!_internal_has_rectangular()) {
    clear_shape();
    set_has_rectangular();
    shape_.rectangular_ = CreateMaybeMessage< ::RectangularShape >(GetArena());
  }
  return shape_.rectangular_;
}
inline ::RectangularShape* SensorInformationContainer::mutable_rectangular() {
  // @@protoc_insertion_point(field_mutable:SensorInformationContainer.rectangular)
  return _internal_mutable_rectangular();
}

// .CircularShape circular = 4;
inline bool SensorInformationContainer::_internal_has_circular() const {
  return shape_case() == kCircular;
}
inline bool SensorInformationContainer::has_circular() const {
  return _internal_has_circular();
}
inline void SensorInformationContainer::set_has_circular() {
  _oneof_case_[0] = kCircular;
}
inline ::CircularShape* SensorInformationContainer::release_circular() {
  // @@protoc_insertion_point(field_release:SensorInformationContainer.circular)
  if (_internal_has_circular()) {
    clear_has_shape();
      ::CircularShape* temp = shape_.circular_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    shape_.circular_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CircularShape& SensorInformationContainer::_internal_circular() const {
  return _internal_has_circular()
      ? *shape_.circular_
      : *reinterpret_cast< ::CircularShape*>(&::_CircularShape_default_instance_);
}
inline const ::CircularShape& SensorInformationContainer::circular() const {
  // @@protoc_insertion_point(field_get:SensorInformationContainer.circular)
  return _internal_circular();
}
inline ::CircularShape* SensorInformationContainer::unsafe_arena_release_circular() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SensorInformationContainer.circular)
  if (_internal_has_circular()) {
    clear_has_shape();
    ::CircularShape* temp = shape_.circular_;
    shape_.circular_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SensorInformationContainer::unsafe_arena_set_allocated_circular(::CircularShape* circular) {
  clear_shape();
  if (circular) {
    set_has_circular();
    shape_.circular_ = circular;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SensorInformationContainer.circular)
}
inline ::CircularShape* SensorInformationContainer::_internal_mutable_circular() {
  if (!_internal_has_circular()) {
    clear_shape();
    set_has_circular();
    shape_.circular_ = CreateMaybeMessage< ::CircularShape >(GetArena());
  }
  return shape_.circular_;
}
inline ::CircularShape* SensorInformationContainer::mutable_circular() {
  // @@protoc_insertion_point(field_mutable:SensorInformationContainer.circular)
  return _internal_mutable_circular();
}

// .PolygonalShape polygonal = 5;
inline bool SensorInformationContainer::_internal_has_polygonal() const {
  return shape_case() == kPolygonal;
}
inline bool SensorInformationContainer::has_polygonal() const {
  return _internal_has_polygonal();
}
inline void SensorInformationContainer::set_has_polygonal() {
  _oneof_case_[0] = kPolygonal;
}
inline ::PolygonalShape* SensorInformationContainer::release_polygonal() {
  // @@protoc_insertion_point(field_release:SensorInformationContainer.polygonal)
  if (_internal_has_polygonal()) {
    clear_has_shape();
      ::PolygonalShape* temp = shape_.polygonal_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    shape_.polygonal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PolygonalShape& SensorInformationContainer::_internal_polygonal() const {
  return _internal_has_polygonal()
      ? *shape_.polygonal_
      : *reinterpret_cast< ::PolygonalShape*>(&::_PolygonalShape_default_instance_);
}
inline const ::PolygonalShape& SensorInformationContainer::polygonal() const {
  // @@protoc_insertion_point(field_get:SensorInformationContainer.polygonal)
  return _internal_polygonal();
}
inline ::PolygonalShape* SensorInformationContainer::unsafe_arena_release_polygonal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SensorInformationContainer.polygonal)
  if (_internal_has_polygonal()) {
    clear_has_shape();
    ::PolygonalShape* temp = shape_.polygonal_;
    shape_.polygonal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SensorInformationContainer::unsafe_arena_set_allocated_polygonal(::PolygonalShape* polygonal) {
  clear_shape();
  if (polygonal) {
    set_has_polygonal();
    shape_.polygonal_ = polygonal;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SensorInformationContainer.polygonal)
}
inline ::PolygonalShape* SensorInformationContainer::_internal_mutable_polygonal() {
  if (!_internal_has_polygonal()) {
    clear_shape();
    set_has_polygonal();
    shape_.polygonal_ = CreateMaybeMessage< ::PolygonalShape >(GetArena());
  }
  return shape_.polygonal_;
}
inline ::PolygonalShape* SensorInformationContainer::mutable_polygonal() {
  // @@protoc_insertion_point(field_mutable:SensorInformationContainer.polygonal)
  return _internal_mutable_polygonal();
}

// .EllipticalShape elliptical = 6;
inline bool SensorInformationContainer::_internal_has_elliptical() const {
  return shape_case() == kElliptical;
}
inline bool SensorInformationContainer::has_elliptical() const {
  return _internal_has_elliptical();
}
inline void SensorInformationContainer::set_has_elliptical() {
  _oneof_case_[0] = kElliptical;
}
inline ::EllipticalShape* SensorInformationContainer::release_elliptical() {
  // @@protoc_insertion_point(field_release:SensorInformationContainer.elliptical)
  if (_internal_has_elliptical()) {
    clear_has_shape();
      ::EllipticalShape* temp = shape_.elliptical_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    shape_.elliptical_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::EllipticalShape& SensorInformationContainer::_internal_elliptical() const {
  return _internal_has_elliptical()
      ? *shape_.elliptical_
      : *reinterpret_cast< ::EllipticalShape*>(&::_EllipticalShape_default_instance_);
}
inline const ::EllipticalShape& SensorInformationContainer::elliptical() const {
  // @@protoc_insertion_point(field_get:SensorInformationContainer.elliptical)
  return _internal_elliptical();
}
inline ::EllipticalShape* SensorInformationContainer::unsafe_arena_release_elliptical() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SensorInformationContainer.elliptical)
  if (_internal_has_elliptical()) {
    clear_has_shape();
    ::EllipticalShape* temp = shape_.elliptical_;
    shape_.elliptical_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SensorInformationContainer::unsafe_arena_set_allocated_elliptical(::EllipticalShape* elliptical) {
  clear_shape();
  if (elliptical) {
    set_has_elliptical();
    shape_.elliptical_ = elliptical;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SensorInformationContainer.elliptical)
}
inline ::EllipticalShape* SensorInformationContainer::_internal_mutable_elliptical() {
  if (!_internal_has_elliptical()) {
    clear_shape();
    set_has_elliptical();
    shape_.elliptical_ = CreateMaybeMessage< ::EllipticalShape >(GetArena());
  }
  return shape_.elliptical_;
}
inline ::EllipticalShape* SensorInformationContainer::mutable_elliptical() {
  // @@protoc_insertion_point(field_mutable:SensorInformationContainer.elliptical)
  return _internal_mutable_elliptical();
}

// .RadialShape radial = 7;
inline bool SensorInformationContainer::_internal_has_radial() const {
  return shape_case() == kRadial;
}
inline bool SensorInformationContainer::has_radial() const {
  return _internal_has_radial();
}
inline void SensorInformationContainer::set_has_radial() {
  _oneof_case_[0] = kRadial;
}
inline ::RadialShape* SensorInformationContainer::release_radial() {
  // @@protoc_insertion_point(field_release:SensorInformationContainer.radial)
  if (_internal_has_radial()) {
    clear_has_shape();
      ::RadialShape* temp = shape_.radial_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    shape_.radial_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::RadialShape& SensorInformationContainer::_internal_radial() const {
  return _internal_has_radial()
      ? *shape_.radial_
      : *reinterpret_cast< ::RadialShape*>(&::_RadialShape_default_instance_);
}
inline const ::RadialShape& SensorInformationContainer::radial() const {
  // @@protoc_insertion_point(field_get:SensorInformationContainer.radial)
  return _internal_radial();
}
inline ::RadialShape* SensorInformationContainer::unsafe_arena_release_radial() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SensorInformationContainer.radial)
  if (_internal_has_radial()) {
    clear_has_shape();
    ::RadialShape* temp = shape_.radial_;
    shape_.radial_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SensorInformationContainer::unsafe_arena_set_allocated_radial(::RadialShape* radial) {
  clear_shape();
  if (radial) {
    set_has_radial();
    shape_.radial_ = radial;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SensorInformationContainer.radial)
}
inline ::RadialShape* SensorInformationContainer::_internal_mutable_radial() {
  if (!_internal_has_radial()) {
    clear_shape();
    set_has_radial();
    shape_.radial_ = CreateMaybeMessage< ::RadialShape >(GetArena());
  }
  return shape_.radial_;
}
inline ::RadialShape* SensorInformationContainer::mutable_radial() {
  // @@protoc_insertion_point(field_mutable:SensorInformationContainer.radial)
  return _internal_mutable_radial();
}

// .RadialShapes radialShapes = 8;
inline bool SensorInformationContainer::_internal_has_radialshapes() const {
  return shape_case() == kRadialShapes;
}
inline bool SensorInformationContainer::has_radialshapes() const {
  return _internal_has_radialshapes();
}
inline void SensorInformationContainer::set_has_radialshapes() {
  _oneof_case_[0] = kRadialShapes;
}
inline ::RadialShapes* SensorInformationContainer::release_radialshapes() {
  // @@protoc_insertion_point(field_release:SensorInformationContainer.radialShapes)
  if (_internal_has_radialshapes()) {
    clear_has_shape();
      ::RadialShapes* temp = shape_.radialshapes_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    shape_.radialshapes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::RadialShapes& SensorInformationContainer::_internal_radialshapes() const {
  return _internal_has_radialshapes()
      ? *shape_.radialshapes_
      : *reinterpret_cast< ::RadialShapes*>(&::_RadialShapes_default_instance_);
}
inline const ::RadialShapes& SensorInformationContainer::radialshapes() const {
  // @@protoc_insertion_point(field_get:SensorInformationContainer.radialShapes)
  return _internal_radialshapes();
}
inline ::RadialShapes* SensorInformationContainer::unsafe_arena_release_radialshapes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SensorInformationContainer.radialShapes)
  if (_internal_has_radialshapes()) {
    clear_has_shape();
    ::RadialShapes* temp = shape_.radialshapes_;
    shape_.radialshapes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SensorInformationContainer::unsafe_arena_set_allocated_radialshapes(::RadialShapes* radialshapes) {
  clear_shape();
  if (radialshapes) {
    set_has_radialshapes();
    shape_.radialshapes_ = radialshapes;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SensorInformationContainer.radialShapes)
}
inline ::RadialShapes* SensorInformationContainer::_internal_mutable_radialshapes() {
  if (!_internal_has_radialshapes()) {
    clear_shape();
    set_has_radialshapes();
    shape_.radialshapes_ = CreateMaybeMessage< ::RadialShapes >(GetArena());
  }
  return shape_.radialshapes_;
}
inline ::RadialShapes* SensorInformationContainer::mutable_radialshapes() {
  // @@protoc_insertion_point(field_mutable:SensorInformationContainer.radialShapes)
  return _internal_mutable_radialshapes();
}

// optional uint32 perception_region_conf = 9;
inline bool SensorInformationContainer::_internal_has_perception_region_conf() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SensorInformationContainer::has_perception_region_conf() const {
  return _internal_has_perception_region_conf();
}
inline void SensorInformationContainer::clear_perception_region_conf() {
  perception_region_conf_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SensorInformationContainer::_internal_perception_region_conf() const {
  return perception_region_conf_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SensorInformationContainer::perception_region_conf() const {
  // @@protoc_insertion_point(field_get:SensorInformationContainer.perception_region_conf)
  return _internal_perception_region_conf();
}
inline void SensorInformationContainer::_internal_set_perception_region_conf(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  perception_region_conf_ = value;
}
inline void SensorInformationContainer::set_perception_region_conf(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_perception_region_conf(value);
  // @@protoc_insertion_point(field_set:SensorInformationContainer.perception_region_conf)
}

// required bool shadowingapplies = 10;
inline bool SensorInformationContainer::_internal_has_shadowingapplies() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SensorInformationContainer::has_shadowingapplies() const {
  return _internal_has_shadowingapplies();
}
inline void SensorInformationContainer::clear_shadowingapplies() {
  shadowingapplies_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool SensorInformationContainer::_internal_shadowingapplies() const {
  return shadowingapplies_;
}
inline bool SensorInformationContainer::shadowingapplies() const {
  // @@protoc_insertion_point(field_get:SensorInformationContainer.shadowingapplies)
  return _internal_shadowingapplies();
}
inline void SensorInformationContainer::_internal_set_shadowingapplies(bool value) {
  _has_bits_[0] |= 0x00000002u;
  shadowingapplies_ = value;
}
inline void SensorInformationContainer::set_shadowingapplies(bool value) {
  _internal_set_shadowingapplies(value);
  // @@protoc_insertion_point(field_set:SensorInformationContainer.shadowingapplies)
}

inline bool SensorInformationContainer::has_shape() const {
  return shape_case() != SHAPE_NOT_SET;
}
inline void SensorInformationContainer::clear_has_shape() {
  _oneof_case_[0] = SHAPE_NOT_SET;
}
inline SensorInformationContainer::ShapeCase SensorInformationContainer::shape_case() const {
  return SensorInformationContainer::ShapeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cpm_5finterface_2eproto
