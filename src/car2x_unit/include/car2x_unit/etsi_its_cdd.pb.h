// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: etsi_its_cdd.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_etsi_5fits_5fcdd_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_etsi_5fits_5fcdd_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_etsi_5fits_5fcdd_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_etsi_5fits_5fcdd_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[22]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_etsi_5fits_5fcdd_2eproto;
class Altitude;
class AltitudeDefaultTypeInternal;
extern AltitudeDefaultTypeInternal _Altitude_default_instance_;
class CartesianAngle;
class CartesianAngleDefaultTypeInternal;
extern CartesianAngleDefaultTypeInternal _CartesianAngle_default_instance_;
class CartesianPosition3d;
class CartesianPosition3dDefaultTypeInternal;
extern CartesianPosition3dDefaultTypeInternal _CartesianPosition3d_default_instance_;
class CircularShape;
class CircularShapeDefaultTypeInternal;
extern CircularShapeDefaultTypeInternal _CircularShape_default_instance_;
class Curvature;
class CurvatureDefaultTypeInternal;
extern CurvatureDefaultTypeInternal _Curvature_default_instance_;
class EllipticalShape;
class EllipticalShapeDefaultTypeInternal;
extern EllipticalShapeDefaultTypeInternal _EllipticalShape_default_instance_;
class Heading;
class HeadingDefaultTypeInternal;
extern HeadingDefaultTypeInternal _Heading_default_instance_;
class IntersectionReferenceID;
class IntersectionReferenceIDDefaultTypeInternal;
extern IntersectionReferenceIDDefaultTypeInternal _IntersectionReferenceID_default_instance_;
class LongitudinalAcceleration;
class LongitudinalAccelerationDefaultTypeInternal;
extern LongitudinalAccelerationDefaultTypeInternal _LongitudinalAcceleration_default_instance_;
class PolygonalShape;
class PolygonalShapeDefaultTypeInternal;
extern PolygonalShapeDefaultTypeInternal _PolygonalShape_default_instance_;
class PositionConfidenceEllipse;
class PositionConfidenceEllipseDefaultTypeInternal;
extern PositionConfidenceEllipseDefaultTypeInternal _PositionConfidenceEllipse_default_instance_;
class RadialShape;
class RadialShapeDefaultTypeInternal;
extern RadialShapeDefaultTypeInternal _RadialShape_default_instance_;
class RadialShapeDetails;
class RadialShapeDetailsDefaultTypeInternal;
extern RadialShapeDetailsDefaultTypeInternal _RadialShapeDetails_default_instance_;
class RadialShapes;
class RadialShapesDefaultTypeInternal;
extern RadialShapesDefaultTypeInternal _RadialShapes_default_instance_;
class RectangularShape;
class RectangularShapeDefaultTypeInternal;
extern RectangularShapeDefaultTypeInternal _RectangularShape_default_instance_;
class ReferencePosition;
class ReferencePositionDefaultTypeInternal;
extern ReferencePositionDefaultTypeInternal _ReferencePosition_default_instance_;
class RoadSegmentReferenceID;
class RoadSegmentReferenceIDDefaultTypeInternal;
extern RoadSegmentReferenceIDDefaultTypeInternal _RoadSegmentReferenceID_default_instance_;
class Speed;
class SpeedDefaultTypeInternal;
extern SpeedDefaultTypeInternal _Speed_default_instance_;
class VehicleLength;
class VehicleLengthDefaultTypeInternal;
extern VehicleLengthDefaultTypeInternal _VehicleLength_default_instance_;
class VehicleWidth;
class VehicleWidthDefaultTypeInternal;
extern VehicleWidthDefaultTypeInternal _VehicleWidth_default_instance_;
class Wgs84Angle;
class Wgs84AngleDefaultTypeInternal;
extern Wgs84AngleDefaultTypeInternal _Wgs84Angle_default_instance_;
class YawRate;
class YawRateDefaultTypeInternal;
extern YawRateDefaultTypeInternal _YawRate_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Altitude* Arena::CreateMaybeMessage<::Altitude>(Arena*);
template<> ::CartesianAngle* Arena::CreateMaybeMessage<::CartesianAngle>(Arena*);
template<> ::CartesianPosition3d* Arena::CreateMaybeMessage<::CartesianPosition3d>(Arena*);
template<> ::CircularShape* Arena::CreateMaybeMessage<::CircularShape>(Arena*);
template<> ::Curvature* Arena::CreateMaybeMessage<::Curvature>(Arena*);
template<> ::EllipticalShape* Arena::CreateMaybeMessage<::EllipticalShape>(Arena*);
template<> ::Heading* Arena::CreateMaybeMessage<::Heading>(Arena*);
template<> ::IntersectionReferenceID* Arena::CreateMaybeMessage<::IntersectionReferenceID>(Arena*);
template<> ::LongitudinalAcceleration* Arena::CreateMaybeMessage<::LongitudinalAcceleration>(Arena*);
template<> ::PolygonalShape* Arena::CreateMaybeMessage<::PolygonalShape>(Arena*);
template<> ::PositionConfidenceEllipse* Arena::CreateMaybeMessage<::PositionConfidenceEllipse>(Arena*);
template<> ::RadialShape* Arena::CreateMaybeMessage<::RadialShape>(Arena*);
template<> ::RadialShapeDetails* Arena::CreateMaybeMessage<::RadialShapeDetails>(Arena*);
template<> ::RadialShapes* Arena::CreateMaybeMessage<::RadialShapes>(Arena*);
template<> ::RectangularShape* Arena::CreateMaybeMessage<::RectangularShape>(Arena*);
template<> ::ReferencePosition* Arena::CreateMaybeMessage<::ReferencePosition>(Arena*);
template<> ::RoadSegmentReferenceID* Arena::CreateMaybeMessage<::RoadSegmentReferenceID>(Arena*);
template<> ::Speed* Arena::CreateMaybeMessage<::Speed>(Arena*);
template<> ::VehicleLength* Arena::CreateMaybeMessage<::VehicleLength>(Arena*);
template<> ::VehicleWidth* Arena::CreateMaybeMessage<::VehicleWidth>(Arena*);
template<> ::Wgs84Angle* Arena::CreateMaybeMessage<::Wgs84Angle>(Arena*);
template<> ::YawRate* Arena::CreateMaybeMessage<::YawRate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum CurvatureCalculationMode : int {
  CCM_YAWRATEUSED = 0,
  CCM_YAWRATENOTUSED = 1,
  CCM_UNAVAILABLE = 2
};
bool CurvatureCalculationMode_IsValid(int value);
constexpr CurvatureCalculationMode CurvatureCalculationMode_MIN = CCM_YAWRATEUSED;
constexpr CurvatureCalculationMode CurvatureCalculationMode_MAX = CCM_UNAVAILABLE;
constexpr int CurvatureCalculationMode_ARRAYSIZE = CurvatureCalculationMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CurvatureCalculationMode_descriptor();
template<typename T>
inline const std::string& CurvatureCalculationMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CurvatureCalculationMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CurvatureCalculationMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CurvatureCalculationMode_descriptor(), enum_t_value);
}
inline bool CurvatureCalculationMode_Parse(
    const std::string& name, CurvatureCalculationMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CurvatureCalculationMode>(
    CurvatureCalculationMode_descriptor(), name, value);
}
enum DriveDirection : int {
  DD_FORWARD = 0,
  DD_BACKWARD = 1,
  DD_UNAVAILABLE = 2
};
bool DriveDirection_IsValid(int value);
constexpr DriveDirection DriveDirection_MIN = DD_FORWARD;
constexpr DriveDirection DriveDirection_MAX = DD_UNAVAILABLE;
constexpr int DriveDirection_ARRAYSIZE = DriveDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DriveDirection_descriptor();
template<typename T>
inline const std::string& DriveDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DriveDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DriveDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DriveDirection_descriptor(), enum_t_value);
}
inline bool DriveDirection_Parse(
    const std::string& name, DriveDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DriveDirection>(
    DriveDirection_descriptor(), name, value);
}
enum SensorType : int {
  SNSR_UNDEFINED = 0,
  SNSR_RADAR = 1,
  SNSR_LIDAR = 2,
  SNSR_MONOVIDEO = 3,
  SNSR_STEROVISION = 4,
  SNSR_NIGHTVISION = 5,
  SNSR_ULTRASONIC = 6,
  SNSR_PMD = 7,
  SNSR_INDUCTIONLOOP = 8,
  SNSR_SPHERICALCAMERA = 9,
  SNSR_UWB = 10,
  SNSR_ACOUSTIC = 11,
  SNSR_LOCALAGGREGATION = 12,
  SNSR_ITSAGGREGATION = 13
};
bool SensorType_IsValid(int value);
constexpr SensorType SensorType_MIN = SNSR_UNDEFINED;
constexpr SensorType SensorType_MAX = SNSR_ITSAGGREGATION;
constexpr int SensorType_ARRAYSIZE = SensorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorType_descriptor();
template<typename T>
inline const std::string& SensorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SensorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SensorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SensorType_descriptor(), enum_t_value);
}
inline bool SensorType_Parse(
    const std::string& name, SensorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SensorType>(
    SensorType_descriptor(), name, value);
}
enum StationType : int {
  UNKNOWN = 0,
  PEDESTRIAN = 1,
  CYCLIST = 2,
  MOPED = 3,
  MOTORCYCLE = 4,
  PASSENGER_CAR = 5,
  BUS = 6,
  LIGHT_TRUCK = 7,
  HEAVY_TRUCK = 8,
  TRAILER = 9,
  SPECIAL_VEHICLE = 10,
  TRAM = 11,
  ROAD_SIDE_UNIT = 15
};
bool StationType_IsValid(int value);
constexpr StationType StationType_MIN = UNKNOWN;
constexpr StationType StationType_MAX = ROAD_SIDE_UNIT;
constexpr int StationType_ARRAYSIZE = StationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StationType_descriptor();
template<typename T>
inline const std::string& StationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StationType_descriptor(), enum_t_value);
}
inline bool StationType_Parse(
    const std::string& name, StationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StationType>(
    StationType_descriptor(), name, value);
}
enum VehicleLengthConfidenceIndication : int {
  VLCI_NO_TRAILER_PRESENT = 0,
  VLCI_TRAILER_PRESENT_WITH_KNOWN_LENGTH = 1,
  VLCI_TRAILER_PRESENT_WITH_UNKNOWN_LENGTH = 2,
  VLCI_TRAILER_PRESENCE_IS_UNKNOWN = 3,
  VLCI_UNAVAILABLE = 4
};
bool VehicleLengthConfidenceIndication_IsValid(int value);
constexpr VehicleLengthConfidenceIndication VehicleLengthConfidenceIndication_MIN = VLCI_NO_TRAILER_PRESENT;
constexpr VehicleLengthConfidenceIndication VehicleLengthConfidenceIndication_MAX = VLCI_UNAVAILABLE;
constexpr int VehicleLengthConfidenceIndication_ARRAYSIZE = VehicleLengthConfidenceIndication_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehicleLengthConfidenceIndication_descriptor();
template<typename T>
inline const std::string& VehicleLengthConfidenceIndication_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VehicleLengthConfidenceIndication>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VehicleLengthConfidenceIndication_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VehicleLengthConfidenceIndication_descriptor(), enum_t_value);
}
inline bool VehicleLengthConfidenceIndication_Parse(
    const std::string& name, VehicleLengthConfidenceIndication* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VehicleLengthConfidenceIndication>(
    VehicleLengthConfidenceIndication_descriptor(), name, value);
}
enum YawRateConfidence : int {
  YRC_degSec_000_01 = 0,
  YRC_degSec_000_05 = 1,
  YRC_degSec_000_10 = 2,
  YRC_degSec_001_00 = 3,
  YRC_degSec_005_00 = 4,
  YRC_degSec_010_00 = 5,
  YRC_degSec_100_00 = 6,
  YRC_OutOfRange = 7,
  YRC_UNAVAILABLE = 8
};
bool YawRateConfidence_IsValid(int value);
constexpr YawRateConfidence YawRateConfidence_MIN = YRC_degSec_000_01;
constexpr YawRateConfidence YawRateConfidence_MAX = YRC_UNAVAILABLE;
constexpr int YawRateConfidence_ARRAYSIZE = YawRateConfidence_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* YawRateConfidence_descriptor();
template<typename T>
inline const std::string& YawRateConfidence_Name(T enum_t_value) {
  static_assert(::std::is_same<T, YawRateConfidence>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function YawRateConfidence_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    YawRateConfidence_descriptor(), enum_t_value);
}
inline bool YawRateConfidence_Parse(
    const std::string& name, YawRateConfidence* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<YawRateConfidence>(
    YawRateConfidence_descriptor(), name, value);
}
// ===================================================================

class Altitude PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Altitude) */ {
 public:
  inline Altitude() : Altitude(nullptr) {};
  virtual ~Altitude();

  Altitude(const Altitude& from);
  Altitude(Altitude&& from) noexcept
    : Altitude() {
    *this = ::std::move(from);
  }

  inline Altitude& operator=(const Altitude& from) {
    CopyFrom(from);
    return *this;
  }
  inline Altitude& operator=(Altitude&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Altitude& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Altitude* internal_default_instance() {
    return reinterpret_cast<const Altitude*>(
               &_Altitude_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Altitude& a, Altitude& b) {
    a.Swap(&b);
  }
  inline void Swap(Altitude* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Altitude* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Altitude* New() const final {
    return CreateMaybeMessage<Altitude>(nullptr);
  }

  Altitude* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Altitude>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Altitude& from);
  void MergeFrom(const Altitude& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Altitude* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Altitude";
  }
  protected:
  explicit Altitude(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etsi_5fits_5fcdd_2eproto);
    return ::descriptor_table_etsi_5fits_5fcdd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kConfidenceFieldNumber = 2,
  };
  // required int32 value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint32 confidence = 2;
  bool has_confidence() const;
  private:
  bool _internal_has_confidence() const;
  public:
  void clear_confidence();
  ::PROTOBUF_NAMESPACE_ID::uint32 confidence() const;
  void set_confidence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_confidence() const;
  void _internal_set_confidence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Altitude)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 confidence_;
  friend struct ::TableStruct_etsi_5fits_5fcdd_2eproto;
};
// -------------------------------------------------------------------

class CartesianAngle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CartesianAngle) */ {
 public:
  inline CartesianAngle() : CartesianAngle(nullptr) {};
  virtual ~CartesianAngle();

  CartesianAngle(const CartesianAngle& from);
  CartesianAngle(CartesianAngle&& from) noexcept
    : CartesianAngle() {
    *this = ::std::move(from);
  }

  inline CartesianAngle& operator=(const CartesianAngle& from) {
    CopyFrom(from);
    return *this;
  }
  inline CartesianAngle& operator=(CartesianAngle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CartesianAngle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CartesianAngle* internal_default_instance() {
    return reinterpret_cast<const CartesianAngle*>(
               &_CartesianAngle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CartesianAngle& a, CartesianAngle& b) {
    a.Swap(&b);
  }
  inline void Swap(CartesianAngle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CartesianAngle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CartesianAngle* New() const final {
    return CreateMaybeMessage<CartesianAngle>(nullptr);
  }

  CartesianAngle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CartesianAngle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CartesianAngle& from);
  void MergeFrom(const CartesianAngle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CartesianAngle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CartesianAngle";
  }
  protected:
  explicit CartesianAngle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etsi_5fits_5fcdd_2eproto);
    return ::descriptor_table_etsi_5fits_5fcdd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCartesianValueFieldNumber = 1,
    kCartesianAngleConfidenceFieldNumber = 2,
  };
  // required int64 cartesian_value = 1;
  bool has_cartesian_value() const;
  private:
  bool _internal_has_cartesian_value() const;
  public:
  void clear_cartesian_value();
  ::PROTOBUF_NAMESPACE_ID::int64 cartesian_value() const;
  void set_cartesian_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_cartesian_value() const;
  void _internal_set_cartesian_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int64 cartesian_angle_confidence = 2;
  bool has_cartesian_angle_confidence() const;
  private:
  bool _internal_has_cartesian_angle_confidence() const;
  public:
  void clear_cartesian_angle_confidence();
  ::PROTOBUF_NAMESPACE_ID::int64 cartesian_angle_confidence() const;
  void set_cartesian_angle_confidence(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_cartesian_angle_confidence() const;
  void _internal_set_cartesian_angle_confidence(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:CartesianAngle)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 cartesian_value_;
  ::PROTOBUF_NAMESPACE_ID::int64 cartesian_angle_confidence_;
  friend struct ::TableStruct_etsi_5fits_5fcdd_2eproto;
};
// -------------------------------------------------------------------

class CartesianPosition3d PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CartesianPosition3d) */ {
 public:
  inline CartesianPosition3d() : CartesianPosition3d(nullptr) {};
  virtual ~CartesianPosition3d();

  CartesianPosition3d(const CartesianPosition3d& from);
  CartesianPosition3d(CartesianPosition3d&& from) noexcept
    : CartesianPosition3d() {
    *this = ::std::move(from);
  }

  inline CartesianPosition3d& operator=(const CartesianPosition3d& from) {
    CopyFrom(from);
    return *this;
  }
  inline CartesianPosition3d& operator=(CartesianPosition3d&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CartesianPosition3d& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CartesianPosition3d* internal_default_instance() {
    return reinterpret_cast<const CartesianPosition3d*>(
               &_CartesianPosition3d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CartesianPosition3d& a, CartesianPosition3d& b) {
    a.Swap(&b);
  }
  inline void Swap(CartesianPosition3d* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CartesianPosition3d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CartesianPosition3d* New() const final {
    return CreateMaybeMessage<CartesianPosition3d>(nullptr);
  }

  CartesianPosition3d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CartesianPosition3d>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CartesianPosition3d& from);
  void MergeFrom(const CartesianPosition3d& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CartesianPosition3d* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CartesianPosition3d";
  }
  protected:
  explicit CartesianPosition3d(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etsi_5fits_5fcdd_2eproto);
    return ::descriptor_table_etsi_5fits_5fcdd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXCordFieldNumber = 1,
    kYCordFieldNumber = 2,
    kZCordFieldNumber = 3,
  };
  // required int32 x_cord = 1;
  bool has_x_cord() const;
  private:
  bool _internal_has_x_cord() const;
  public:
  void clear_x_cord();
  ::PROTOBUF_NAMESPACE_ID::int32 x_cord() const;
  void set_x_cord(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x_cord() const;
  void _internal_set_x_cord(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 y_cord = 2;
  bool has_y_cord() const;
  private:
  bool _internal_has_y_cord() const;
  public:
  void clear_y_cord();
  ::PROTOBUF_NAMESPACE_ID::int32 y_cord() const;
  void set_y_cord(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y_cord() const;
  void _internal_set_y_cord(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 z_cord = 3;
  bool has_z_cord() const;
  private:
  bool _internal_has_z_cord() const;
  public:
  void clear_z_cord();
  ::PROTOBUF_NAMESPACE_ID::int32 z_cord() const;
  void set_z_cord(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_z_cord() const;
  void _internal_set_z_cord(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CartesianPosition3d)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_cord_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_cord_;
  ::PROTOBUF_NAMESPACE_ID::int32 z_cord_;
  friend struct ::TableStruct_etsi_5fits_5fcdd_2eproto;
};
// -------------------------------------------------------------------

class CircularShape PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CircularShape) */ {
 public:
  inline CircularShape() : CircularShape(nullptr) {};
  virtual ~CircularShape();

  CircularShape(const CircularShape& from);
  CircularShape(CircularShape&& from) noexcept
    : CircularShape() {
    *this = ::std::move(from);
  }

  inline CircularShape& operator=(const CircularShape& from) {
    CopyFrom(from);
    return *this;
  }
  inline CircularShape& operator=(CircularShape&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CircularShape& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CircularShape* internal_default_instance() {
    return reinterpret_cast<const CircularShape*>(
               &_CircularShape_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CircularShape& a, CircularShape& b) {
    a.Swap(&b);
  }
  inline void Swap(CircularShape* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CircularShape* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CircularShape* New() const final {
    return CreateMaybeMessage<CircularShape>(nullptr);
  }

  CircularShape* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CircularShape>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CircularShape& from);
  void MergeFrom(const CircularShape& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CircularShape* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CircularShape";
  }
  protected:
  explicit CircularShape(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etsi_5fits_5fcdd_2eproto);
    return ::descriptor_table_etsi_5fits_5fcdd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeRefPointFieldNumber = 1,
    kRadiusFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // optional .CartesianPosition3d shapeRefPoint = 1;
  bool has_shaperefpoint() const;
  private:
  bool _internal_has_shaperefpoint() const;
  public:
  void clear_shaperefpoint();
  const ::CartesianPosition3d& shaperefpoint() const;
  ::CartesianPosition3d* release_shaperefpoint();
  ::CartesianPosition3d* mutable_shaperefpoint();
  void set_allocated_shaperefpoint(::CartesianPosition3d* shaperefpoint);
  private:
  const ::CartesianPosition3d& _internal_shaperefpoint() const;
  ::CartesianPosition3d* _internal_mutable_shaperefpoint();
  public:
  void unsafe_arena_set_allocated_shaperefpoint(
      ::CartesianPosition3d* shaperefpoint);
  ::CartesianPosition3d* unsafe_arena_release_shaperefpoint();

  // required int32 radius = 2;
  bool has_radius() const;
  private:
  bool _internal_has_radius() const;
  public:
  void clear_radius();
  ::PROTOBUF_NAMESPACE_ID::int32 radius() const;
  void set_radius(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_radius() const;
  void _internal_set_radius(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 height = 3;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CircularShape)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CartesianPosition3d* shaperefpoint_;
  ::PROTOBUF_NAMESPACE_ID::int32 radius_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  friend struct ::TableStruct_etsi_5fits_5fcdd_2eproto;
};
// -------------------------------------------------------------------

class EllipticalShape PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EllipticalShape) */ {
 public:
  inline EllipticalShape() : EllipticalShape(nullptr) {};
  virtual ~EllipticalShape();

  EllipticalShape(const EllipticalShape& from);
  EllipticalShape(EllipticalShape&& from) noexcept
    : EllipticalShape() {
    *this = ::std::move(from);
  }

  inline EllipticalShape& operator=(const EllipticalShape& from) {
    CopyFrom(from);
    return *this;
  }
  inline EllipticalShape& operator=(EllipticalShape&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EllipticalShape& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EllipticalShape* internal_default_instance() {
    return reinterpret_cast<const EllipticalShape*>(
               &_EllipticalShape_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EllipticalShape& a, EllipticalShape& b) {
    a.Swap(&b);
  }
  inline void Swap(EllipticalShape* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EllipticalShape* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EllipticalShape* New() const final {
    return CreateMaybeMessage<EllipticalShape>(nullptr);
  }

  EllipticalShape* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EllipticalShape>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EllipticalShape& from);
  void MergeFrom(const EllipticalShape& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EllipticalShape* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EllipticalShape";
  }
  protected:
  explicit EllipticalShape(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etsi_5fits_5fcdd_2eproto);
    return ::descriptor_table_etsi_5fits_5fcdd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeReferencePointFieldNumber = 1,
    kSemiMajorAxisLengthFieldNumber = 2,
    kSemiMinorAxisLengthFieldNumber = 3,
    kOrientationFieldNumber = 4,
    kHeightFieldNumber = 5,
  };
  // optional .CartesianPosition3d shapeReferencePoint = 1;
  bool has_shapereferencepoint() const;
  private:
  bool _internal_has_shapereferencepoint() const;
  public:
  void clear_shapereferencepoint();
  const ::CartesianPosition3d& shapereferencepoint() const;
  ::CartesianPosition3d* release_shapereferencepoint();
  ::CartesianPosition3d* mutable_shapereferencepoint();
  void set_allocated_shapereferencepoint(::CartesianPosition3d* shapereferencepoint);
  private:
  const ::CartesianPosition3d& _internal_shapereferencepoint() const;
  ::CartesianPosition3d* _internal_mutable_shapereferencepoint();
  public:
  void unsafe_arena_set_allocated_shapereferencepoint(
      ::CartesianPosition3d* shapereferencepoint);
  ::CartesianPosition3d* unsafe_arena_release_shapereferencepoint();

  // required uint32 semiMajorAxisLength = 2;
  bool has_semimajoraxislength() const;
  private:
  bool _internal_has_semimajoraxislength() const;
  public:
  void clear_semimajoraxislength();
  ::PROTOBUF_NAMESPACE_ID::uint32 semimajoraxislength() const;
  void set_semimajoraxislength(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_semimajoraxislength() const;
  void _internal_set_semimajoraxislength(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 semiMinorAxisLength = 3;
  bool has_semiminoraxislength() const;
  private:
  bool _internal_has_semiminoraxislength() const;
  public:
  void clear_semiminoraxislength();
  ::PROTOBUF_NAMESPACE_ID::uint32 semiminoraxislength() const;
  void set_semiminoraxislength(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_semiminoraxislength() const;
  void _internal_set_semiminoraxislength(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 orientation = 4;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  ::PROTOBUF_NAMESPACE_ID::uint32 orientation() const;
  void set_orientation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_orientation() const;
  void _internal_set_orientation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 height = 5;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:EllipticalShape)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CartesianPosition3d* shapereferencepoint_;
  ::PROTOBUF_NAMESPACE_ID::uint32 semimajoraxislength_;
  ::PROTOBUF_NAMESPACE_ID::uint32 semiminoraxislength_;
  ::PROTOBUF_NAMESPACE_ID::uint32 orientation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  friend struct ::TableStruct_etsi_5fits_5fcdd_2eproto;
};
// -------------------------------------------------------------------

class Curvature PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Curvature) */ {
 public:
  inline Curvature() : Curvature(nullptr) {};
  virtual ~Curvature();

  Curvature(const Curvature& from);
  Curvature(Curvature&& from) noexcept
    : Curvature() {
    *this = ::std::move(from);
  }

  inline Curvature& operator=(const Curvature& from) {
    CopyFrom(from);
    return *this;
  }
  inline Curvature& operator=(Curvature&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Curvature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Curvature* internal_default_instance() {
    return reinterpret_cast<const Curvature*>(
               &_Curvature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Curvature& a, Curvature& b) {
    a.Swap(&b);
  }
  inline void Swap(Curvature* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Curvature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Curvature* New() const final {
    return CreateMaybeMessage<Curvature>(nullptr);
  }

  Curvature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Curvature>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Curvature& from);
  void MergeFrom(const Curvature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Curvature* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Curvature";
  }
  protected:
  explicit Curvature(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etsi_5fits_5fcdd_2eproto);
    return ::descriptor_table_etsi_5fits_5fcdd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kConfidenceFieldNumber = 2,
  };
  // required int32 value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 confidence = 2;
  bool has_confidence() const;
  private:
  bool _internal_has_confidence() const;
  public:
  void clear_confidence();
  ::PROTOBUF_NAMESPACE_ID::int32 confidence() const;
  void set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_confidence() const;
  void _internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Curvature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  ::PROTOBUF_NAMESPACE_ID::int32 confidence_;
  friend struct ::TableStruct_etsi_5fits_5fcdd_2eproto;
};
// -------------------------------------------------------------------

class Heading PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Heading) */ {
 public:
  inline Heading() : Heading(nullptr) {};
  virtual ~Heading();

  Heading(const Heading& from);
  Heading(Heading&& from) noexcept
    : Heading() {
    *this = ::std::move(from);
  }

  inline Heading& operator=(const Heading& from) {
    CopyFrom(from);
    return *this;
  }
  inline Heading& operator=(Heading&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Heading& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Heading* internal_default_instance() {
    return reinterpret_cast<const Heading*>(
               &_Heading_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Heading& a, Heading& b) {
    a.Swap(&b);
  }
  inline void Swap(Heading* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Heading* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Heading* New() const final {
    return CreateMaybeMessage<Heading>(nullptr);
  }

  Heading* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Heading>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Heading& from);
  void MergeFrom(const Heading& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Heading* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Heading";
  }
  protected:
  explicit Heading(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etsi_5fits_5fcdd_2eproto);
    return ::descriptor_table_etsi_5fits_5fcdd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kConfidenceFieldNumber = 2,
  };
  // required int32 value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint32 confidence = 2;
  bool has_confidence() const;
  private:
  bool _internal_has_confidence() const;
  public:
  void clear_confidence();
  ::PROTOBUF_NAMESPACE_ID::uint32 confidence() const;
  void set_confidence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_confidence() const;
  void _internal_set_confidence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Heading)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 confidence_;
  friend struct ::TableStruct_etsi_5fits_5fcdd_2eproto;
};
// -------------------------------------------------------------------

class IntersectionReferenceID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IntersectionReferenceID) */ {
 public:
  inline IntersectionReferenceID() : IntersectionReferenceID(nullptr) {};
  virtual ~IntersectionReferenceID();

  IntersectionReferenceID(const IntersectionReferenceID& from);
  IntersectionReferenceID(IntersectionReferenceID&& from) noexcept
    : IntersectionReferenceID() {
    *this = ::std::move(from);
  }

  inline IntersectionReferenceID& operator=(const IntersectionReferenceID& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntersectionReferenceID& operator=(IntersectionReferenceID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntersectionReferenceID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntersectionReferenceID* internal_default_instance() {
    return reinterpret_cast<const IntersectionReferenceID*>(
               &_IntersectionReferenceID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(IntersectionReferenceID& a, IntersectionReferenceID& b) {
    a.Swap(&b);
  }
  inline void Swap(IntersectionReferenceID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntersectionReferenceID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntersectionReferenceID* New() const final {
    return CreateMaybeMessage<IntersectionReferenceID>(nullptr);
  }

  IntersectionReferenceID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntersectionReferenceID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntersectionReferenceID& from);
  void MergeFrom(const IntersectionReferenceID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntersectionReferenceID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IntersectionReferenceID";
  }
  protected:
  explicit IntersectionReferenceID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etsi_5fits_5fcdd_2eproto);
    return ::descriptor_table_etsi_5fits_5fcdd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegionFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // optional int64 region = 1;
  bool has_region() const;
  private:
  bool _internal_has_region() const;
  public:
  void clear_region();
  ::PROTOBUF_NAMESPACE_ID::int64 region() const;
  void set_region(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_region() const;
  void _internal_set_region(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:IntersectionReferenceID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 region_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  friend struct ::TableStruct_etsi_5fits_5fcdd_2eproto;
};
// -------------------------------------------------------------------

class LongitudinalAcceleration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LongitudinalAcceleration) */ {
 public:
  inline LongitudinalAcceleration() : LongitudinalAcceleration(nullptr) {};
  virtual ~LongitudinalAcceleration();

  LongitudinalAcceleration(const LongitudinalAcceleration& from);
  LongitudinalAcceleration(LongitudinalAcceleration&& from) noexcept
    : LongitudinalAcceleration() {
    *this = ::std::move(from);
  }

  inline LongitudinalAcceleration& operator=(const LongitudinalAcceleration& from) {
    CopyFrom(from);
    return *this;
  }
  inline LongitudinalAcceleration& operator=(LongitudinalAcceleration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LongitudinalAcceleration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LongitudinalAcceleration* internal_default_instance() {
    return reinterpret_cast<const LongitudinalAcceleration*>(
               &_LongitudinalAcceleration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LongitudinalAcceleration& a, LongitudinalAcceleration& b) {
    a.Swap(&b);
  }
  inline void Swap(LongitudinalAcceleration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LongitudinalAcceleration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LongitudinalAcceleration* New() const final {
    return CreateMaybeMessage<LongitudinalAcceleration>(nullptr);
  }

  LongitudinalAcceleration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LongitudinalAcceleration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LongitudinalAcceleration& from);
  void MergeFrom(const LongitudinalAcceleration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LongitudinalAcceleration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LongitudinalAcceleration";
  }
  protected:
  explicit LongitudinalAcceleration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etsi_5fits_5fcdd_2eproto);
    return ::descriptor_table_etsi_5fits_5fcdd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kConfidenceFieldNumber = 2,
  };
  // required int32 value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 confidence = 2;
  bool has_confidence() const;
  private:
  bool _internal_has_confidence() const;
  public:
  void clear_confidence();
  ::PROTOBUF_NAMESPACE_ID::int32 confidence() const;
  void set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_confidence() const;
  void _internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LongitudinalAcceleration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  ::PROTOBUF_NAMESPACE_ID::int32 confidence_;
  friend struct ::TableStruct_etsi_5fits_5fcdd_2eproto;
};
// -------------------------------------------------------------------

class PolygonalShape PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PolygonalShape) */ {
 public:
  inline PolygonalShape() : PolygonalShape(nullptr) {};
  virtual ~PolygonalShape();

  PolygonalShape(const PolygonalShape& from);
  PolygonalShape(PolygonalShape&& from) noexcept
    : PolygonalShape() {
    *this = ::std::move(from);
  }

  inline PolygonalShape& operator=(const PolygonalShape& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolygonalShape& operator=(PolygonalShape&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PolygonalShape& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PolygonalShape* internal_default_instance() {
    return reinterpret_cast<const PolygonalShape*>(
               &_PolygonalShape_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PolygonalShape& a, PolygonalShape& b) {
    a.Swap(&b);
  }
  inline void Swap(PolygonalShape* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolygonalShape* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PolygonalShape* New() const final {
    return CreateMaybeMessage<PolygonalShape>(nullptr);
  }

  PolygonalShape* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PolygonalShape>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PolygonalShape& from);
  void MergeFrom(const PolygonalShape& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PolygonalShape* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PolygonalShape";
  }
  protected:
  explicit PolygonalShape(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etsi_5fits_5fcdd_2eproto);
    return ::descriptor_table_etsi_5fits_5fcdd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolygonFieldNumber = 2,
    kShapeReferencePointFieldNumber = 1,
    kHeightFieldNumber = 3,
  };
  // repeated .CartesianPosition3d polygon = 2;
  int polygon_size() const;
  private:
  int _internal_polygon_size() const;
  public:
  void clear_polygon();
  ::CartesianPosition3d* mutable_polygon(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CartesianPosition3d >*
      mutable_polygon();
  private:
  const ::CartesianPosition3d& _internal_polygon(int index) const;
  ::CartesianPosition3d* _internal_add_polygon();
  public:
  const ::CartesianPosition3d& polygon(int index) const;
  ::CartesianPosition3d* add_polygon();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CartesianPosition3d >&
      polygon() const;

  // optional .CartesianPosition3d shapeReferencePoint = 1;
  bool has_shapereferencepoint() const;
  private:
  bool _internal_has_shapereferencepoint() const;
  public:
  void clear_shapereferencepoint();
  const ::CartesianPosition3d& shapereferencepoint() const;
  ::CartesianPosition3d* release_shapereferencepoint();
  ::CartesianPosition3d* mutable_shapereferencepoint();
  void set_allocated_shapereferencepoint(::CartesianPosition3d* shapereferencepoint);
  private:
  const ::CartesianPosition3d& _internal_shapereferencepoint() const;
  ::CartesianPosition3d* _internal_mutable_shapereferencepoint();
  public:
  void unsafe_arena_set_allocated_shapereferencepoint(
      ::CartesianPosition3d* shapereferencepoint);
  ::CartesianPosition3d* unsafe_arena_release_shapereferencepoint();

  // optional uint32 height = 3;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:PolygonalShape)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CartesianPosition3d > polygon_;
  ::CartesianPosition3d* shapereferencepoint_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  friend struct ::TableStruct_etsi_5fits_5fcdd_2eproto;
};
// -------------------------------------------------------------------

class PositionConfidenceEllipse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PositionConfidenceEllipse) */ {
 public:
  inline PositionConfidenceEllipse() : PositionConfidenceEllipse(nullptr) {};
  virtual ~PositionConfidenceEllipse();

  PositionConfidenceEllipse(const PositionConfidenceEllipse& from);
  PositionConfidenceEllipse(PositionConfidenceEllipse&& from) noexcept
    : PositionConfidenceEllipse() {
    *this = ::std::move(from);
  }

  inline PositionConfidenceEllipse& operator=(const PositionConfidenceEllipse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionConfidenceEllipse& operator=(PositionConfidenceEllipse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionConfidenceEllipse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PositionConfidenceEllipse* internal_default_instance() {
    return reinterpret_cast<const PositionConfidenceEllipse*>(
               &_PositionConfidenceEllipse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PositionConfidenceEllipse& a, PositionConfidenceEllipse& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionConfidenceEllipse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionConfidenceEllipse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionConfidenceEllipse* New() const final {
    return CreateMaybeMessage<PositionConfidenceEllipse>(nullptr);
  }

  PositionConfidenceEllipse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionConfidenceEllipse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionConfidenceEllipse& from);
  void MergeFrom(const PositionConfidenceEllipse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionConfidenceEllipse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PositionConfidenceEllipse";
  }
  protected:
  explicit PositionConfidenceEllipse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etsi_5fits_5fcdd_2eproto);
    return ::descriptor_table_etsi_5fits_5fcdd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSemiMajorConfidenceFieldNumber = 1,
    kSemiMinorConfidenceFieldNumber = 2,
    kSemiMajorOrientationFieldNumber = 3,
  };
  // required uint32 semi_major_confidence = 1;
  bool has_semi_major_confidence() const;
  private:
  bool _internal_has_semi_major_confidence() const;
  public:
  void clear_semi_major_confidence();
  ::PROTOBUF_NAMESPACE_ID::uint32 semi_major_confidence() const;
  void set_semi_major_confidence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_semi_major_confidence() const;
  void _internal_set_semi_major_confidence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 semi_minor_confidence = 2;
  bool has_semi_minor_confidence() const;
  private:
  bool _internal_has_semi_minor_confidence() const;
  public:
  void clear_semi_minor_confidence();
  ::PROTOBUF_NAMESPACE_ID::uint32 semi_minor_confidence() const;
  void set_semi_minor_confidence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_semi_minor_confidence() const;
  void _internal_set_semi_minor_confidence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 semi_major_orientation = 3;
  bool has_semi_major_orientation() const;
  private:
  bool _internal_has_semi_major_orientation() const;
  public:
  void clear_semi_major_orientation();
  ::PROTOBUF_NAMESPACE_ID::uint32 semi_major_orientation() const;
  void set_semi_major_orientation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_semi_major_orientation() const;
  void _internal_set_semi_major_orientation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:PositionConfidenceEllipse)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 semi_major_confidence_;
  ::PROTOBUF_NAMESPACE_ID::uint32 semi_minor_confidence_;
  ::PROTOBUF_NAMESPACE_ID::uint32 semi_major_orientation_;
  friend struct ::TableStruct_etsi_5fits_5fcdd_2eproto;
};
// -------------------------------------------------------------------

class RadialShape PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RadialShape) */ {
 public:
  inline RadialShape() : RadialShape(nullptr) {};
  virtual ~RadialShape();

  RadialShape(const RadialShape& from);
  RadialShape(RadialShape&& from) noexcept
    : RadialShape() {
    *this = ::std::move(from);
  }

  inline RadialShape& operator=(const RadialShape& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadialShape& operator=(RadialShape&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RadialShape& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadialShape* internal_default_instance() {
    return reinterpret_cast<const RadialShape*>(
               &_RadialShape_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RadialShape& a, RadialShape& b) {
    a.Swap(&b);
  }
  inline void Swap(RadialShape* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RadialShape* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RadialShape* New() const final {
    return CreateMaybeMessage<RadialShape>(nullptr);
  }

  RadialShape* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RadialShape>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RadialShape& from);
  void MergeFrom(const RadialShape& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadialShape* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RadialShape";
  }
  protected:
  explicit RadialShape(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etsi_5fits_5fcdd_2eproto);
    return ::descriptor_table_etsi_5fits_5fcdd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSharedRefPointFieldNumber = 1,
    kRangeFieldNumber = 2,
    kStationaryHorizontalOpeningAngleStartFieldNumber = 3,
    kStationaryHorizontalOpeningAngleEndFieldNumber = 4,
    kVerticalOpeningAngleStartFieldNumber = 5,
    kVerticalOpeningAngleEndFieldNumber = 6,
  };
  // optional .CartesianPosition3d sharedRefPoint = 1;
  bool has_sharedrefpoint() const;
  private:
  bool _internal_has_sharedrefpoint() const;
  public:
  void clear_sharedrefpoint();
  const ::CartesianPosition3d& sharedrefpoint() const;
  ::CartesianPosition3d* release_sharedrefpoint();
  ::CartesianPosition3d* mutable_sharedrefpoint();
  void set_allocated_sharedrefpoint(::CartesianPosition3d* sharedrefpoint);
  private:
  const ::CartesianPosition3d& _internal_sharedrefpoint() const;
  ::CartesianPosition3d* _internal_mutable_sharedrefpoint();
  public:
  void unsafe_arena_set_allocated_sharedrefpoint(
      ::CartesianPosition3d* sharedrefpoint);
  ::CartesianPosition3d* unsafe_arena_release_sharedrefpoint();

  // required uint32 range = 2;
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  ::PROTOBUF_NAMESPACE_ID::uint32 range() const;
  void set_range(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_range() const;
  void _internal_set_range(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 stationaryHorizontalOpeningAngleStart = 3;
  bool has_stationaryhorizontalopeninganglestart() const;
  private:
  bool _internal_has_stationaryhorizontalopeninganglestart() const;
  public:
  void clear_stationaryhorizontalopeninganglestart();
  ::PROTOBUF_NAMESPACE_ID::uint32 stationaryhorizontalopeninganglestart() const;
  void set_stationaryhorizontalopeninganglestart(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stationaryhorizontalopeninganglestart() const;
  void _internal_set_stationaryhorizontalopeninganglestart(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 stationaryHorizontalOpeningAngleEnd = 4;
  bool has_stationaryhorizontalopeningangleend() const;
  private:
  bool _internal_has_stationaryhorizontalopeningangleend() const;
  public:
  void clear_stationaryhorizontalopeningangleend();
  ::PROTOBUF_NAMESPACE_ID::uint32 stationaryhorizontalopeningangleend() const;
  void set_stationaryhorizontalopeningangleend(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stationaryhorizontalopeningangleend() const;
  void _internal_set_stationaryhorizontalopeningangleend(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 verticalOpeningAngleStart = 5;
  bool has_verticalopeninganglestart() const;
  private:
  bool _internal_has_verticalopeninganglestart() const;
  public:
  void clear_verticalopeninganglestart();
  ::PROTOBUF_NAMESPACE_ID::uint32 verticalopeninganglestart() const;
  void set_verticalopeninganglestart(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_verticalopeninganglestart() const;
  void _internal_set_verticalopeninganglestart(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 verticalOpeningAngleEnd = 6;
  bool has_verticalopeningangleend() const;
  private:
  bool _internal_has_verticalopeningangleend() const;
  public:
  void clear_verticalopeningangleend();
  ::PROTOBUF_NAMESPACE_ID::uint32 verticalopeningangleend() const;
  void set_verticalopeningangleend(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_verticalopeningangleend() const;
  void _internal_set_verticalopeningangleend(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:RadialShape)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CartesianPosition3d* sharedrefpoint_;
  ::PROTOBUF_NAMESPACE_ID::uint32 range_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stationaryhorizontalopeninganglestart_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stationaryhorizontalopeningangleend_;
  ::PROTOBUF_NAMESPACE_ID::uint32 verticalopeninganglestart_;
  ::PROTOBUF_NAMESPACE_ID::uint32 verticalopeningangleend_;
  friend struct ::TableStruct_etsi_5fits_5fcdd_2eproto;
};
// -------------------------------------------------------------------

class RadialShapes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RadialShapes) */ {
 public:
  inline RadialShapes() : RadialShapes(nullptr) {};
  virtual ~RadialShapes();

  RadialShapes(const RadialShapes& from);
  RadialShapes(RadialShapes&& from) noexcept
    : RadialShapes() {
    *this = ::std::move(from);
  }

  inline RadialShapes& operator=(const RadialShapes& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadialShapes& operator=(RadialShapes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RadialShapes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadialShapes* internal_default_instance() {
    return reinterpret_cast<const RadialShapes*>(
               &_RadialShapes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RadialShapes& a, RadialShapes& b) {
    a.Swap(&b);
  }
  inline void Swap(RadialShapes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RadialShapes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RadialShapes* New() const final {
    return CreateMaybeMessage<RadialShapes>(nullptr);
  }

  RadialShapes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RadialShapes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RadialShapes& from);
  void MergeFrom(const RadialShapes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadialShapes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RadialShapes";
  }
  protected:
  explicit RadialShapes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etsi_5fits_5fcdd_2eproto);
    return ::descriptor_table_etsi_5fits_5fcdd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRadialShapesListFieldNumber = 6,
    kRefPointIDFieldNumber = 1,
    kXCordFieldNumber = 2,
    kYCordFieldNumber = 3,
    kZCordFieldNumber = 4,
  };
  // repeated .RadialShapeDetails radialShapesList = 6;
  int radialshapeslist_size() const;
  private:
  int _internal_radialshapeslist_size() const;
  public:
  void clear_radialshapeslist();
  ::RadialShapeDetails* mutable_radialshapeslist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RadialShapeDetails >*
      mutable_radialshapeslist();
  private:
  const ::RadialShapeDetails& _internal_radialshapeslist(int index) const;
  ::RadialShapeDetails* _internal_add_radialshapeslist();
  public:
  const ::RadialShapeDetails& radialshapeslist(int index) const;
  ::RadialShapeDetails* add_radialshapeslist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RadialShapeDetails >&
      radialshapeslist() const;

  // required uint32 refPointID = 1;
  bool has_refpointid() const;
  private:
  bool _internal_has_refpointid() const;
  public:
  void clear_refpointid();
  ::PROTOBUF_NAMESPACE_ID::uint32 refpointid() const;
  void set_refpointid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_refpointid() const;
  void _internal_set_refpointid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required int32 x_cord = 2;
  bool has_x_cord() const;
  private:
  bool _internal_has_x_cord() const;
  public:
  void clear_x_cord();
  ::PROTOBUF_NAMESPACE_ID::int32 x_cord() const;
  void set_x_cord(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x_cord() const;
  void _internal_set_x_cord(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 y_cord = 3;
  bool has_y_cord() const;
  private:
  bool _internal_has_y_cord() const;
  public:
  void clear_y_cord();
  ::PROTOBUF_NAMESPACE_ID::int32 y_cord() const;
  void set_y_cord(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y_cord() const;
  void _internal_set_y_cord(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 z_cord = 4;
  bool has_z_cord() const;
  private:
  bool _internal_has_z_cord() const;
  public:
  void clear_z_cord();
  ::PROTOBUF_NAMESPACE_ID::int32 z_cord() const;
  void set_z_cord(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_z_cord() const;
  void _internal_set_z_cord(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RadialShapes)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RadialShapeDetails > radialshapeslist_;
  ::PROTOBUF_NAMESPACE_ID::uint32 refpointid_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_cord_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_cord_;
  ::PROTOBUF_NAMESPACE_ID::int32 z_cord_;
  friend struct ::TableStruct_etsi_5fits_5fcdd_2eproto;
};
// -------------------------------------------------------------------

class RadialShapeDetails PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RadialShapeDetails) */ {
 public:
  inline RadialShapeDetails() : RadialShapeDetails(nullptr) {};
  virtual ~RadialShapeDetails();

  RadialShapeDetails(const RadialShapeDetails& from);
  RadialShapeDetails(RadialShapeDetails&& from) noexcept
    : RadialShapeDetails() {
    *this = ::std::move(from);
  }

  inline RadialShapeDetails& operator=(const RadialShapeDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadialShapeDetails& operator=(RadialShapeDetails&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RadialShapeDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadialShapeDetails* internal_default_instance() {
    return reinterpret_cast<const RadialShapeDetails*>(
               &_RadialShapeDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(RadialShapeDetails& a, RadialShapeDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(RadialShapeDetails* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RadialShapeDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RadialShapeDetails* New() const final {
    return CreateMaybeMessage<RadialShapeDetails>(nullptr);
  }

  RadialShapeDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RadialShapeDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RadialShapeDetails& from);
  void MergeFrom(const RadialShapeDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadialShapeDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RadialShapeDetails";
  }
  protected:
  explicit RadialShapeDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etsi_5fits_5fcdd_2eproto);
    return ::descriptor_table_etsi_5fits_5fcdd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangeFieldNumber = 1,
    kHorizontalOpeningAngleStartFieldNumber = 2,
    kHorizontalOpeningAngleEndFieldNumber = 3,
    kVerticalOpeningAngleStartFieldNumber = 4,
    kVerticalOpeningAngleEndFieldNumber = 5,
  };
  // required int32 range = 1;
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  ::PROTOBUF_NAMESPACE_ID::int32 range() const;
  void set_range(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_range() const;
  void _internal_set_range(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint32 horizontalOpeningAngleStart = 2;
  bool has_horizontalopeninganglestart() const;
  private:
  bool _internal_has_horizontalopeninganglestart() const;
  public:
  void clear_horizontalopeninganglestart();
  ::PROTOBUF_NAMESPACE_ID::uint32 horizontalopeninganglestart() const;
  void set_horizontalopeninganglestart(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_horizontalopeninganglestart() const;
  void _internal_set_horizontalopeninganglestart(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 horizontalOpeningAngleEnd = 3;
  bool has_horizontalopeningangleend() const;
  private:
  bool _internal_has_horizontalopeningangleend() const;
  public:
  void clear_horizontalopeningangleend();
  ::PROTOBUF_NAMESPACE_ID::uint32 horizontalopeningangleend() const;
  void set_horizontalopeningangleend(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_horizontalopeningangleend() const;
  void _internal_set_horizontalopeningangleend(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 verticalOpeningAngleStart = 4;
  bool has_verticalopeninganglestart() const;
  private:
  bool _internal_has_verticalopeninganglestart() const;
  public:
  void clear_verticalopeninganglestart();
  ::PROTOBUF_NAMESPACE_ID::uint32 verticalopeninganglestart() const;
  void set_verticalopeninganglestart(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_verticalopeninganglestart() const;
  void _internal_set_verticalopeninganglestart(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 verticalOpeningAngleEnd = 5;
  bool has_verticalopeningangleend() const;
  private:
  bool _internal_has_verticalopeningangleend() const;
  public:
  void clear_verticalopeningangleend();
  ::PROTOBUF_NAMESPACE_ID::uint32 verticalopeningangleend() const;
  void set_verticalopeningangleend(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_verticalopeningangleend() const;
  void _internal_set_verticalopeningangleend(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:RadialShapeDetails)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 range_;
  ::PROTOBUF_NAMESPACE_ID::uint32 horizontalopeninganglestart_;
  ::PROTOBUF_NAMESPACE_ID::uint32 horizontalopeningangleend_;
  ::PROTOBUF_NAMESPACE_ID::uint32 verticalopeninganglestart_;
  ::PROTOBUF_NAMESPACE_ID::uint32 verticalopeningangleend_;
  friend struct ::TableStruct_etsi_5fits_5fcdd_2eproto;
};
// -------------------------------------------------------------------

class RectangularShape PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RectangularShape) */ {
 public:
  inline RectangularShape() : RectangularShape(nullptr) {};
  virtual ~RectangularShape();

  RectangularShape(const RectangularShape& from);
  RectangularShape(RectangularShape&& from) noexcept
    : RectangularShape() {
    *this = ::std::move(from);
  }

  inline RectangularShape& operator=(const RectangularShape& from) {
    CopyFrom(from);
    return *this;
  }
  inline RectangularShape& operator=(RectangularShape&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RectangularShape& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RectangularShape* internal_default_instance() {
    return reinterpret_cast<const RectangularShape*>(
               &_RectangularShape_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RectangularShape& a, RectangularShape& b) {
    a.Swap(&b);
  }
  inline void Swap(RectangularShape* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RectangularShape* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RectangularShape* New() const final {
    return CreateMaybeMessage<RectangularShape>(nullptr);
  }

  RectangularShape* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RectangularShape>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RectangularShape& from);
  void MergeFrom(const RectangularShape& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RectangularShape* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RectangularShape";
  }
  protected:
  explicit RectangularShape(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etsi_5fits_5fcdd_2eproto);
    return ::descriptor_table_etsi_5fits_5fcdd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterPointFieldNumber = 1,
    kSemiLengthFieldNumber = 2,
    kSemiBreadthFieldNumber = 3,
    kOrientationFieldNumber = 4,
    kHeightFieldNumber = 5,
  };
  // optional .CartesianPosition3d center_point = 1;
  bool has_center_point() const;
  private:
  bool _internal_has_center_point() const;
  public:
  void clear_center_point();
  const ::CartesianPosition3d& center_point() const;
  ::CartesianPosition3d* release_center_point();
  ::CartesianPosition3d* mutable_center_point();
  void set_allocated_center_point(::CartesianPosition3d* center_point);
  private:
  const ::CartesianPosition3d& _internal_center_point() const;
  ::CartesianPosition3d* _internal_mutable_center_point();
  public:
  void unsafe_arena_set_allocated_center_point(
      ::CartesianPosition3d* center_point);
  ::CartesianPosition3d* unsafe_arena_release_center_point();

  // required uint32 semiLength = 2;
  bool has_semilength() const;
  private:
  bool _internal_has_semilength() const;
  public:
  void clear_semilength();
  ::PROTOBUF_NAMESPACE_ID::uint32 semilength() const;
  void set_semilength(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_semilength() const;
  void _internal_set_semilength(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 semiBreadth = 3;
  bool has_semibreadth() const;
  private:
  bool _internal_has_semibreadth() const;
  public:
  void clear_semibreadth();
  ::PROTOBUF_NAMESPACE_ID::uint32 semibreadth() const;
  void set_semibreadth(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_semibreadth() const;
  void _internal_set_semibreadth(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 orientation = 4;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  ::PROTOBUF_NAMESPACE_ID::uint32 orientation() const;
  void set_orientation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_orientation() const;
  void _internal_set_orientation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 height = 5;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:RectangularShape)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CartesianPosition3d* center_point_;
  ::PROTOBUF_NAMESPACE_ID::uint32 semilength_;
  ::PROTOBUF_NAMESPACE_ID::uint32 semibreadth_;
  ::PROTOBUF_NAMESPACE_ID::uint32 orientation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  friend struct ::TableStruct_etsi_5fits_5fcdd_2eproto;
};
// -------------------------------------------------------------------

class ReferencePosition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReferencePosition) */ {
 public:
  inline ReferencePosition() : ReferencePosition(nullptr) {};
  virtual ~ReferencePosition();

  ReferencePosition(const ReferencePosition& from);
  ReferencePosition(ReferencePosition&& from) noexcept
    : ReferencePosition() {
    *this = ::std::move(from);
  }

  inline ReferencePosition& operator=(const ReferencePosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReferencePosition& operator=(ReferencePosition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReferencePosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReferencePosition* internal_default_instance() {
    return reinterpret_cast<const ReferencePosition*>(
               &_ReferencePosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ReferencePosition& a, ReferencePosition& b) {
    a.Swap(&b);
  }
  inline void Swap(ReferencePosition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReferencePosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReferencePosition* New() const final {
    return CreateMaybeMessage<ReferencePosition>(nullptr);
  }

  ReferencePosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReferencePosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReferencePosition& from);
  void MergeFrom(const ReferencePosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReferencePosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReferencePosition";
  }
  protected:
  explicit ReferencePosition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etsi_5fits_5fcdd_2eproto);
    return ::descriptor_table_etsi_5fits_5fcdd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionConfidenceFieldNumber = 3,
    kAltitudeFieldNumber = 4,
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
  };
  // required .PositionConfidenceEllipse position_confidence = 3;
  bool has_position_confidence() const;
  private:
  bool _internal_has_position_confidence() const;
  public:
  void clear_position_confidence();
  const ::PositionConfidenceEllipse& position_confidence() const;
  ::PositionConfidenceEllipse* release_position_confidence();
  ::PositionConfidenceEllipse* mutable_position_confidence();
  void set_allocated_position_confidence(::PositionConfidenceEllipse* position_confidence);
  private:
  const ::PositionConfidenceEllipse& _internal_position_confidence() const;
  ::PositionConfidenceEllipse* _internal_mutable_position_confidence();
  public:
  void unsafe_arena_set_allocated_position_confidence(
      ::PositionConfidenceEllipse* position_confidence);
  ::PositionConfidenceEllipse* unsafe_arena_release_position_confidence();

  // required .Altitude altitude = 4;
  bool has_altitude() const;
  private:
  bool _internal_has_altitude() const;
  public:
  void clear_altitude();
  const ::Altitude& altitude() const;
  ::Altitude* release_altitude();
  ::Altitude* mutable_altitude();
  void set_allocated_altitude(::Altitude* altitude);
  private:
  const ::Altitude& _internal_altitude() const;
  ::Altitude* _internal_mutable_altitude();
  public:
  void unsafe_arena_set_allocated_altitude(
      ::Altitude* altitude);
  ::Altitude* unsafe_arena_release_altitude();

  // required int64 latitude = 1;
  bool has_latitude() const;
  private:
  bool _internal_has_latitude() const;
  public:
  void clear_latitude();
  ::PROTOBUF_NAMESPACE_ID::int64 latitude() const;
  void set_latitude(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_latitude() const;
  void _internal_set_latitude(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int64 longitude = 2;
  bool has_longitude() const;
  private:
  bool _internal_has_longitude() const;
  public:
  void clear_longitude();
  ::PROTOBUF_NAMESPACE_ID::int64 longitude() const;
  void set_longitude(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_longitude() const;
  void _internal_set_longitude(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ReferencePosition)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PositionConfidenceEllipse* position_confidence_;
  ::Altitude* altitude_;
  ::PROTOBUF_NAMESPACE_ID::int64 latitude_;
  ::PROTOBUF_NAMESPACE_ID::int64 longitude_;
  friend struct ::TableStruct_etsi_5fits_5fcdd_2eproto;
};
// -------------------------------------------------------------------

class RoadSegmentReferenceID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoadSegmentReferenceID) */ {
 public:
  inline RoadSegmentReferenceID() : RoadSegmentReferenceID(nullptr) {};
  virtual ~RoadSegmentReferenceID();

  RoadSegmentReferenceID(const RoadSegmentReferenceID& from);
  RoadSegmentReferenceID(RoadSegmentReferenceID&& from) noexcept
    : RoadSegmentReferenceID() {
    *this = ::std::move(from);
  }

  inline RoadSegmentReferenceID& operator=(const RoadSegmentReferenceID& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoadSegmentReferenceID& operator=(RoadSegmentReferenceID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoadSegmentReferenceID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoadSegmentReferenceID* internal_default_instance() {
    return reinterpret_cast<const RoadSegmentReferenceID*>(
               &_RoadSegmentReferenceID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(RoadSegmentReferenceID& a, RoadSegmentReferenceID& b) {
    a.Swap(&b);
  }
  inline void Swap(RoadSegmentReferenceID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoadSegmentReferenceID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoadSegmentReferenceID* New() const final {
    return CreateMaybeMessage<RoadSegmentReferenceID>(nullptr);
  }

  RoadSegmentReferenceID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoadSegmentReferenceID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoadSegmentReferenceID& from);
  void MergeFrom(const RoadSegmentReferenceID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoadSegmentReferenceID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoadSegmentReferenceID";
  }
  protected:
  explicit RoadSegmentReferenceID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etsi_5fits_5fcdd_2eproto);
    return ::descriptor_table_etsi_5fits_5fcdd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegionFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // optional int64 region = 1;
  bool has_region() const;
  private:
  bool _internal_has_region() const;
  public:
  void clear_region();
  ::PROTOBUF_NAMESPACE_ID::int64 region() const;
  void set_region(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_region() const;
  void _internal_set_region(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int64 id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:RoadSegmentReferenceID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 region_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  friend struct ::TableStruct_etsi_5fits_5fcdd_2eproto;
};
// -------------------------------------------------------------------

class Speed PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Speed) */ {
 public:
  inline Speed() : Speed(nullptr) {};
  virtual ~Speed();

  Speed(const Speed& from);
  Speed(Speed&& from) noexcept
    : Speed() {
    *this = ::std::move(from);
  }

  inline Speed& operator=(const Speed& from) {
    CopyFrom(from);
    return *this;
  }
  inline Speed& operator=(Speed&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Speed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Speed* internal_default_instance() {
    return reinterpret_cast<const Speed*>(
               &_Speed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Speed& a, Speed& b) {
    a.Swap(&b);
  }
  inline void Swap(Speed* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Speed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Speed* New() const final {
    return CreateMaybeMessage<Speed>(nullptr);
  }

  Speed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Speed>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Speed& from);
  void MergeFrom(const Speed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Speed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Speed";
  }
  protected:
  explicit Speed(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etsi_5fits_5fcdd_2eproto);
    return ::descriptor_table_etsi_5fits_5fcdd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kConfidenceFieldNumber = 2,
  };
  // required int32 value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint32 confidence = 2;
  bool has_confidence() const;
  private:
  bool _internal_has_confidence() const;
  public:
  void clear_confidence();
  ::PROTOBUF_NAMESPACE_ID::uint32 confidence() const;
  void set_confidence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_confidence() const;
  void _internal_set_confidence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Speed)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 confidence_;
  friend struct ::TableStruct_etsi_5fits_5fcdd_2eproto;
};
// -------------------------------------------------------------------

class VehicleLength PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VehicleLength) */ {
 public:
  inline VehicleLength() : VehicleLength(nullptr) {};
  virtual ~VehicleLength();

  VehicleLength(const VehicleLength& from);
  VehicleLength(VehicleLength&& from) noexcept
    : VehicleLength() {
    *this = ::std::move(from);
  }

  inline VehicleLength& operator=(const VehicleLength& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleLength& operator=(VehicleLength&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehicleLength& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleLength* internal_default_instance() {
    return reinterpret_cast<const VehicleLength*>(
               &_VehicleLength_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(VehicleLength& a, VehicleLength& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleLength* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleLength* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehicleLength* New() const final {
    return CreateMaybeMessage<VehicleLength>(nullptr);
  }

  VehicleLength* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehicleLength>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VehicleLength& from);
  void MergeFrom(const VehicleLength& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleLength* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VehicleLength";
  }
  protected:
  explicit VehicleLength(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etsi_5fits_5fcdd_2eproto);
    return ::descriptor_table_etsi_5fits_5fcdd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kVehLenConfIndFieldNumber = 2,
  };
  // required int32 value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .VehicleLengthConfidenceIndication veh_len_conf_ind = 2;
  bool has_veh_len_conf_ind() const;
  private:
  bool _internal_has_veh_len_conf_ind() const;
  public:
  void clear_veh_len_conf_ind();
  ::VehicleLengthConfidenceIndication veh_len_conf_ind() const;
  void set_veh_len_conf_ind(::VehicleLengthConfidenceIndication value);
  private:
  ::VehicleLengthConfidenceIndication _internal_veh_len_conf_ind() const;
  void _internal_set_veh_len_conf_ind(::VehicleLengthConfidenceIndication value);
  public:

  // @@protoc_insertion_point(class_scope:VehicleLength)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  int veh_len_conf_ind_;
  friend struct ::TableStruct_etsi_5fits_5fcdd_2eproto;
};
// -------------------------------------------------------------------

class VehicleWidth PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VehicleWidth) */ {
 public:
  inline VehicleWidth() : VehicleWidth(nullptr) {};
  virtual ~VehicleWidth();

  VehicleWidth(const VehicleWidth& from);
  VehicleWidth(VehicleWidth&& from) noexcept
    : VehicleWidth() {
    *this = ::std::move(from);
  }

  inline VehicleWidth& operator=(const VehicleWidth& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleWidth& operator=(VehicleWidth&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehicleWidth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleWidth* internal_default_instance() {
    return reinterpret_cast<const VehicleWidth*>(
               &_VehicleWidth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(VehicleWidth& a, VehicleWidth& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleWidth* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleWidth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehicleWidth* New() const final {
    return CreateMaybeMessage<VehicleWidth>(nullptr);
  }

  VehicleWidth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehicleWidth>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VehicleWidth& from);
  void MergeFrom(const VehicleWidth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleWidth* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VehicleWidth";
  }
  protected:
  explicit VehicleWidth(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etsi_5fits_5fcdd_2eproto);
    return ::descriptor_table_etsi_5fits_5fcdd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // required int32 value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:VehicleWidth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  friend struct ::TableStruct_etsi_5fits_5fcdd_2eproto;
};
// -------------------------------------------------------------------

class Wgs84Angle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Wgs84Angle) */ {
 public:
  inline Wgs84Angle() : Wgs84Angle(nullptr) {};
  virtual ~Wgs84Angle();

  Wgs84Angle(const Wgs84Angle& from);
  Wgs84Angle(Wgs84Angle&& from) noexcept
    : Wgs84Angle() {
    *this = ::std::move(from);
  }

  inline Wgs84Angle& operator=(const Wgs84Angle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Wgs84Angle& operator=(Wgs84Angle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Wgs84Angle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Wgs84Angle* internal_default_instance() {
    return reinterpret_cast<const Wgs84Angle*>(
               &_Wgs84Angle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Wgs84Angle& a, Wgs84Angle& b) {
    a.Swap(&b);
  }
  inline void Swap(Wgs84Angle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Wgs84Angle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Wgs84Angle* New() const final {
    return CreateMaybeMessage<Wgs84Angle>(nullptr);
  }

  Wgs84Angle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Wgs84Angle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Wgs84Angle& from);
  void MergeFrom(const Wgs84Angle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Wgs84Angle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Wgs84Angle";
  }
  protected:
  explicit Wgs84Angle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etsi_5fits_5fcdd_2eproto);
    return ::descriptor_table_etsi_5fits_5fcdd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWgsAngleValueFieldNumber = 1,
    kWgs84AngleConfidenceFieldNumber = 2,
  };
  // required uint32 wgsAngleValue = 1;
  bool has_wgsanglevalue() const;
  private:
  bool _internal_has_wgsanglevalue() const;
  public:
  void clear_wgsanglevalue();
  ::PROTOBUF_NAMESPACE_ID::uint32 wgsanglevalue() const;
  void set_wgsanglevalue(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_wgsanglevalue() const;
  void _internal_set_wgsanglevalue(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 wgs84AngleConfidence = 2;
  bool has_wgs84angleconfidence() const;
  private:
  bool _internal_has_wgs84angleconfidence() const;
  public:
  void clear_wgs84angleconfidence();
  ::PROTOBUF_NAMESPACE_ID::uint32 wgs84angleconfidence() const;
  void set_wgs84angleconfidence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_wgs84angleconfidence() const;
  void _internal_set_wgs84angleconfidence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Wgs84Angle)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 wgsanglevalue_;
  ::PROTOBUF_NAMESPACE_ID::uint32 wgs84angleconfidence_;
  friend struct ::TableStruct_etsi_5fits_5fcdd_2eproto;
};
// -------------------------------------------------------------------

class YawRate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:YawRate) */ {
 public:
  inline YawRate() : YawRate(nullptr) {};
  virtual ~YawRate();

  YawRate(const YawRate& from);
  YawRate(YawRate&& from) noexcept
    : YawRate() {
    *this = ::std::move(from);
  }

  inline YawRate& operator=(const YawRate& from) {
    CopyFrom(from);
    return *this;
  }
  inline YawRate& operator=(YawRate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const YawRate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const YawRate* internal_default_instance() {
    return reinterpret_cast<const YawRate*>(
               &_YawRate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(YawRate& a, YawRate& b) {
    a.Swap(&b);
  }
  inline void Swap(YawRate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(YawRate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline YawRate* New() const final {
    return CreateMaybeMessage<YawRate>(nullptr);
  }

  YawRate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<YawRate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const YawRate& from);
  void MergeFrom(const YawRate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(YawRate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "YawRate";
  }
  protected:
  explicit YawRate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etsi_5fits_5fcdd_2eproto);
    return ::descriptor_table_etsi_5fits_5fcdd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYawratevalueFieldNumber = 1,
    kYawrateconfidenceFieldNumber = 2,
  };
  // required int32 yawratevalue = 1;
  bool has_yawratevalue() const;
  private:
  bool _internal_has_yawratevalue() const;
  public:
  void clear_yawratevalue();
  ::PROTOBUF_NAMESPACE_ID::int32 yawratevalue() const;
  void set_yawratevalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_yawratevalue() const;
  void _internal_set_yawratevalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .YawRateConfidence yawrateconfidence = 2;
  bool has_yawrateconfidence() const;
  private:
  bool _internal_has_yawrateconfidence() const;
  public:
  void clear_yawrateconfidence();
  ::YawRateConfidence yawrateconfidence() const;
  void set_yawrateconfidence(::YawRateConfidence value);
  private:
  ::YawRateConfidence _internal_yawrateconfidence() const;
  void _internal_set_yawrateconfidence(::YawRateConfidence value);
  public:

  // @@protoc_insertion_point(class_scope:YawRate)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 yawratevalue_;
  int yawrateconfidence_;
  friend struct ::TableStruct_etsi_5fits_5fcdd_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Altitude

// required int32 value = 1;
inline bool Altitude::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Altitude::has_value() const {
  return _internal_has_value();
}
inline void Altitude::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Altitude::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Altitude::value() const {
  // @@protoc_insertion_point(field_get:Altitude.value)
  return _internal_value();
}
inline void Altitude::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  value_ = value;
}
inline void Altitude::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Altitude.value)
}

// required uint32 confidence = 2;
inline bool Altitude::_internal_has_confidence() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Altitude::has_confidence() const {
  return _internal_has_confidence();
}
inline void Altitude::clear_confidence() {
  confidence_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Altitude::_internal_confidence() const {
  return confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Altitude::confidence() const {
  // @@protoc_insertion_point(field_get:Altitude.confidence)
  return _internal_confidence();
}
inline void Altitude::_internal_set_confidence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  confidence_ = value;
}
inline void Altitude::set_confidence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:Altitude.confidence)
}

// -------------------------------------------------------------------

// CartesianAngle

// required int64 cartesian_value = 1;
inline bool CartesianAngle::_internal_has_cartesian_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CartesianAngle::has_cartesian_value() const {
  return _internal_has_cartesian_value();
}
inline void CartesianAngle::clear_cartesian_value() {
  cartesian_value_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CartesianAngle::_internal_cartesian_value() const {
  return cartesian_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CartesianAngle::cartesian_value() const {
  // @@protoc_insertion_point(field_get:CartesianAngle.cartesian_value)
  return _internal_cartesian_value();
}
inline void CartesianAngle::_internal_set_cartesian_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  cartesian_value_ = value;
}
inline void CartesianAngle::set_cartesian_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_cartesian_value(value);
  // @@protoc_insertion_point(field_set:CartesianAngle.cartesian_value)
}

// required int64 cartesian_angle_confidence = 2;
inline bool CartesianAngle::_internal_has_cartesian_angle_confidence() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CartesianAngle::has_cartesian_angle_confidence() const {
  return _internal_has_cartesian_angle_confidence();
}
inline void CartesianAngle::clear_cartesian_angle_confidence() {
  cartesian_angle_confidence_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CartesianAngle::_internal_cartesian_angle_confidence() const {
  return cartesian_angle_confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CartesianAngle::cartesian_angle_confidence() const {
  // @@protoc_insertion_point(field_get:CartesianAngle.cartesian_angle_confidence)
  return _internal_cartesian_angle_confidence();
}
inline void CartesianAngle::_internal_set_cartesian_angle_confidence(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  cartesian_angle_confidence_ = value;
}
inline void CartesianAngle::set_cartesian_angle_confidence(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_cartesian_angle_confidence(value);
  // @@protoc_insertion_point(field_set:CartesianAngle.cartesian_angle_confidence)
}

// -------------------------------------------------------------------

// CartesianPosition3d

// required int32 x_cord = 1;
inline bool CartesianPosition3d::_internal_has_x_cord() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CartesianPosition3d::has_x_cord() const {
  return _internal_has_x_cord();
}
inline void CartesianPosition3d::clear_x_cord() {
  x_cord_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CartesianPosition3d::_internal_x_cord() const {
  return x_cord_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CartesianPosition3d::x_cord() const {
  // @@protoc_insertion_point(field_get:CartesianPosition3d.x_cord)
  return _internal_x_cord();
}
inline void CartesianPosition3d::_internal_set_x_cord(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  x_cord_ = value;
}
inline void CartesianPosition3d::set_x_cord(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x_cord(value);
  // @@protoc_insertion_point(field_set:CartesianPosition3d.x_cord)
}

// required int32 y_cord = 2;
inline bool CartesianPosition3d::_internal_has_y_cord() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CartesianPosition3d::has_y_cord() const {
  return _internal_has_y_cord();
}
inline void CartesianPosition3d::clear_y_cord() {
  y_cord_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CartesianPosition3d::_internal_y_cord() const {
  return y_cord_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CartesianPosition3d::y_cord() const {
  // @@protoc_insertion_point(field_get:CartesianPosition3d.y_cord)
  return _internal_y_cord();
}
inline void CartesianPosition3d::_internal_set_y_cord(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  y_cord_ = value;
}
inline void CartesianPosition3d::set_y_cord(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y_cord(value);
  // @@protoc_insertion_point(field_set:CartesianPosition3d.y_cord)
}

// required int32 z_cord = 3;
inline bool CartesianPosition3d::_internal_has_z_cord() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CartesianPosition3d::has_z_cord() const {
  return _internal_has_z_cord();
}
inline void CartesianPosition3d::clear_z_cord() {
  z_cord_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CartesianPosition3d::_internal_z_cord() const {
  return z_cord_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CartesianPosition3d::z_cord() const {
  // @@protoc_insertion_point(field_get:CartesianPosition3d.z_cord)
  return _internal_z_cord();
}
inline void CartesianPosition3d::_internal_set_z_cord(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  z_cord_ = value;
}
inline void CartesianPosition3d::set_z_cord(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_z_cord(value);
  // @@protoc_insertion_point(field_set:CartesianPosition3d.z_cord)
}

// -------------------------------------------------------------------

// CircularShape

// optional .CartesianPosition3d shapeRefPoint = 1;
inline bool CircularShape::_internal_has_shaperefpoint() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || shaperefpoint_ != nullptr);
  return value;
}
inline bool CircularShape::has_shaperefpoint() const {
  return _internal_has_shaperefpoint();
}
inline void CircularShape::clear_shaperefpoint() {
  if (shaperefpoint_ != nullptr) shaperefpoint_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CartesianPosition3d& CircularShape::_internal_shaperefpoint() const {
  const ::CartesianPosition3d* p = shaperefpoint_;
  return p != nullptr ? *p : *reinterpret_cast<const ::CartesianPosition3d*>(
      &::_CartesianPosition3d_default_instance_);
}
inline const ::CartesianPosition3d& CircularShape::shaperefpoint() const {
  // @@protoc_insertion_point(field_get:CircularShape.shapeRefPoint)
  return _internal_shaperefpoint();
}
inline void CircularShape::unsafe_arena_set_allocated_shaperefpoint(
    ::CartesianPosition3d* shaperefpoint) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shaperefpoint_);
  }
  shaperefpoint_ = shaperefpoint;
  if (shaperefpoint) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CircularShape.shapeRefPoint)
}
inline ::CartesianPosition3d* CircularShape::release_shaperefpoint() {
  auto temp = unsafe_arena_release_shaperefpoint();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CartesianPosition3d* CircularShape::unsafe_arena_release_shaperefpoint() {
  // @@protoc_insertion_point(field_release:CircularShape.shapeRefPoint)
  _has_bits_[0] &= ~0x00000001u;
  ::CartesianPosition3d* temp = shaperefpoint_;
  shaperefpoint_ = nullptr;
  return temp;
}
inline ::CartesianPosition3d* CircularShape::_internal_mutable_shaperefpoint() {
  _has_bits_[0] |= 0x00000001u;
  if (shaperefpoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::CartesianPosition3d>(GetArena());
    shaperefpoint_ = p;
  }
  return shaperefpoint_;
}
inline ::CartesianPosition3d* CircularShape::mutable_shaperefpoint() {
  // @@protoc_insertion_point(field_mutable:CircularShape.shapeRefPoint)
  return _internal_mutable_shaperefpoint();
}
inline void CircularShape::set_allocated_shaperefpoint(::CartesianPosition3d* shaperefpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete shaperefpoint_;
  }
  if (shaperefpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shaperefpoint);
    if (message_arena != submessage_arena) {
      shaperefpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shaperefpoint, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  shaperefpoint_ = shaperefpoint;
  // @@protoc_insertion_point(field_set_allocated:CircularShape.shapeRefPoint)
}

// required int32 radius = 2;
inline bool CircularShape::_internal_has_radius() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CircularShape::has_radius() const {
  return _internal_has_radius();
}
inline void CircularShape::clear_radius() {
  radius_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CircularShape::_internal_radius() const {
  return radius_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CircularShape::radius() const {
  // @@protoc_insertion_point(field_get:CircularShape.radius)
  return _internal_radius();
}
inline void CircularShape::_internal_set_radius(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  radius_ = value;
}
inline void CircularShape::set_radius(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:CircularShape.radius)
}

// optional uint32 height = 3;
inline bool CircularShape::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CircularShape::has_height() const {
  return _internal_has_height();
}
inline void CircularShape::clear_height() {
  height_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CircularShape::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CircularShape::height() const {
  // @@protoc_insertion_point(field_get:CircularShape.height)
  return _internal_height();
}
inline void CircularShape::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  height_ = value;
}
inline void CircularShape::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:CircularShape.height)
}

// -------------------------------------------------------------------

// EllipticalShape

// optional .CartesianPosition3d shapeReferencePoint = 1;
inline bool EllipticalShape::_internal_has_shapereferencepoint() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || shapereferencepoint_ != nullptr);
  return value;
}
inline bool EllipticalShape::has_shapereferencepoint() const {
  return _internal_has_shapereferencepoint();
}
inline void EllipticalShape::clear_shapereferencepoint() {
  if (shapereferencepoint_ != nullptr) shapereferencepoint_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CartesianPosition3d& EllipticalShape::_internal_shapereferencepoint() const {
  const ::CartesianPosition3d* p = shapereferencepoint_;
  return p != nullptr ? *p : *reinterpret_cast<const ::CartesianPosition3d*>(
      &::_CartesianPosition3d_default_instance_);
}
inline const ::CartesianPosition3d& EllipticalShape::shapereferencepoint() const {
  // @@protoc_insertion_point(field_get:EllipticalShape.shapeReferencePoint)
  return _internal_shapereferencepoint();
}
inline void EllipticalShape::unsafe_arena_set_allocated_shapereferencepoint(
    ::CartesianPosition3d* shapereferencepoint) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shapereferencepoint_);
  }
  shapereferencepoint_ = shapereferencepoint;
  if (shapereferencepoint) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:EllipticalShape.shapeReferencePoint)
}
inline ::CartesianPosition3d* EllipticalShape::release_shapereferencepoint() {
  auto temp = unsafe_arena_release_shapereferencepoint();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CartesianPosition3d* EllipticalShape::unsafe_arena_release_shapereferencepoint() {
  // @@protoc_insertion_point(field_release:EllipticalShape.shapeReferencePoint)
  _has_bits_[0] &= ~0x00000001u;
  ::CartesianPosition3d* temp = shapereferencepoint_;
  shapereferencepoint_ = nullptr;
  return temp;
}
inline ::CartesianPosition3d* EllipticalShape::_internal_mutable_shapereferencepoint() {
  _has_bits_[0] |= 0x00000001u;
  if (shapereferencepoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::CartesianPosition3d>(GetArena());
    shapereferencepoint_ = p;
  }
  return shapereferencepoint_;
}
inline ::CartesianPosition3d* EllipticalShape::mutable_shapereferencepoint() {
  // @@protoc_insertion_point(field_mutable:EllipticalShape.shapeReferencePoint)
  return _internal_mutable_shapereferencepoint();
}
inline void EllipticalShape::set_allocated_shapereferencepoint(::CartesianPosition3d* shapereferencepoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete shapereferencepoint_;
  }
  if (shapereferencepoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shapereferencepoint);
    if (message_arena != submessage_arena) {
      shapereferencepoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shapereferencepoint, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  shapereferencepoint_ = shapereferencepoint;
  // @@protoc_insertion_point(field_set_allocated:EllipticalShape.shapeReferencePoint)
}

// required uint32 semiMajorAxisLength = 2;
inline bool EllipticalShape::_internal_has_semimajoraxislength() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EllipticalShape::has_semimajoraxislength() const {
  return _internal_has_semimajoraxislength();
}
inline void EllipticalShape::clear_semimajoraxislength() {
  semimajoraxislength_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EllipticalShape::_internal_semimajoraxislength() const {
  return semimajoraxislength_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EllipticalShape::semimajoraxislength() const {
  // @@protoc_insertion_point(field_get:EllipticalShape.semiMajorAxisLength)
  return _internal_semimajoraxislength();
}
inline void EllipticalShape::_internal_set_semimajoraxislength(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  semimajoraxislength_ = value;
}
inline void EllipticalShape::set_semimajoraxislength(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_semimajoraxislength(value);
  // @@protoc_insertion_point(field_set:EllipticalShape.semiMajorAxisLength)
}

// required uint32 semiMinorAxisLength = 3;
inline bool EllipticalShape::_internal_has_semiminoraxislength() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EllipticalShape::has_semiminoraxislength() const {
  return _internal_has_semiminoraxislength();
}
inline void EllipticalShape::clear_semiminoraxislength() {
  semiminoraxislength_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EllipticalShape::_internal_semiminoraxislength() const {
  return semiminoraxislength_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EllipticalShape::semiminoraxislength() const {
  // @@protoc_insertion_point(field_get:EllipticalShape.semiMinorAxisLength)
  return _internal_semiminoraxislength();
}
inline void EllipticalShape::_internal_set_semiminoraxislength(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  semiminoraxislength_ = value;
}
inline void EllipticalShape::set_semiminoraxislength(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_semiminoraxislength(value);
  // @@protoc_insertion_point(field_set:EllipticalShape.semiMinorAxisLength)
}

// optional uint32 orientation = 4;
inline bool EllipticalShape::_internal_has_orientation() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool EllipticalShape::has_orientation() const {
  return _internal_has_orientation();
}
inline void EllipticalShape::clear_orientation() {
  orientation_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EllipticalShape::_internal_orientation() const {
  return orientation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EllipticalShape::orientation() const {
  // @@protoc_insertion_point(field_get:EllipticalShape.orientation)
  return _internal_orientation();
}
inline void EllipticalShape::_internal_set_orientation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  orientation_ = value;
}
inline void EllipticalShape::set_orientation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_orientation(value);
  // @@protoc_insertion_point(field_set:EllipticalShape.orientation)
}

// optional uint32 height = 5;
inline bool EllipticalShape::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool EllipticalShape::has_height() const {
  return _internal_has_height();
}
inline void EllipticalShape::clear_height() {
  height_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EllipticalShape::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EllipticalShape::height() const {
  // @@protoc_insertion_point(field_get:EllipticalShape.height)
  return _internal_height();
}
inline void EllipticalShape::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  height_ = value;
}
inline void EllipticalShape::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:EllipticalShape.height)
}

// -------------------------------------------------------------------

// Curvature

// required int32 value = 1;
inline bool Curvature::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Curvature::has_value() const {
  return _internal_has_value();
}
inline void Curvature::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Curvature::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Curvature::value() const {
  // @@protoc_insertion_point(field_get:Curvature.value)
  return _internal_value();
}
inline void Curvature::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  value_ = value;
}
inline void Curvature::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Curvature.value)
}

// optional int32 confidence = 2;
inline bool Curvature::_internal_has_confidence() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Curvature::has_confidence() const {
  return _internal_has_confidence();
}
inline void Curvature::clear_confidence() {
  confidence_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Curvature::_internal_confidence() const {
  return confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Curvature::confidence() const {
  // @@protoc_insertion_point(field_get:Curvature.confidence)
  return _internal_confidence();
}
inline void Curvature::_internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  confidence_ = value;
}
inline void Curvature::set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:Curvature.confidence)
}

// -------------------------------------------------------------------

// Heading

// required int32 value = 1;
inline bool Heading::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Heading::has_value() const {
  return _internal_has_value();
}
inline void Heading::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Heading::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Heading::value() const {
  // @@protoc_insertion_point(field_get:Heading.value)
  return _internal_value();
}
inline void Heading::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  value_ = value;
}
inline void Heading::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Heading.value)
}

// required uint32 confidence = 2;
inline bool Heading::_internal_has_confidence() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Heading::has_confidence() const {
  return _internal_has_confidence();
}
inline void Heading::clear_confidence() {
  confidence_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Heading::_internal_confidence() const {
  return confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Heading::confidence() const {
  // @@protoc_insertion_point(field_get:Heading.confidence)
  return _internal_confidence();
}
inline void Heading::_internal_set_confidence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  confidence_ = value;
}
inline void Heading::set_confidence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:Heading.confidence)
}

// -------------------------------------------------------------------

// IntersectionReferenceID

// optional int64 region = 1;
inline bool IntersectionReferenceID::_internal_has_region() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IntersectionReferenceID::has_region() const {
  return _internal_has_region();
}
inline void IntersectionReferenceID::clear_region() {
  region_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IntersectionReferenceID::_internal_region() const {
  return region_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IntersectionReferenceID::region() const {
  // @@protoc_insertion_point(field_get:IntersectionReferenceID.region)
  return _internal_region();
}
inline void IntersectionReferenceID::_internal_set_region(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  region_ = value;
}
inline void IntersectionReferenceID::set_region(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_region(value);
  // @@protoc_insertion_point(field_set:IntersectionReferenceID.region)
}

// optional int64 id = 2;
inline bool IntersectionReferenceID::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool IntersectionReferenceID::has_id() const {
  return _internal_has_id();
}
inline void IntersectionReferenceID::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IntersectionReferenceID::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IntersectionReferenceID::id() const {
  // @@protoc_insertion_point(field_get:IntersectionReferenceID.id)
  return _internal_id();
}
inline void IntersectionReferenceID::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void IntersectionReferenceID::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:IntersectionReferenceID.id)
}

// -------------------------------------------------------------------

// LongitudinalAcceleration

// required int32 value = 1;
inline bool LongitudinalAcceleration::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LongitudinalAcceleration::has_value() const {
  return _internal_has_value();
}
inline void LongitudinalAcceleration::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LongitudinalAcceleration::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LongitudinalAcceleration::value() const {
  // @@protoc_insertion_point(field_get:LongitudinalAcceleration.value)
  return _internal_value();
}
inline void LongitudinalAcceleration::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  value_ = value;
}
inline void LongitudinalAcceleration::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:LongitudinalAcceleration.value)
}

// optional int32 confidence = 2;
inline bool LongitudinalAcceleration::_internal_has_confidence() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LongitudinalAcceleration::has_confidence() const {
  return _internal_has_confidence();
}
inline void LongitudinalAcceleration::clear_confidence() {
  confidence_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LongitudinalAcceleration::_internal_confidence() const {
  return confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LongitudinalAcceleration::confidence() const {
  // @@protoc_insertion_point(field_get:LongitudinalAcceleration.confidence)
  return _internal_confidence();
}
inline void LongitudinalAcceleration::_internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  confidence_ = value;
}
inline void LongitudinalAcceleration::set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:LongitudinalAcceleration.confidence)
}

// -------------------------------------------------------------------

// PolygonalShape

// optional .CartesianPosition3d shapeReferencePoint = 1;
inline bool PolygonalShape::_internal_has_shapereferencepoint() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || shapereferencepoint_ != nullptr);
  return value;
}
inline bool PolygonalShape::has_shapereferencepoint() const {
  return _internal_has_shapereferencepoint();
}
inline void PolygonalShape::clear_shapereferencepoint() {
  if (shapereferencepoint_ != nullptr) shapereferencepoint_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CartesianPosition3d& PolygonalShape::_internal_shapereferencepoint() const {
  const ::CartesianPosition3d* p = shapereferencepoint_;
  return p != nullptr ? *p : *reinterpret_cast<const ::CartesianPosition3d*>(
      &::_CartesianPosition3d_default_instance_);
}
inline const ::CartesianPosition3d& PolygonalShape::shapereferencepoint() const {
  // @@protoc_insertion_point(field_get:PolygonalShape.shapeReferencePoint)
  return _internal_shapereferencepoint();
}
inline void PolygonalShape::unsafe_arena_set_allocated_shapereferencepoint(
    ::CartesianPosition3d* shapereferencepoint) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shapereferencepoint_);
  }
  shapereferencepoint_ = shapereferencepoint;
  if (shapereferencepoint) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PolygonalShape.shapeReferencePoint)
}
inline ::CartesianPosition3d* PolygonalShape::release_shapereferencepoint() {
  auto temp = unsafe_arena_release_shapereferencepoint();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CartesianPosition3d* PolygonalShape::unsafe_arena_release_shapereferencepoint() {
  // @@protoc_insertion_point(field_release:PolygonalShape.shapeReferencePoint)
  _has_bits_[0] &= ~0x00000001u;
  ::CartesianPosition3d* temp = shapereferencepoint_;
  shapereferencepoint_ = nullptr;
  return temp;
}
inline ::CartesianPosition3d* PolygonalShape::_internal_mutable_shapereferencepoint() {
  _has_bits_[0] |= 0x00000001u;
  if (shapereferencepoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::CartesianPosition3d>(GetArena());
    shapereferencepoint_ = p;
  }
  return shapereferencepoint_;
}
inline ::CartesianPosition3d* PolygonalShape::mutable_shapereferencepoint() {
  // @@protoc_insertion_point(field_mutable:PolygonalShape.shapeReferencePoint)
  return _internal_mutable_shapereferencepoint();
}
inline void PolygonalShape::set_allocated_shapereferencepoint(::CartesianPosition3d* shapereferencepoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete shapereferencepoint_;
  }
  if (shapereferencepoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shapereferencepoint);
    if (message_arena != submessage_arena) {
      shapereferencepoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shapereferencepoint, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  shapereferencepoint_ = shapereferencepoint;
  // @@protoc_insertion_point(field_set_allocated:PolygonalShape.shapeReferencePoint)
}

// repeated .CartesianPosition3d polygon = 2;
inline int PolygonalShape::_internal_polygon_size() const {
  return polygon_.size();
}
inline int PolygonalShape::polygon_size() const {
  return _internal_polygon_size();
}
inline void PolygonalShape::clear_polygon() {
  polygon_.Clear();
}
inline ::CartesianPosition3d* PolygonalShape::mutable_polygon(int index) {
  // @@protoc_insertion_point(field_mutable:PolygonalShape.polygon)
  return polygon_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CartesianPosition3d >*
PolygonalShape::mutable_polygon() {
  // @@protoc_insertion_point(field_mutable_list:PolygonalShape.polygon)
  return &polygon_;
}
inline const ::CartesianPosition3d& PolygonalShape::_internal_polygon(int index) const {
  return polygon_.Get(index);
}
inline const ::CartesianPosition3d& PolygonalShape::polygon(int index) const {
  // @@protoc_insertion_point(field_get:PolygonalShape.polygon)
  return _internal_polygon(index);
}
inline ::CartesianPosition3d* PolygonalShape::_internal_add_polygon() {
  return polygon_.Add();
}
inline ::CartesianPosition3d* PolygonalShape::add_polygon() {
  // @@protoc_insertion_point(field_add:PolygonalShape.polygon)
  return _internal_add_polygon();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CartesianPosition3d >&
PolygonalShape::polygon() const {
  // @@protoc_insertion_point(field_list:PolygonalShape.polygon)
  return polygon_;
}

// optional uint32 height = 3;
inline bool PolygonalShape::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PolygonalShape::has_height() const {
  return _internal_has_height();
}
inline void PolygonalShape::clear_height() {
  height_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PolygonalShape::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PolygonalShape::height() const {
  // @@protoc_insertion_point(field_get:PolygonalShape.height)
  return _internal_height();
}
inline void PolygonalShape::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  height_ = value;
}
inline void PolygonalShape::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:PolygonalShape.height)
}

// -------------------------------------------------------------------

// PositionConfidenceEllipse

// required uint32 semi_major_confidence = 1;
inline bool PositionConfidenceEllipse::_internal_has_semi_major_confidence() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PositionConfidenceEllipse::has_semi_major_confidence() const {
  return _internal_has_semi_major_confidence();
}
inline void PositionConfidenceEllipse::clear_semi_major_confidence() {
  semi_major_confidence_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PositionConfidenceEllipse::_internal_semi_major_confidence() const {
  return semi_major_confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PositionConfidenceEllipse::semi_major_confidence() const {
  // @@protoc_insertion_point(field_get:PositionConfidenceEllipse.semi_major_confidence)
  return _internal_semi_major_confidence();
}
inline void PositionConfidenceEllipse::_internal_set_semi_major_confidence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  semi_major_confidence_ = value;
}
inline void PositionConfidenceEllipse::set_semi_major_confidence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_semi_major_confidence(value);
  // @@protoc_insertion_point(field_set:PositionConfidenceEllipse.semi_major_confidence)
}

// required uint32 semi_minor_confidence = 2;
inline bool PositionConfidenceEllipse::_internal_has_semi_minor_confidence() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PositionConfidenceEllipse::has_semi_minor_confidence() const {
  return _internal_has_semi_minor_confidence();
}
inline void PositionConfidenceEllipse::clear_semi_minor_confidence() {
  semi_minor_confidence_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PositionConfidenceEllipse::_internal_semi_minor_confidence() const {
  return semi_minor_confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PositionConfidenceEllipse::semi_minor_confidence() const {
  // @@protoc_insertion_point(field_get:PositionConfidenceEllipse.semi_minor_confidence)
  return _internal_semi_minor_confidence();
}
inline void PositionConfidenceEllipse::_internal_set_semi_minor_confidence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  semi_minor_confidence_ = value;
}
inline void PositionConfidenceEllipse::set_semi_minor_confidence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_semi_minor_confidence(value);
  // @@protoc_insertion_point(field_set:PositionConfidenceEllipse.semi_minor_confidence)
}

// required uint32 semi_major_orientation = 3;
inline bool PositionConfidenceEllipse::_internal_has_semi_major_orientation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PositionConfidenceEllipse::has_semi_major_orientation() const {
  return _internal_has_semi_major_orientation();
}
inline void PositionConfidenceEllipse::clear_semi_major_orientation() {
  semi_major_orientation_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PositionConfidenceEllipse::_internal_semi_major_orientation() const {
  return semi_major_orientation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PositionConfidenceEllipse::semi_major_orientation() const {
  // @@protoc_insertion_point(field_get:PositionConfidenceEllipse.semi_major_orientation)
  return _internal_semi_major_orientation();
}
inline void PositionConfidenceEllipse::_internal_set_semi_major_orientation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  semi_major_orientation_ = value;
}
inline void PositionConfidenceEllipse::set_semi_major_orientation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_semi_major_orientation(value);
  // @@protoc_insertion_point(field_set:PositionConfidenceEllipse.semi_major_orientation)
}

// -------------------------------------------------------------------

// RadialShape

// optional .CartesianPosition3d sharedRefPoint = 1;
inline bool RadialShape::_internal_has_sharedrefpoint() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || sharedrefpoint_ != nullptr);
  return value;
}
inline bool RadialShape::has_sharedrefpoint() const {
  return _internal_has_sharedrefpoint();
}
inline void RadialShape::clear_sharedrefpoint() {
  if (sharedrefpoint_ != nullptr) sharedrefpoint_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CartesianPosition3d& RadialShape::_internal_sharedrefpoint() const {
  const ::CartesianPosition3d* p = sharedrefpoint_;
  return p != nullptr ? *p : *reinterpret_cast<const ::CartesianPosition3d*>(
      &::_CartesianPosition3d_default_instance_);
}
inline const ::CartesianPosition3d& RadialShape::sharedrefpoint() const {
  // @@protoc_insertion_point(field_get:RadialShape.sharedRefPoint)
  return _internal_sharedrefpoint();
}
inline void RadialShape::unsafe_arena_set_allocated_sharedrefpoint(
    ::CartesianPosition3d* sharedrefpoint) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sharedrefpoint_);
  }
  sharedrefpoint_ = sharedrefpoint;
  if (sharedrefpoint) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RadialShape.sharedRefPoint)
}
inline ::CartesianPosition3d* RadialShape::release_sharedrefpoint() {
  auto temp = unsafe_arena_release_sharedrefpoint();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CartesianPosition3d* RadialShape::unsafe_arena_release_sharedrefpoint() {
  // @@protoc_insertion_point(field_release:RadialShape.sharedRefPoint)
  _has_bits_[0] &= ~0x00000001u;
  ::CartesianPosition3d* temp = sharedrefpoint_;
  sharedrefpoint_ = nullptr;
  return temp;
}
inline ::CartesianPosition3d* RadialShape::_internal_mutable_sharedrefpoint() {
  _has_bits_[0] |= 0x00000001u;
  if (sharedrefpoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::CartesianPosition3d>(GetArena());
    sharedrefpoint_ = p;
  }
  return sharedrefpoint_;
}
inline ::CartesianPosition3d* RadialShape::mutable_sharedrefpoint() {
  // @@protoc_insertion_point(field_mutable:RadialShape.sharedRefPoint)
  return _internal_mutable_sharedrefpoint();
}
inline void RadialShape::set_allocated_sharedrefpoint(::CartesianPosition3d* sharedrefpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sharedrefpoint_;
  }
  if (sharedrefpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sharedrefpoint);
    if (message_arena != submessage_arena) {
      sharedrefpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sharedrefpoint, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sharedrefpoint_ = sharedrefpoint;
  // @@protoc_insertion_point(field_set_allocated:RadialShape.sharedRefPoint)
}

// required uint32 range = 2;
inline bool RadialShape::_internal_has_range() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RadialShape::has_range() const {
  return _internal_has_range();
}
inline void RadialShape::clear_range() {
  range_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadialShape::_internal_range() const {
  return range_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadialShape::range() const {
  // @@protoc_insertion_point(field_get:RadialShape.range)
  return _internal_range();
}
inline void RadialShape::_internal_set_range(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  range_ = value;
}
inline void RadialShape::set_range(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:RadialShape.range)
}

// required uint32 stationaryHorizontalOpeningAngleStart = 3;
inline bool RadialShape::_internal_has_stationaryhorizontalopeninganglestart() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RadialShape::has_stationaryhorizontalopeninganglestart() const {
  return _internal_has_stationaryhorizontalopeninganglestart();
}
inline void RadialShape::clear_stationaryhorizontalopeninganglestart() {
  stationaryhorizontalopeninganglestart_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadialShape::_internal_stationaryhorizontalopeninganglestart() const {
  return stationaryhorizontalopeninganglestart_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadialShape::stationaryhorizontalopeninganglestart() const {
  // @@protoc_insertion_point(field_get:RadialShape.stationaryHorizontalOpeningAngleStart)
  return _internal_stationaryhorizontalopeninganglestart();
}
inline void RadialShape::_internal_set_stationaryhorizontalopeninganglestart(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  stationaryhorizontalopeninganglestart_ = value;
}
inline void RadialShape::set_stationaryhorizontalopeninganglestart(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stationaryhorizontalopeninganglestart(value);
  // @@protoc_insertion_point(field_set:RadialShape.stationaryHorizontalOpeningAngleStart)
}

// required uint32 stationaryHorizontalOpeningAngleEnd = 4;
inline bool RadialShape::_internal_has_stationaryhorizontalopeningangleend() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RadialShape::has_stationaryhorizontalopeningangleend() const {
  return _internal_has_stationaryhorizontalopeningangleend();
}
inline void RadialShape::clear_stationaryhorizontalopeningangleend() {
  stationaryhorizontalopeningangleend_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadialShape::_internal_stationaryhorizontalopeningangleend() const {
  return stationaryhorizontalopeningangleend_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadialShape::stationaryhorizontalopeningangleend() const {
  // @@protoc_insertion_point(field_get:RadialShape.stationaryHorizontalOpeningAngleEnd)
  return _internal_stationaryhorizontalopeningangleend();
}
inline void RadialShape::_internal_set_stationaryhorizontalopeningangleend(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  stationaryhorizontalopeningangleend_ = value;
}
inline void RadialShape::set_stationaryhorizontalopeningangleend(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stationaryhorizontalopeningangleend(value);
  // @@protoc_insertion_point(field_set:RadialShape.stationaryHorizontalOpeningAngleEnd)
}

// optional uint32 verticalOpeningAngleStart = 5;
inline bool RadialShape::_internal_has_verticalopeninganglestart() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RadialShape::has_verticalopeninganglestart() const {
  return _internal_has_verticalopeninganglestart();
}
inline void RadialShape::clear_verticalopeninganglestart() {
  verticalopeninganglestart_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadialShape::_internal_verticalopeninganglestart() const {
  return verticalopeninganglestart_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadialShape::verticalopeninganglestart() const {
  // @@protoc_insertion_point(field_get:RadialShape.verticalOpeningAngleStart)
  return _internal_verticalopeninganglestart();
}
inline void RadialShape::_internal_set_verticalopeninganglestart(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  verticalopeninganglestart_ = value;
}
inline void RadialShape::set_verticalopeninganglestart(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_verticalopeninganglestart(value);
  // @@protoc_insertion_point(field_set:RadialShape.verticalOpeningAngleStart)
}

// optional uint32 verticalOpeningAngleEnd = 6;
inline bool RadialShape::_internal_has_verticalopeningangleend() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RadialShape::has_verticalopeningangleend() const {
  return _internal_has_verticalopeningangleend();
}
inline void RadialShape::clear_verticalopeningangleend() {
  verticalopeningangleend_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadialShape::_internal_verticalopeningangleend() const {
  return verticalopeningangleend_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadialShape::verticalopeningangleend() const {
  // @@protoc_insertion_point(field_get:RadialShape.verticalOpeningAngleEnd)
  return _internal_verticalopeningangleend();
}
inline void RadialShape::_internal_set_verticalopeningangleend(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  verticalopeningangleend_ = value;
}
inline void RadialShape::set_verticalopeningangleend(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_verticalopeningangleend(value);
  // @@protoc_insertion_point(field_set:RadialShape.verticalOpeningAngleEnd)
}

// -------------------------------------------------------------------

// RadialShapes

// required uint32 refPointID = 1;
inline bool RadialShapes::_internal_has_refpointid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RadialShapes::has_refpointid() const {
  return _internal_has_refpointid();
}
inline void RadialShapes::clear_refpointid() {
  refpointid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadialShapes::_internal_refpointid() const {
  return refpointid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadialShapes::refpointid() const {
  // @@protoc_insertion_point(field_get:RadialShapes.refPointID)
  return _internal_refpointid();
}
inline void RadialShapes::_internal_set_refpointid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  refpointid_ = value;
}
inline void RadialShapes::set_refpointid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_refpointid(value);
  // @@protoc_insertion_point(field_set:RadialShapes.refPointID)
}

// required int32 x_cord = 2;
inline bool RadialShapes::_internal_has_x_cord() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RadialShapes::has_x_cord() const {
  return _internal_has_x_cord();
}
inline void RadialShapes::clear_x_cord() {
  x_cord_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RadialShapes::_internal_x_cord() const {
  return x_cord_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RadialShapes::x_cord() const {
  // @@protoc_insertion_point(field_get:RadialShapes.x_cord)
  return _internal_x_cord();
}
inline void RadialShapes::_internal_set_x_cord(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  x_cord_ = value;
}
inline void RadialShapes::set_x_cord(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x_cord(value);
  // @@protoc_insertion_point(field_set:RadialShapes.x_cord)
}

// required int32 y_cord = 3;
inline bool RadialShapes::_internal_has_y_cord() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RadialShapes::has_y_cord() const {
  return _internal_has_y_cord();
}
inline void RadialShapes::clear_y_cord() {
  y_cord_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RadialShapes::_internal_y_cord() const {
  return y_cord_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RadialShapes::y_cord() const {
  // @@protoc_insertion_point(field_get:RadialShapes.y_cord)
  return _internal_y_cord();
}
inline void RadialShapes::_internal_set_y_cord(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  y_cord_ = value;
}
inline void RadialShapes::set_y_cord(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y_cord(value);
  // @@protoc_insertion_point(field_set:RadialShapes.y_cord)
}

// optional int32 z_cord = 4;
inline bool RadialShapes::_internal_has_z_cord() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RadialShapes::has_z_cord() const {
  return _internal_has_z_cord();
}
inline void RadialShapes::clear_z_cord() {
  z_cord_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RadialShapes::_internal_z_cord() const {
  return z_cord_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RadialShapes::z_cord() const {
  // @@protoc_insertion_point(field_get:RadialShapes.z_cord)
  return _internal_z_cord();
}
inline void RadialShapes::_internal_set_z_cord(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  z_cord_ = value;
}
inline void RadialShapes::set_z_cord(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_z_cord(value);
  // @@protoc_insertion_point(field_set:RadialShapes.z_cord)
}

// repeated .RadialShapeDetails radialShapesList = 6;
inline int RadialShapes::_internal_radialshapeslist_size() const {
  return radialshapeslist_.size();
}
inline int RadialShapes::radialshapeslist_size() const {
  return _internal_radialshapeslist_size();
}
inline void RadialShapes::clear_radialshapeslist() {
  radialshapeslist_.Clear();
}
inline ::RadialShapeDetails* RadialShapes::mutable_radialshapeslist(int index) {
  // @@protoc_insertion_point(field_mutable:RadialShapes.radialShapesList)
  return radialshapeslist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RadialShapeDetails >*
RadialShapes::mutable_radialshapeslist() {
  // @@protoc_insertion_point(field_mutable_list:RadialShapes.radialShapesList)
  return &radialshapeslist_;
}
inline const ::RadialShapeDetails& RadialShapes::_internal_radialshapeslist(int index) const {
  return radialshapeslist_.Get(index);
}
inline const ::RadialShapeDetails& RadialShapes::radialshapeslist(int index) const {
  // @@protoc_insertion_point(field_get:RadialShapes.radialShapesList)
  return _internal_radialshapeslist(index);
}
inline ::RadialShapeDetails* RadialShapes::_internal_add_radialshapeslist() {
  return radialshapeslist_.Add();
}
inline ::RadialShapeDetails* RadialShapes::add_radialshapeslist() {
  // @@protoc_insertion_point(field_add:RadialShapes.radialShapesList)
  return _internal_add_radialshapeslist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RadialShapeDetails >&
RadialShapes::radialshapeslist() const {
  // @@protoc_insertion_point(field_list:RadialShapes.radialShapesList)
  return radialshapeslist_;
}

// -------------------------------------------------------------------

// RadialShapeDetails

// required int32 range = 1;
inline bool RadialShapeDetails::_internal_has_range() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RadialShapeDetails::has_range() const {
  return _internal_has_range();
}
inline void RadialShapeDetails::clear_range() {
  range_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RadialShapeDetails::_internal_range() const {
  return range_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RadialShapeDetails::range() const {
  // @@protoc_insertion_point(field_get:RadialShapeDetails.range)
  return _internal_range();
}
inline void RadialShapeDetails::_internal_set_range(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  range_ = value;
}
inline void RadialShapeDetails::set_range(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:RadialShapeDetails.range)
}

// required uint32 horizontalOpeningAngleStart = 2;
inline bool RadialShapeDetails::_internal_has_horizontalopeninganglestart() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RadialShapeDetails::has_horizontalopeninganglestart() const {
  return _internal_has_horizontalopeninganglestart();
}
inline void RadialShapeDetails::clear_horizontalopeninganglestart() {
  horizontalopeninganglestart_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadialShapeDetails::_internal_horizontalopeninganglestart() const {
  return horizontalopeninganglestart_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadialShapeDetails::horizontalopeninganglestart() const {
  // @@protoc_insertion_point(field_get:RadialShapeDetails.horizontalOpeningAngleStart)
  return _internal_horizontalopeninganglestart();
}
inline void RadialShapeDetails::_internal_set_horizontalopeninganglestart(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  horizontalopeninganglestart_ = value;
}
inline void RadialShapeDetails::set_horizontalopeninganglestart(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_horizontalopeninganglestart(value);
  // @@protoc_insertion_point(field_set:RadialShapeDetails.horizontalOpeningAngleStart)
}

// required uint32 horizontalOpeningAngleEnd = 3;
inline bool RadialShapeDetails::_internal_has_horizontalopeningangleend() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RadialShapeDetails::has_horizontalopeningangleend() const {
  return _internal_has_horizontalopeningangleend();
}
inline void RadialShapeDetails::clear_horizontalopeningangleend() {
  horizontalopeningangleend_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadialShapeDetails::_internal_horizontalopeningangleend() const {
  return horizontalopeningangleend_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadialShapeDetails::horizontalopeningangleend() const {
  // @@protoc_insertion_point(field_get:RadialShapeDetails.horizontalOpeningAngleEnd)
  return _internal_horizontalopeningangleend();
}
inline void RadialShapeDetails::_internal_set_horizontalopeningangleend(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  horizontalopeningangleend_ = value;
}
inline void RadialShapeDetails::set_horizontalopeningangleend(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_horizontalopeningangleend(value);
  // @@protoc_insertion_point(field_set:RadialShapeDetails.horizontalOpeningAngleEnd)
}

// optional uint32 verticalOpeningAngleStart = 4;
inline bool RadialShapeDetails::_internal_has_verticalopeninganglestart() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RadialShapeDetails::has_verticalopeninganglestart() const {
  return _internal_has_verticalopeninganglestart();
}
inline void RadialShapeDetails::clear_verticalopeninganglestart() {
  verticalopeninganglestart_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadialShapeDetails::_internal_verticalopeninganglestart() const {
  return verticalopeninganglestart_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadialShapeDetails::verticalopeninganglestart() const {
  // @@protoc_insertion_point(field_get:RadialShapeDetails.verticalOpeningAngleStart)
  return _internal_verticalopeninganglestart();
}
inline void RadialShapeDetails::_internal_set_verticalopeninganglestart(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  verticalopeninganglestart_ = value;
}
inline void RadialShapeDetails::set_verticalopeninganglestart(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_verticalopeninganglestart(value);
  // @@protoc_insertion_point(field_set:RadialShapeDetails.verticalOpeningAngleStart)
}

// optional uint32 verticalOpeningAngleEnd = 5;
inline bool RadialShapeDetails::_internal_has_verticalopeningangleend() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RadialShapeDetails::has_verticalopeningangleend() const {
  return _internal_has_verticalopeningangleend();
}
inline void RadialShapeDetails::clear_verticalopeningangleend() {
  verticalopeningangleend_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadialShapeDetails::_internal_verticalopeningangleend() const {
  return verticalopeningangleend_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadialShapeDetails::verticalopeningangleend() const {
  // @@protoc_insertion_point(field_get:RadialShapeDetails.verticalOpeningAngleEnd)
  return _internal_verticalopeningangleend();
}
inline void RadialShapeDetails::_internal_set_verticalopeningangleend(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  verticalopeningangleend_ = value;
}
inline void RadialShapeDetails::set_verticalopeningangleend(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_verticalopeningangleend(value);
  // @@protoc_insertion_point(field_set:RadialShapeDetails.verticalOpeningAngleEnd)
}

// -------------------------------------------------------------------

// RectangularShape

// optional .CartesianPosition3d center_point = 1;
inline bool RectangularShape::_internal_has_center_point() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || center_point_ != nullptr);
  return value;
}
inline bool RectangularShape::has_center_point() const {
  return _internal_has_center_point();
}
inline void RectangularShape::clear_center_point() {
  if (center_point_ != nullptr) center_point_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CartesianPosition3d& RectangularShape::_internal_center_point() const {
  const ::CartesianPosition3d* p = center_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::CartesianPosition3d*>(
      &::_CartesianPosition3d_default_instance_);
}
inline const ::CartesianPosition3d& RectangularShape::center_point() const {
  // @@protoc_insertion_point(field_get:RectangularShape.center_point)
  return _internal_center_point();
}
inline void RectangularShape::unsafe_arena_set_allocated_center_point(
    ::CartesianPosition3d* center_point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_point_);
  }
  center_point_ = center_point;
  if (center_point) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RectangularShape.center_point)
}
inline ::CartesianPosition3d* RectangularShape::release_center_point() {
  auto temp = unsafe_arena_release_center_point();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CartesianPosition3d* RectangularShape::unsafe_arena_release_center_point() {
  // @@protoc_insertion_point(field_release:RectangularShape.center_point)
  _has_bits_[0] &= ~0x00000001u;
  ::CartesianPosition3d* temp = center_point_;
  center_point_ = nullptr;
  return temp;
}
inline ::CartesianPosition3d* RectangularShape::_internal_mutable_center_point() {
  _has_bits_[0] |= 0x00000001u;
  if (center_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::CartesianPosition3d>(GetArena());
    center_point_ = p;
  }
  return center_point_;
}
inline ::CartesianPosition3d* RectangularShape::mutable_center_point() {
  // @@protoc_insertion_point(field_mutable:RectangularShape.center_point)
  return _internal_mutable_center_point();
}
inline void RectangularShape::set_allocated_center_point(::CartesianPosition3d* center_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete center_point_;
  }
  if (center_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(center_point);
    if (message_arena != submessage_arena) {
      center_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center_point, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  center_point_ = center_point;
  // @@protoc_insertion_point(field_set_allocated:RectangularShape.center_point)
}

// required uint32 semiLength = 2;
inline bool RectangularShape::_internal_has_semilength() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RectangularShape::has_semilength() const {
  return _internal_has_semilength();
}
inline void RectangularShape::clear_semilength() {
  semilength_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RectangularShape::_internal_semilength() const {
  return semilength_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RectangularShape::semilength() const {
  // @@protoc_insertion_point(field_get:RectangularShape.semiLength)
  return _internal_semilength();
}
inline void RectangularShape::_internal_set_semilength(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  semilength_ = value;
}
inline void RectangularShape::set_semilength(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_semilength(value);
  // @@protoc_insertion_point(field_set:RectangularShape.semiLength)
}

// required uint32 semiBreadth = 3;
inline bool RectangularShape::_internal_has_semibreadth() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RectangularShape::has_semibreadth() const {
  return _internal_has_semibreadth();
}
inline void RectangularShape::clear_semibreadth() {
  semibreadth_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RectangularShape::_internal_semibreadth() const {
  return semibreadth_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RectangularShape::semibreadth() const {
  // @@protoc_insertion_point(field_get:RectangularShape.semiBreadth)
  return _internal_semibreadth();
}
inline void RectangularShape::_internal_set_semibreadth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  semibreadth_ = value;
}
inline void RectangularShape::set_semibreadth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_semibreadth(value);
  // @@protoc_insertion_point(field_set:RectangularShape.semiBreadth)
}

// optional uint32 orientation = 4;
inline bool RectangularShape::_internal_has_orientation() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RectangularShape::has_orientation() const {
  return _internal_has_orientation();
}
inline void RectangularShape::clear_orientation() {
  orientation_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RectangularShape::_internal_orientation() const {
  return orientation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RectangularShape::orientation() const {
  // @@protoc_insertion_point(field_get:RectangularShape.orientation)
  return _internal_orientation();
}
inline void RectangularShape::_internal_set_orientation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  orientation_ = value;
}
inline void RectangularShape::set_orientation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_orientation(value);
  // @@protoc_insertion_point(field_set:RectangularShape.orientation)
}

// optional uint32 height = 5;
inline bool RectangularShape::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RectangularShape::has_height() const {
  return _internal_has_height();
}
inline void RectangularShape::clear_height() {
  height_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RectangularShape::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RectangularShape::height() const {
  // @@protoc_insertion_point(field_get:RectangularShape.height)
  return _internal_height();
}
inline void RectangularShape::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  height_ = value;
}
inline void RectangularShape::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:RectangularShape.height)
}

// -------------------------------------------------------------------

// ReferencePosition

// required int64 latitude = 1;
inline bool ReferencePosition::_internal_has_latitude() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReferencePosition::has_latitude() const {
  return _internal_has_latitude();
}
inline void ReferencePosition::clear_latitude() {
  latitude_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReferencePosition::_internal_latitude() const {
  return latitude_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReferencePosition::latitude() const {
  // @@protoc_insertion_point(field_get:ReferencePosition.latitude)
  return _internal_latitude();
}
inline void ReferencePosition::_internal_set_latitude(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  latitude_ = value;
}
inline void ReferencePosition::set_latitude(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:ReferencePosition.latitude)
}

// required int64 longitude = 2;
inline bool ReferencePosition::_internal_has_longitude() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ReferencePosition::has_longitude() const {
  return _internal_has_longitude();
}
inline void ReferencePosition::clear_longitude() {
  longitude_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReferencePosition::_internal_longitude() const {
  return longitude_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReferencePosition::longitude() const {
  // @@protoc_insertion_point(field_get:ReferencePosition.longitude)
  return _internal_longitude();
}
inline void ReferencePosition::_internal_set_longitude(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  longitude_ = value;
}
inline void ReferencePosition::set_longitude(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:ReferencePosition.longitude)
}

// required .PositionConfidenceEllipse position_confidence = 3;
inline bool ReferencePosition::_internal_has_position_confidence() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || position_confidence_ != nullptr);
  return value;
}
inline bool ReferencePosition::has_position_confidence() const {
  return _internal_has_position_confidence();
}
inline void ReferencePosition::clear_position_confidence() {
  if (position_confidence_ != nullptr) position_confidence_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::PositionConfidenceEllipse& ReferencePosition::_internal_position_confidence() const {
  const ::PositionConfidenceEllipse* p = position_confidence_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PositionConfidenceEllipse*>(
      &::_PositionConfidenceEllipse_default_instance_);
}
inline const ::PositionConfidenceEllipse& ReferencePosition::position_confidence() const {
  // @@protoc_insertion_point(field_get:ReferencePosition.position_confidence)
  return _internal_position_confidence();
}
inline void ReferencePosition::unsafe_arena_set_allocated_position_confidence(
    ::PositionConfidenceEllipse* position_confidence) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_confidence_);
  }
  position_confidence_ = position_confidence;
  if (position_confidence) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ReferencePosition.position_confidence)
}
inline ::PositionConfidenceEllipse* ReferencePosition::release_position_confidence() {
  auto temp = unsafe_arena_release_position_confidence();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PositionConfidenceEllipse* ReferencePosition::unsafe_arena_release_position_confidence() {
  // @@protoc_insertion_point(field_release:ReferencePosition.position_confidence)
  _has_bits_[0] &= ~0x00000001u;
  ::PositionConfidenceEllipse* temp = position_confidence_;
  position_confidence_ = nullptr;
  return temp;
}
inline ::PositionConfidenceEllipse* ReferencePosition::_internal_mutable_position_confidence() {
  _has_bits_[0] |= 0x00000001u;
  if (position_confidence_ == nullptr) {
    auto* p = CreateMaybeMessage<::PositionConfidenceEllipse>(GetArena());
    position_confidence_ = p;
  }
  return position_confidence_;
}
inline ::PositionConfidenceEllipse* ReferencePosition::mutable_position_confidence() {
  // @@protoc_insertion_point(field_mutable:ReferencePosition.position_confidence)
  return _internal_mutable_position_confidence();
}
inline void ReferencePosition::set_allocated_position_confidence(::PositionConfidenceEllipse* position_confidence) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete position_confidence_;
  }
  if (position_confidence) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position_confidence);
    if (message_arena != submessage_arena) {
      position_confidence = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_confidence, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  position_confidence_ = position_confidence;
  // @@protoc_insertion_point(field_set_allocated:ReferencePosition.position_confidence)
}

// required .Altitude altitude = 4;
inline bool ReferencePosition::_internal_has_altitude() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || altitude_ != nullptr);
  return value;
}
inline bool ReferencePosition::has_altitude() const {
  return _internal_has_altitude();
}
inline void ReferencePosition::clear_altitude() {
  if (altitude_ != nullptr) altitude_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Altitude& ReferencePosition::_internal_altitude() const {
  const ::Altitude* p = altitude_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Altitude*>(
      &::_Altitude_default_instance_);
}
inline const ::Altitude& ReferencePosition::altitude() const {
  // @@protoc_insertion_point(field_get:ReferencePosition.altitude)
  return _internal_altitude();
}
inline void ReferencePosition::unsafe_arena_set_allocated_altitude(
    ::Altitude* altitude) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(altitude_);
  }
  altitude_ = altitude;
  if (altitude) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ReferencePosition.altitude)
}
inline ::Altitude* ReferencePosition::release_altitude() {
  auto temp = unsafe_arena_release_altitude();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Altitude* ReferencePosition::unsafe_arena_release_altitude() {
  // @@protoc_insertion_point(field_release:ReferencePosition.altitude)
  _has_bits_[0] &= ~0x00000002u;
  ::Altitude* temp = altitude_;
  altitude_ = nullptr;
  return temp;
}
inline ::Altitude* ReferencePosition::_internal_mutable_altitude() {
  _has_bits_[0] |= 0x00000002u;
  if (altitude_ == nullptr) {
    auto* p = CreateMaybeMessage<::Altitude>(GetArena());
    altitude_ = p;
  }
  return altitude_;
}
inline ::Altitude* ReferencePosition::mutable_altitude() {
  // @@protoc_insertion_point(field_mutable:ReferencePosition.altitude)
  return _internal_mutable_altitude();
}
inline void ReferencePosition::set_allocated_altitude(::Altitude* altitude) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete altitude_;
  }
  if (altitude) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(altitude);
    if (message_arena != submessage_arena) {
      altitude = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, altitude, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  altitude_ = altitude;
  // @@protoc_insertion_point(field_set_allocated:ReferencePosition.altitude)
}

// -------------------------------------------------------------------

// RoadSegmentReferenceID

// optional int64 region = 1;
inline bool RoadSegmentReferenceID::_internal_has_region() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RoadSegmentReferenceID::has_region() const {
  return _internal_has_region();
}
inline void RoadSegmentReferenceID::clear_region() {
  region_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoadSegmentReferenceID::_internal_region() const {
  return region_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoadSegmentReferenceID::region() const {
  // @@protoc_insertion_point(field_get:RoadSegmentReferenceID.region)
  return _internal_region();
}
inline void RoadSegmentReferenceID::_internal_set_region(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  region_ = value;
}
inline void RoadSegmentReferenceID::set_region(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_region(value);
  // @@protoc_insertion_point(field_set:RoadSegmentReferenceID.region)
}

// required int64 id = 2;
inline bool RoadSegmentReferenceID::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RoadSegmentReferenceID::has_id() const {
  return _internal_has_id();
}
inline void RoadSegmentReferenceID::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoadSegmentReferenceID::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoadSegmentReferenceID::id() const {
  // @@protoc_insertion_point(field_get:RoadSegmentReferenceID.id)
  return _internal_id();
}
inline void RoadSegmentReferenceID::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void RoadSegmentReferenceID::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:RoadSegmentReferenceID.id)
}

// -------------------------------------------------------------------

// Speed

// required int32 value = 1;
inline bool Speed::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Speed::has_value() const {
  return _internal_has_value();
}
inline void Speed::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Speed::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Speed::value() const {
  // @@protoc_insertion_point(field_get:Speed.value)
  return _internal_value();
}
inline void Speed::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  value_ = value;
}
inline void Speed::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Speed.value)
}

// required uint32 confidence = 2;
inline bool Speed::_internal_has_confidence() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Speed::has_confidence() const {
  return _internal_has_confidence();
}
inline void Speed::clear_confidence() {
  confidence_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Speed::_internal_confidence() const {
  return confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Speed::confidence() const {
  // @@protoc_insertion_point(field_get:Speed.confidence)
  return _internal_confidence();
}
inline void Speed::_internal_set_confidence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  confidence_ = value;
}
inline void Speed::set_confidence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:Speed.confidence)
}

// -------------------------------------------------------------------

// VehicleLength

// required int32 value = 1;
inline bool VehicleLength::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VehicleLength::has_value() const {
  return _internal_has_value();
}
inline void VehicleLength::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleLength::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleLength::value() const {
  // @@protoc_insertion_point(field_get:VehicleLength.value)
  return _internal_value();
}
inline void VehicleLength::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  value_ = value;
}
inline void VehicleLength::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:VehicleLength.value)
}

// optional .VehicleLengthConfidenceIndication veh_len_conf_ind = 2;
inline bool VehicleLength::_internal_has_veh_len_conf_ind() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VehicleLength::has_veh_len_conf_ind() const {
  return _internal_has_veh_len_conf_ind();
}
inline void VehicleLength::clear_veh_len_conf_ind() {
  veh_len_conf_ind_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::VehicleLengthConfidenceIndication VehicleLength::_internal_veh_len_conf_ind() const {
  return static_cast< ::VehicleLengthConfidenceIndication >(veh_len_conf_ind_);
}
inline ::VehicleLengthConfidenceIndication VehicleLength::veh_len_conf_ind() const {
  // @@protoc_insertion_point(field_get:VehicleLength.veh_len_conf_ind)
  return _internal_veh_len_conf_ind();
}
inline void VehicleLength::_internal_set_veh_len_conf_ind(::VehicleLengthConfidenceIndication value) {
  assert(::VehicleLengthConfidenceIndication_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  veh_len_conf_ind_ = value;
}
inline void VehicleLength::set_veh_len_conf_ind(::VehicleLengthConfidenceIndication value) {
  _internal_set_veh_len_conf_ind(value);
  // @@protoc_insertion_point(field_set:VehicleLength.veh_len_conf_ind)
}

// -------------------------------------------------------------------

// VehicleWidth

// required int32 value = 1;
inline bool VehicleWidth::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VehicleWidth::has_value() const {
  return _internal_has_value();
}
inline void VehicleWidth::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleWidth::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VehicleWidth::value() const {
  // @@protoc_insertion_point(field_get:VehicleWidth.value)
  return _internal_value();
}
inline void VehicleWidth::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  value_ = value;
}
inline void VehicleWidth::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:VehicleWidth.value)
}

// -------------------------------------------------------------------

// Wgs84Angle

// required uint32 wgsAngleValue = 1;
inline bool Wgs84Angle::_internal_has_wgsanglevalue() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Wgs84Angle::has_wgsanglevalue() const {
  return _internal_has_wgsanglevalue();
}
inline void Wgs84Angle::clear_wgsanglevalue() {
  wgsanglevalue_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Wgs84Angle::_internal_wgsanglevalue() const {
  return wgsanglevalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Wgs84Angle::wgsanglevalue() const {
  // @@protoc_insertion_point(field_get:Wgs84Angle.wgsAngleValue)
  return _internal_wgsanglevalue();
}
inline void Wgs84Angle::_internal_set_wgsanglevalue(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  wgsanglevalue_ = value;
}
inline void Wgs84Angle::set_wgsanglevalue(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_wgsanglevalue(value);
  // @@protoc_insertion_point(field_set:Wgs84Angle.wgsAngleValue)
}

// required uint32 wgs84AngleConfidence = 2;
inline bool Wgs84Angle::_internal_has_wgs84angleconfidence() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Wgs84Angle::has_wgs84angleconfidence() const {
  return _internal_has_wgs84angleconfidence();
}
inline void Wgs84Angle::clear_wgs84angleconfidence() {
  wgs84angleconfidence_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Wgs84Angle::_internal_wgs84angleconfidence() const {
  return wgs84angleconfidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Wgs84Angle::wgs84angleconfidence() const {
  // @@protoc_insertion_point(field_get:Wgs84Angle.wgs84AngleConfidence)
  return _internal_wgs84angleconfidence();
}
inline void Wgs84Angle::_internal_set_wgs84angleconfidence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  wgs84angleconfidence_ = value;
}
inline void Wgs84Angle::set_wgs84angleconfidence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_wgs84angleconfidence(value);
  // @@protoc_insertion_point(field_set:Wgs84Angle.wgs84AngleConfidence)
}

// -------------------------------------------------------------------

// YawRate

// required int32 yawratevalue = 1;
inline bool YawRate::_internal_has_yawratevalue() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool YawRate::has_yawratevalue() const {
  return _internal_has_yawratevalue();
}
inline void YawRate::clear_yawratevalue() {
  yawratevalue_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 YawRate::_internal_yawratevalue() const {
  return yawratevalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 YawRate::yawratevalue() const {
  // @@protoc_insertion_point(field_get:YawRate.yawratevalue)
  return _internal_yawratevalue();
}
inline void YawRate::_internal_set_yawratevalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  yawratevalue_ = value;
}
inline void YawRate::set_yawratevalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_yawratevalue(value);
  // @@protoc_insertion_point(field_set:YawRate.yawratevalue)
}

// required .YawRateConfidence yawrateconfidence = 2;
inline bool YawRate::_internal_has_yawrateconfidence() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool YawRate::has_yawrateconfidence() const {
  return _internal_has_yawrateconfidence();
}
inline void YawRate::clear_yawrateconfidence() {
  yawrateconfidence_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::YawRateConfidence YawRate::_internal_yawrateconfidence() const {
  return static_cast< ::YawRateConfidence >(yawrateconfidence_);
}
inline ::YawRateConfidence YawRate::yawrateconfidence() const {
  // @@protoc_insertion_point(field_get:YawRate.yawrateconfidence)
  return _internal_yawrateconfidence();
}
inline void YawRate::_internal_set_yawrateconfidence(::YawRateConfidence value) {
  assert(::YawRateConfidence_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  yawrateconfidence_ = value;
}
inline void YawRate::set_yawrateconfidence(::YawRateConfidence value) {
  _internal_set_yawrateconfidence(value);
  // @@protoc_insertion_point(field_set:YawRate.yawrateconfidence)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CurvatureCalculationMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CurvatureCalculationMode>() {
  return ::CurvatureCalculationMode_descriptor();
}
template <> struct is_proto_enum< ::DriveDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DriveDirection>() {
  return ::DriveDirection_descriptor();
}
template <> struct is_proto_enum< ::SensorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SensorType>() {
  return ::SensorType_descriptor();
}
template <> struct is_proto_enum< ::StationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StationType>() {
  return ::StationType_descriptor();
}
template <> struct is_proto_enum< ::VehicleLengthConfidenceIndication> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::VehicleLengthConfidenceIndication>() {
  return ::VehicleLengthConfidenceIndication_descriptor();
}
template <> struct is_proto_enum< ::YawRateConfidence> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::YawRateConfidence>() {
  return ::YawRateConfidence_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_etsi_5fits_5fcdd_2eproto
